/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:55:04 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.ListSelectionModel;
import javax.swing.border.AbstractBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.MatteBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDataImageAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYSeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYSeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1079.7482833862305, 0, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRendererForDataset(simpleHistogramDataset0);
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getQuadrantPaint(2);
      combinedDomainXYPlot0.getQuadrantOrigin();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 10, (String) null);
      combinedRangeXYPlot0.getLegendItems();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle rectangle0 = new Rectangle();
      dateAxis0.setUpArrow(rectangle0);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) cyclicNumberAxis0, false);
      combinedDomainXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      RingPlot ringPlot0 = new RingPlot();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      BufferedImage bufferedImage0 = new BufferedImage(722, 6, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      bufferedImage0.getAlphaRaster();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 1.0F, cyclicNumberAxis0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(") should be in the range 0 to 3.", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(84, 84, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2387.028278, 420, 1.0F, 1.0F);
      combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle2D_Double0, 1.0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.isDomainGridlinesVisible();
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 15, 1, 15, false, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-7), 10);
      xYPlot0.panRangeAxes((-2220.98584717), plotRenderingInfo0, point0);
      plotRenderingInfo0.clone();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(378, 4, (double) 200, (double) 200, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1;
      int int1 = 1669;
      MatrixSeries matrixSeries0 = new MatrixSeries("~l+A:tBaKt3/Z", 1, 1669);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 1669);
      matrixSeriesCollection0.hasListener(xYBarDataset0);
      NumberAxis numberAxis0 = new NumberAxis();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, numberAxis0, numberAxis0, xYDifferenceRenderer0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XYDataset xYDataset0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-999.75));
      stackedXYBarRenderer0.findDomainBounds((XYDataset) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("aD", (Range) null);
      valueAxisArray0[0] = (ValueAxis) moduloAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-999.75), (double) stackedXYBarRenderer0.ZERO, "aD");
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.GRAY;
      combinedRangeXYPlot0.setNoDataMessagePaint(color0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(3076);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((-231), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, dateAxis0, numberAxis3D0, samplingXYLineRenderer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      defaultXYDataset0.hasListener(xYPlot0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, levelRenderer0);
      xYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.panRangeAxes(10, plotRenderingInfo0, point0);
      combinedDomainXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte) (-49);
      byteArray1[5] = (byte)17;
      byteArray1[6] = (byte) (-24);
      byteArray1[7] = (byte) (-22);
      byteArray1[8] = (byte) (-24);
      byteArray0[0] = byteArray1;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Point2D point2D0 = lookupOp0.getPoint2D(point1, point0);
      combinedDomainXYPlot0.panDomainAxes(59.0, (PlotRenderingInfo) null, point2D0);
      combinedDomainXYPlot0.setDataset(10, (XYDataset) xIntervalSeriesCollection0);
      combinedDomainXYPlot0.setDataset(10, (XYDataset) xIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(1024, (Marker) categoryMarker0, layer0, false);
      combinedRangeXYPlot0.getDomainMarkers(1024, layer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Negative 'width' argument.";
      stringArray0[1] = "org.jfree.chart.plot.LocalizationBundle";
      stringArray0[2] = "org.jfree.chart.plot.LocalizationBundle";
      stringArray0[3] = "org.jfree.chart.plot.LocalizationBundle";
      stringArray0[4] = "org.jfree.chart.plot.LocalizationBundle";
      stringArray0[5] = "org.jfree.chart.plot.LocalizationBundle";
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.plot.LocalizationBundle", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot0.getDomainAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D.Float rectangle2D_Float1 = new Rectangle2D.Float();
      rectangle2D_Float1.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "", 4022);
      Rectangle rectangle0 = new Rectangle();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.equals(xYPlot0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(15, (-897), plotRenderingInfo0);
      xYPlot0.clearRangeMarkers(53);
      Point point0 = new Point();
      xYPlot0.zoomRangeAxes((double) 0.5F, (double) 53, plotRenderingInfo0, (Point2D) point0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2839, 2839);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, logarithmicAxis0);
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getMargin();
      rectangleInsets0.toString();
      logarithmicAxis0.setLabelInsets(rectangleInsets0, false);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, logarithmicAxis0, logarithmicAxis0, xYBoxAndWhiskerRenderer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      xYPlot0.getDomainAxisLocation(2);
      IntervalMarker intervalMarker0 = new IntervalMarker(5195.0, 10, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker(15, (Marker) intervalMarker0, layer0);
      xYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-104), 3, 10, 97, 2, 3, true, true, false, true, true, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      combinedDomainXYPlot1.drawQuadrants(graphics2D0, rectangle2D0);
      combinedDomainXYPlot1.getDomainAxis(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\t";
      stringArray0[1] = "fF";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      stringArray0[6] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("\t", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1977, systemColor0, systemColor0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 232, (-313), 200, 420);
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, rectangle0);
      combinedDomainXYPlot0.getDomainAxis(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      ValueMarker valueMarker0 = new ValueMarker(Double.NEGATIVE_INFINITY);
      combinedDomainXYPlot1.addRangeMarker(4, (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSubplots();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedDomainXYPlot1.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(250.0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0F, 2420.2451);
      Year year0 = new Year();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 2, year0, timeZone0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      xYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      cyclicNumberAxis0.setLabelToolTip("");
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[4] = 250.0;
      doubleArray0[5] = (double) 10;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      combinedRangeXYPlot0.getDomainGridlinePaint();
      xYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(58, (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.addDomainMarker(58, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      Color color0 = Color.gray;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      combinedRangeXYPlot0.setRenderer(1012, (XYItemRenderer) xYBarRenderer0, false);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 250.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker(1012, (Marker) intervalMarker0, layer0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2.0F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 1012;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 1012;
      floatArray0[5] = (float) 1012;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2.0F;
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1412, 1, chartRenderingInfo0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, true);
      ColorModel colorModel0 = chartPanel0.getColorModel();
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), 1307.22F, 0.0F, 2.0F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisEdge(0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10);
      XYDataImageAnnotation xYDataImageAnnotation0 = new XYDataImageAnnotation(bufferedImage0, 0, 10.0, 0.5F, (-3957.961577105));
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYDataImageAnnotation0, true);
      bufferedImage0.createGraphics();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.getDomainAxis(1);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYDataImageAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 1, (double) 10, plotRenderingInfo0, (Point2D) point2D_Float0);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedRangeXYPlot0.getDomainAxis((-140));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Day day0 = new Day(10, 10, 3745);
      CategoryMarker categoryMarker0 = new CategoryMarker(day0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3745, "\"DgHX_~bZ1 ");
      Locale locale0 = Locale.CHINA;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      DateAxis dateAxis0 = new DateAxis("|&,#$18e}K5", simpleTimeZone0, locale0);
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, dateAxis0, dateAxis0, xYAreaRenderer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("|&,#$18e}K5");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, levelRenderer0);
      xYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      combinedDomainXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D0, linkedList0);
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D_Float0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(250.0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0F, 2420.2451);
      Year year0 = new Year(500);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 2, year0, timeZone0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      xYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = 250.0;
      doubleArray0[5] = (double) 10;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      combinedRangeXYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("I{#Dv@i7.ts~W5`M>`]", timeZone0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.NaN);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, dateAxis0, dateAxis0, candlestickRenderer0);
      combinedRangeXYPlot0.add(xYPlot0);
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      combinedRangeXYPlot0.getRendererForDataset(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8);
      Polygon polygon0 = new Polygon();
      polygon0.getBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      Rectangle rectangle0 = polygon0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3089, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6190);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DebugGraphics debugGraphics0 = new DebugGraphics(graphics2D0);
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = debugGraphics0.getClipBounds(rectangle0);
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle1);
      combinedDomainXYPlot0.isRangePannable();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((-1039), (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      NumberAxis numberAxis0 = new NumberAxis("Indices must be Integer instances.");
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.plot.LocalizationBundle");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, logAxis0, xYStepAreaRenderer0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepAreaRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepAreaRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) xYStepAreaRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) xYStepAreaRenderer0;
      xYPlot0.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Point point0 = new Point();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisEdge(0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(174.366277131, 1026.871, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      combinedRangeXYPlot1.getRendererForDataset(matrixSeriesCollection0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedRangeXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D_Float0, (List) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getFixedLegendItems();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(categoryTableXYDataset0, valueAxis0, numberAxis3D0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 500.0, Double.POSITIVE_INFINITY, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      combinedRangeXYPlot0.getDomainGridlinePaint();
      combinedDomainXYPlot0.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      IntervalMarker intervalMarker0 = new IntervalMarker(15, (-7.458695549587681), jFreeChart0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-7.458695549587681), 2200.71);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(123, 123);
      combinedRangeXYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot2.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 10, cyclicNumberAxis0, xYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeMarkers();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("kcC,N+#G28F.^iP`j]v");
      Integer integer0 = new Integer((-245));
      combinedRangeXYPlot0.getDomainAxisEdge(1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(471, 15);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(471, "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(2341.7482833862305, true);
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, defaultCaret0, (AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainMarkers();
      JFreeChart jFreeChart0 = new JFreeChart("_O6-/Y", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      bufferedImage0.createGraphics();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-2);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "_O6-/Y");
      MatteBorder matteBorder0 = new MatteBorder(imageIcon0);
      AbstractBorder.getInteriorRectangle((Component) null, (Border) matteBorder0, (-4803), (int) (byte)65, (-1), (-4803));
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 64;
      doubleArray1[1] = (-840.17356505725);
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 10;
      doubleArray1[5] = (double) (byte) (-35);
      doubleArray1[6] = (double) 1.0F;
      doubleArray1[7] = (double) (-4801);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (byte) (-2);
      doubleArray2[1] = (double) (byte)65;
      doubleArray2[2] = (double) 10;
      doubleArray2[3] = (double) 0.5F;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) (byte) (-35);
      doubleArray2[6] = (double) 64;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) (-4801);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) (-4803);
      doubleArray4[1] = (double) (-1);
      doubleArray4[2] = (double) (byte) (-2);
      doubleArray4[3] = (double) 10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) (byte)65;
      doubleArray5[1] = (double) 15;
      doubleArray5[2] = (double) (byte)65;
      doubleArray5[3] = (double) (byte)65;
      doubleArray5[4] = (double) 1.0F;
      doubleArray5[5] = (double) (-4801);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) (-1);
      doubleArray6[1] = (double) (byte)65;
      doubleArray6[2] = (double) (byte) (-2);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) (byte)65;
      doubleArray7[1] = (-840.17356505725);
      doubleArray7[2] = (-840.17356505725);
      doubleArray7[3] = (double) (byte) (-2);
      doubleArray7[4] = (double) 15;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (double) (byte) (-2);
      doubleArray8[1] = (double) 64;
      doubleArray8[2] = (double) (byte) (-2);
      doubleArray8[3] = (double) (byte) (-2);
      doubleArray8[4] = (double) 0.5F;
      doubleArray8[5] = (double) (-4804);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("_O6-/Y");
      NumberAxis numberAxis0 = new NumberAxis();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = null;
      try {
        categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis0, stackedBarRenderer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(32, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      combinedDomainXYPlot0.getDomainAxis((-1202));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes(2116.91173608, plotRenderingInfo0, (Point2D) null);
      XYBubbleRenderer xYBubbleRenderer0 = null;
      try {
        xYBubbleRenderer0 = new XYBubbleRenderer(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'scaleType'.
         //
         verifyException("org.jfree.chart.renderer.xy.XYBubbleRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      numberAxis3D0.setUpperMargin(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 1.0F);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getSelectionModel();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.clearRangeAxes();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>();
      JList<String> jList0 = new JList<String>(defaultComboBoxModel0);
      ListSelectionModel listSelectionModel0 = jList0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      jTable0.getCellRect(10, 77, true);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      // Undeclared exception!
      combinedDomainXYPlot0.setRangeAxisLocation(2104533975, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(32, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      combinedDomainXYPlot0.removeDomainMarker(32, (Marker) categoryMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[3] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[4] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[6] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.setDataset(0, (XYDataset) timePeriodValuesCollection0);
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, true);
      combinedDomainXYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.5F, (double) 0.5F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      chartRenderingInfo0.getPlotInfo();
      defaultValueDataset0.validateObject();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
      Rectangle rectangle0 = new Rectangle(1, 10, (-2701), (-2701));
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("2#3G0lh8zW1h'I");
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(3);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      AxisSpace axisSpace0 = subCategoryAxis0.reserveSpace(graphics2D0, thermometerPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      BevelBorder bevelBorder0 = new BevelBorder(151, color0, color0);
      Rectangle rectangle1 = bevelBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, 1412, 10, (-989), (-2701));
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D1, rectangle1, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Requires 'index' >= 0.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(3115.158377234);
      combinedDomainXYPlot0.getDomainAxis();
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      combinedDomainXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D_Float0, linkedList0);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = metalTreeUI0.new NodeDimensionsHandler();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      TreePath treePath0 = new TreePath(metalTreeUI0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      fixedHeightLayoutCache0.getBounds(treePath0, defaultCaret0);
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(windItemRenderer0, (-9999), 1292, false, (Rectangle) null);
      Vector<DefaultXYDataset> vector0 = new Vector<DefaultXYDataset>();
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, vector0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, axisSpace0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.reserveSpace((Graphics2D) null, combinedDomainXYPlot0, (Rectangle2D) null, (RectangleEdge) null, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Stack<Point2D.Float> stack0 = new Stack<Point2D.Float>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, stack0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("I{Rce6|");
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, (Rectangle2D) null, axisSpace0);
      JTree jTree0 = new JTree(stack0);
      jTree0.getRowBounds(10);
      // Undeclared exception!
      try { 
        subCategoryAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, (Rectangle2D) null, (RectangleEdge) null, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addDomainMarker(57, (Marker) categoryMarker0, layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeDomainMarker(57, (Marker) categoryMarker0, layer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryMarker", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(3115.158377234);
      combinedDomainXYPlot0.getDomainAxis();
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      combinedDomainXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D0, linkedList0);
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D_Float0, linkedList0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = null;
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle2D0, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.setDataset(0, (XYDataset) null);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setMinorTickMarksVisible(false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setRangeAxis((-540), (ValueAxis) dateAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Color color0 = Color.BLACK;
      Color color1 = Color.BLACK;
      combinedDomainXYPlot0.setQuadrantPaint(3, areaRenderer0.DEFAULT_PAINT);
      combinedDomainXYPlot0.getRangeGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-1996), (-1996), 500, (-1996), 5322, (-1), false, true, true, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1996), "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) null, false);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) vectorRenderer0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(vectorRenderer0.DEFAULT_STROKE);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)58;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      Rectangle2D rectangle2D1 = combinedDomainXYPlot0.DEFAULT_INSETS.createInsetRectangle(rectangle2D0);
      combinedDomainXYPlot0.drawZeroDomainBaseline((Graphics2D) null, rectangle2D1);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)1;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, (String) null);
      JRadioButton jRadioButton0 = new JRadioButton((String) null, imageIcon0, false);
      JScrollPane jScrollPane0 = new JScrollPane(jRadioButton0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      jViewport0.getViewRect();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedDomainXYPlot0.getDataset((int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle rectangle0 = new Rectangle();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      combinedDomainXYPlot0.getDomainAxisIndex(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      Rectangle rectangle1 = polygon0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes((Graphics2D) null, rectangle1, rectangle0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      Rectangle rectangle1 = polygon0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot1.drawAxes((Graphics2D) null, rectangle0, rectangle1, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, 10, 1127, 10, (-1996), 10, true, true, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      combinedDomainXYPlot0.zoomDomainAxes((double) 0, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(10, 10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker(79, (Marker) null, (Layer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(41, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.removeDomainMarker(41, (Marker) categoryMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(0.0F, 500, 0.5F, 0.0F, 0.0F, 0.0F);
      RoundRectangle2D.Float roundRectangle2D_Float1 = new RoundRectangle2D.Float(2.0F, 311.11166F, 0.0F, 0.0F, 500, 0.5F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float1.getBounds2D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("*/?)71W", combinedDomainXYPlot0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10, (double) 0.5F);
      roundRectangle2D_Float1.getPathIterator(affineTransform0, (double) 0.0F);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1847, 107);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawBackground(graphics2D0, rectangle2D0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataRange(numberAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Millisecond millisecond0 = new Millisecond();
      timeTableXYDataset0.add((TimePeriod) millisecond0, 47.05292, "The 'data' array must have length == 3.");
      combinedRangeXYPlot0.indexOf(timeTableXYDataset0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getRangeAxisEdge(500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float(4567.603F, 4567.603F);
      combinedDomainXYPlot0.zoomDomainAxes(1574.141469744158, 1.0E10, plotRenderingInfo1, (Point2D) point2D_Float0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      multiplePiePlot0.getPieChart();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisEdge(1);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 343);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 2.5E-7, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedRangeXYPlot0.getRangeAxisEdge(3);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      cyclicNumberAxis0.configure();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 2008);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 2340.4059122711797, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.getDomainMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(477.192, 477.192);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
      combinedDomainXYPlot0.getDomainMarkers(500, layer0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((double) 500, 184.958, (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (238119.808) <= upper (87784.285936).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, defaultCaret0);
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, numberAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]QW;H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setBackgroundImageAlignment((-1263));
      JTextPane jTextPane0 = new JTextPane();
      dateAxis0.isHiddenValue(10);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(500);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYAreaRenderer2_0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.getRangeAxisIndex(valueAxisArray0[1]);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]QW;H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      dateAxis0.isHiddenValue(10);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(500);
      combinedDomainXYPlot0.getRangeAxisLocation((-897));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick(268, 612, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      GeneralPath generalPath0 = new GeneralPath();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(2);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.clone();
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesStroke(41);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers((-1061));
      combinedDomainXYPlot0.getDataset((-1475));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis.createIntegerTickUnits();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2317, 1624);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(0.0F, 0.0F, 0.0F, 10, (-4172.9834F), 0.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.drawAnnotations(graphics2D0, rectangle2D0, plotRenderingInfo0);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0, layer1);
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      combinedDomainXYPlot0.render(graphics2D0, rectangle2D0, 1624, plotRenderingInfo0, categoryCrosshairState0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_mvVXh+,t#3");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 500, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      DateAxis dateAxis1 = new DateAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis1);
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-530), 500, 10, (-530), 10, 0, true, true, true, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      point0.setLocation(7.0, 10.0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 0, plotRenderingInfo0, (Point2D) point0, true);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, dateAxis0, stackedBarRenderer0);
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation(7);
      combinedDomainXYPlot0.setDomainAxisLocation(0, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeMarkers((-1251), (Layer) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(numberAxis3D1.DEFAULT_AXIS_LINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      numberAxis3D1.removeChangeListener(combinedDomainXYPlot1);
      combinedDomainXYPlot1.getInsets();
      combinedDomainXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      ValueMarker valueMarker0 = new ValueMarker(Double.NEGATIVE_INFINITY);
      combinedDomainXYPlot1.addRangeMarker(4, (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getFixedLegendItems();
      combinedDomainXYPlot1.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 738);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 4.0, valueAxis0, combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(thermometerPlot0.DEFAULT_INSETS);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisForDataset(0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.getQuadrantPaint(41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (41) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      jTable0.getCellRect(10, 10, true);
      ArrayList<XYBoxAndWhiskerRenderer> arrayList0 = new ArrayList<XYBoxAndWhiskerRenderer>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, arrayList0);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle0, 3115.158377234, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, 10.0, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.clearDomainMarkers((-1500));
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      BasicStroke basicStroke0 = new BasicStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(basicStroke0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      combinedDomainXYPlot1.drawDomainGridlines((Graphics2D) null, rectangle2D0, linkedList0);
      combinedDomainXYPlot1.drawRangeGridlines((Graphics2D) null, rectangle2D0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("QhKf5u7", combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.setBackgroundPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      xYPlot0.setRangeZeroBaselinePaint(xYBubbleRenderer0.DEFAULT_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(1, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      combinedDomainXYPlot0.removeRangeMarker(41, (Marker) categoryMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setDomainCrosshairValue(3115.158377234, true);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D1);
      numberAxis3D1.removeChangeListener(combinedDomainXYPlot1);
      combinedDomainXYPlot0.getInsets();
      combinedDomainXYPlot0.clearDomainAxes();
      NumberAxis numberAxis0 = new NumberAxis("I?0;O+cr(1B");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      IntervalMarker intervalMarker0 = new IntervalMarker((-7.458695549587681), 15);
      xYPlot0.getDomainAxisLocation();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(15, (-911), plotRenderingInfo0);
      Point point0 = new Point((-911), (-538));
      xYPlot0.panDomainAxes(0.5F, plotRenderingInfo0, point0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle();
      combinedRangeXYPlot0.getRangeAxisLocation(0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.handleClick((-1), 8, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, 1, false);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, (List) null);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle0, (-223.11186874), combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes((double) 2.0F, 0.0, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2.1) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4991.7552218298, 294.38);
      cyclicNumberAxis0.pan(1.0E-7);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setNoDataMessagePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 10, 0.0F, 0.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      cyclicNumberAxis0.lengthToJava2D(1.0F, rectangle2D_Float0, rectangleEdge0);
      cyclicNumberAxis0.setAxisLinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.getRangeAxisEdge(6);
      combinedDomainXYPlot0.getRangeAxisCount();
      combinedDomainXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      numberAxis3D1.setRangeWithMargins(numberAxis3D0.DEFAULT_RANGE);
      numberAxis3D1.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      BasicStroke basicStroke0 = new BasicStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.getBounds2D();
      LinkedList<XYDotRenderer> linkedList0 = new LinkedList<XYDotRenderer>();
      combinedDomainXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D_Float0, linkedList0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-385), (ValueAxis) numberAxis3D0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, (-87.2231316911527), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(1696, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 10.0, valueAxis0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_mvVXh+,t#3");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeAxis(1263, (ValueAxis) dateAxis0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairStroke(combinedDomainXYPlot1.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      combinedDomainXYPlot0.getDataset(10);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setUpArrow(thermometerPlot0.DEFAULT_LEGEND_ITEM_BOX);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), 418.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      numberAxis3D0.removeChangeListener(combinedDomainXYPlot2);
      combinedDomainXYPlot2.getInsets();
      combinedDomainXYPlot0.clearDomainAxes();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.renderer.category.LineRenderer3D");
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot2);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.drawDomainMarkers(graphics2D0, rectangle0, 1867, layer0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      IntervalMarker intervalMarker0 = new IntervalMarker(15, (-7.458695549587681), jFreeChart0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      xYPlot0.getRangeAxisLocation(15);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(229, (-897), plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      numberAxis3D1.setRangeWithMargins(numberAxis3D0.DEFAULT_RANGE);
      numberAxis3D1.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D1);
      numberAxis3D1.removeChangeListener(combinedDomainXYPlot1);
      combinedDomainXYPlot0.getInsets();
      combinedDomainXYPlot0.clearDomainAxes();
      NumberAxis numberAxis0 = new NumberAxis("I?0;O+cr(1B");
      JFreeChart jFreeChart0 = new JFreeChart("The 'data' array must have length == 6.", combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1499, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawDomainMarkers(graphics2D0, rectangle0, 10, layer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_mvVXh+,t#3");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 500, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      IntervalMarker intervalMarker1 = new IntervalMarker(10, 0.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(10, 10, 10, 1.0F, 10, 10);
      combinedDomainXYPlot0.getDomainMarkers(64, (Layer) null);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(2154.9680951151126);
      combinedDomainXYPlot0.addRangeMarker((-1500), (Marker) valueMarker0, layer0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) vectorRenderer0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(vectorRenderer0.DEFAULT_STROKE);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)1;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, (String) null);
      JRadioButton jRadioButton0 = new JRadioButton((String) null, imageIcon0, false);
      JScrollPane jScrollPane0 = new JScrollPane(jRadioButton0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, 0, vectorRenderer0.DEFAULT_STROKE, vectorRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1293.5775, 0.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0, false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0, true);
      Boolean boolean0 = new Boolean(false);
      JFreeChart jFreeChart0 = new JFreeChart("", xYTextAnnotation0.DEFAULT_FONT, combinedRangeXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(365, 500, 1293.5775, 1168.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.0, numberAxis0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      numberAxis3D1.setRangeWithMargins(numberAxis3D0.DEFAULT_RANGE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D1);
      numberAxis3D1.removeChangeListener(combinedDomainXYPlot1);
      combinedDomainXYPlot0.getInsets();
      combinedDomainXYPlot0.clearDomainAxes();
      NumberAxis numberAxis0 = new NumberAxis("I?0;O+cr(1B");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, 1, false);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, (List) null);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle0, (-223.11186874), combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      combinedDomainXYPlot0.configureDomainAxes();
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(10, (-2373.883834), 0.5F, 4.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      JTree jTree0 = new JTree(defaultMutableTreeNode0);
      synthTreeUI0.getPathBounds(jTree0, (TreePath) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.drawHorizontalLine(graphics2D0, (Rectangle2D) null, 10, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("Jt48ERPY", decimalFormatSymbols0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", decimalFormat0, decimalFormat0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10, standardXYToolTipGenerator0);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(timeTableXYDataset0, moduloAxis0, moduloAxis0, cyclicXYItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Font font0 = TextFragment.DEFAULT_FONT;
      font0.getAttributes();
      numberAxis3D0.setLabelFont(font0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      combinedRangeXYPlot0.configureDomainAxes();
      combinedRangeXYPlot0.getRangeTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 4.0, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      AxisSpace axisSpace1 = combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace0);
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, numberAxis3D0, dateAxis0, samplingXYLineRenderer0);
      xYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      categoryAxis0.setMaximumCategoryLabelLines(46);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, levelRenderer0);
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(1.0E-8, 500, categoryPlot0.DEFAULT_GRIDLINE_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE, 4.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) vectorRenderer0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(vectorRenderer0.DEFAULT_STROKE);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      combinedRangeXYPlot0.getRangeAxisEdge(1);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("X-value already exists.", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot1.setRangeMinorGridlinePaint(symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(symbolAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(symbolAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot1.getInsets();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("X-value already exists.");
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(subCategoryAxis0, false);
      RendererChangeEvent rendererChangeEvent1 = new RendererChangeEvent("X-value already exists.", true);
      combinedDomainXYPlot3.rendererChanged(rendererChangeEvent1);
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      combinedDomainXYPlot2.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(2154.9680951151126);
      combinedDomainXYPlot0.addRangeMarker((-1500), (Marker) valueMarker0, layer0, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.calculateRangeAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
      combinedRangeXYPlot1.getRangeCrosshairStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle0, 10, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.configureDomainAxes();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(1.0E-8, 15, 0.05, 1.0F);
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      combinedDomainXYPlot1.getRangeAxisIndex(numberAxis3D0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(500, 500);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.zoomRangeAxes((double) 15, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.getInsets();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, true);
      combinedRangeXYPlot0.getWeight();
      combinedDomainXYPlot1.setRangeGridlineStroke(combinedDomainXYPlot2.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      AxisLocation axisLocation1 = combinedRangeXYPlot1.getRangeAxisLocation();
      combinedRangeXYPlot1.setRangeAxisLocation(10, axisLocation1, true);
      combinedRangeXYPlot0.getDomainGridlineStroke();
      combinedRangeXYPlot1.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToRangeAxis((-1728), (-1007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setQuadrantPaint(2, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) numberAxis3D0;
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.GERMAN;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0, locale0);
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      zoneInfo0.getDisplayName(locale1);
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[8] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(0.05, 2.5E10, (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot0.getInsets();
      combinedDomainXYPlot2.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedDomainXYPlot0.clearDomainAxes();
      NumberAxis numberAxis0 = new NumberAxis("I?0;O+cr(1B");
      combinedDomainXYPlot2.getRangeAxisIndex(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.configureDomainAxes();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(10, (-1739.0), (double) 1.0F);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, (RenderingHints) null);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, (-1126), 10, 10, 89, (-1488), false, false, true, false, true, false);
      Point point0 = chartPanel0.getLocation();
      Point2D point2D0 = affineTransformOp0.getPoint2D(point0, point0);
      combinedRangeXYPlot0.setQuadrantOrigin(point2D0);
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.add(1863.079406, 0.05);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setUpperMargin((-2576.525));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, (-1.0));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-2575.525).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      IntervalMarker intervalMarker0 = new IntervalMarker(15, 1.0F, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      intervalMarker0.addChangeListener(combinedDomainXYPlot0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((-40), (Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      TextBox textBox0 = new TextBox("");
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      xYPlot0.setInsets(rectangleInsets0, true);
      xYPlot0.setRangeZeroBaselineVisible(true);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(2341.7482833862305, 25000.0, 10, 1.7976931348623157E308);
      xYPlot0.clone();
      xYBoxAnnotation0.setToolTipText("Null 'marker' not permitted.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setMinorTickCount((-456));
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      combinedDomainCategoryPlot0.axisChanged(axisChangeEvent0);
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      xYBoxAnnotation0.setToolTipText("vp{2");
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      xYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      IntervalMarker intervalMarker0 = new IntervalMarker((-427.5847), 4.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedDomainXYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot2.getRangeAxisIndex((ValueAxis) null);
      combinedDomainXYPlot1.getSeriesCount();
      combinedDomainXYPlot2.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, 10, 1127, 10, (-1996), 10, true, true, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      combinedDomainXYPlot0.zoomDomainAxes((double) 0, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle();
      Layer layer0 = Layer.FOREGROUND;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(0.0025, 0.0, (double) 0, (double) 0.0F);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.getDomainAxisLocation(0);
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.setDomainCrosshairPaint(combinedRangeXYPlot3.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot3.equals(combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot1.setRangeMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot3.getInsets();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StandardXYSeriesLabelGenerator standardXYSeriesLabelGenerator0 = new StandardXYSeriesLabelGenerator("");
      xYDifferenceRenderer0.setLegendItemURLGenerator(standardXYSeriesLabelGenerator0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesOutlinePaint(4402);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot1.setRangeMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot(dateAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot3.getInsets();
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      combinedDomainXYPlot1.clearDomainAxes();
      combinedDomainXYPlot3.getRangeAxisIndex(numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 4.0, "Mz");
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getSectionPaint(true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis(500);
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) null, false);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      ImageIcon imageIcon0 = new ImageIcon((String) null, (String) null);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(imageIcon0, true);
      JScrollPane jScrollPane0 = new JScrollPane(jRadioButtonMenuItem0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, 5.0E10, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, xYBubbleRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedDomainXYPlot0.getDomainMarkers((Layer) null);
      double double0 = (-3339.3776130876163);
      double double1 = Double.NaN;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 304, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, dateAxis0, numberAxis3D0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("I8zgC,&mr@");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, dateAxis0, levelRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = (-3489);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.zoomRangeAxes((double) (-3489), plotRenderingInfo0, (Point2D) null, false);
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-53));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -53 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), (double) 0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), (double) 0);
      Area area0 = new Area();
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.0, (-1653.11));
      area0.createTransformedArea(affineTransform0);
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      int int0 = 62;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 62, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 0.0, numberAxis3D0, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'N';
      charArray0[2] = '<';
      charArray0[3] = '^';
      charArray0[4] = ',';
      charArray0[5] = '[';
      charArray0[6] = 'p';
      int int1 = (-1189);
      int int2 = (-1953);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, (-1248.57165662), numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, intervalMarker0, combinedRangeXYPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.plot.IntervalMarker@85
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", numberFormat0, dateFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1, standardXYToolTipGenerator0, standardXYURLGenerator0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(stackedXYAreaRenderer0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      combinedDomainXYPlot0.getDomainTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      color0.darker();
      StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Color.getColor("LLUbJYYdM");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      int int0 = 4;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 10);
      bufferedImage0.createGraphics();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.formatToCharacterIterator(bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      categoryMarker0.setOutlinePaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
      PiePlot piePlot0 = new PiePlot();
      boolean boolean0 = false;
      Paint paint0 = piePlot0.lookupSectionPaint(1.0F, false);
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(paint0);
      combinedDomainXYPlot0.isRangeZoomable();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle();
      Layer layer0 = Layer.FOREGROUND;
      rectangle0.add(3582, 2000);
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle0, 85, layer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'order' argument.", xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.setRangeCrosshairVisible(false);
      xYPlot1.getRangeGridlineStroke();
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot1.getDomainZeroBaselinePaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(15);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      xYPlot0.getRangeGridlinePaint();
      xYPlot1.getAnnotations();
      xYPlot0.clearRangeMarkers();
      int int0 = 234;
      int int1 = 4;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byte byte1 = (byte)121;
      byteArray0[1] = (byte)121;
      byte byte2 = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byte byte3 = (byte)41;
      byteArray0[3] = (byte)41;
      byte byte4 = (byte)21;
      byteArray0[4] = (byte)21;
      byte byte5 = (byte)6;
      byteArray0[5] = (byte)6;
      byte byte6 = (byte)15;
      byteArray0[6] = (byte)15;
      int int2 = 1797;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(234, 4, (byte[]) null, byteArray0, byteArray0, 1797);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis(500);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("(", 10.0, 4.0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      combinedRangeXYPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRenderer();
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      int int0 = 356;
      IntervalMarker intervalMarker0 = new IntervalMarker((-2050.2729154431), 10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(797, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.setDomainAxis(356, (ValueAxis) null, false);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot0.clearDomainMarkers();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(185, (-3376), 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1024
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      combinedRangeXYPlot0.indexOf(timeTableXYDataset0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 10);
      Layer layer0 = Layer.FOREGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(1398.641744442555, 10);
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot1.isRangeCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(24, layer0);
      Layer layer1 = Layer.BACKGROUND;
      Rectangle rectangle0 = new Rectangle();
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getQuadrantPaint(0);
      combinedRangeXYPlot0.getRenderer();
      combinedRangeXYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      numberAxis3D0.setUpperMargin(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 1.0F);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(500, (-3193), false);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, (List) null);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot1.setRangeAxisLocation(0, axisLocation0, false);
      combinedRangeXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addDomainMarker(10, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, attributeSet0);
      dateAxis0.isHiddenValue(10);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(500);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYAreaRenderer2_0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.getLegendItems();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedDomainXYPlot0.getDomainAxisCount();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(2323.912718992, plotRenderingInfo1, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      IntervalMarker intervalMarker0 = new IntervalMarker(436.74768001, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addDomainMarker(503, (Marker) intervalMarker0, layer0, false);
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(5, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      combinedDomainXYPlot0.clearSelection();
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point point0 = new Point();
      JFreeChart jFreeChart0 = new JFreeChart("xDPBP6*u7d&]/./_", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point0, false);
      combinedRangeXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      axisLocation2.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(10, axisLocation1, true);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.removeDomainMarker((-163), (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot1.setRangeGridlineStroke(combinedDomainXYPlot2.DEFAULT_OUTLINE_STROKE);
      Rectangle rectangle0 = new Rectangle();
      Layer layer1 = Layer.FOREGROUND;
      rectangle0.add(85, 3582);
      combinedDomainXYPlot1.drawRangeMarkers((Graphics2D) null, rectangle0, 4, layer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.05, numberAxis3D0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot2.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getDrawingSupplier();
      combinedDomainXYPlot1.setDrawingSupplier((DrawingSupplier) null, false);
      combinedDomainXYPlot1.setDomainCrosshairValue((double) xYBubbleRenderer0.ZERO);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot1.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      combinedRangeXYPlot0.getDataRange(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.setDomainCrosshairPaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), (double) 0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_mvVXh+,t#3");
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, dateAxis0, dateAxis0, samplingXYLineRenderer0);
      xYPlot0.equals(defaultXYDataset0);
      xYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("_mvVXh+,t#3");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect(1755, 904, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, linkedList0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot1.setNotify(false);
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot1.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      numberAxis3D0.setUpperMargin(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      numberAxis3D0.pan(3327.0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(500, 10, false);
      combinedDomainXYPlot1.drawRangeTickBands((Graphics2D) null, rectangle0, (List) null);
      combinedDomainXYPlot1.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(500, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Color color0 = Color.magenta;
      color0.darker();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedDomainXYPlot1.setDataset(10, (XYDataset) defaultXYDataset0);
      combinedDomainXYPlot1.clearAnnotations();
      combinedDomainXYPlot1.isRangePannable();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("f#hZ[mw6;hhiig[)");
      combinedDomainXYPlot0.getDomainAxisIndex(logarithmicAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 797);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawQuadrants(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      numberAxis3D0.setUpperMargin(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(500, (-3193), false);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, (List) null);
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getWeight();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      chartRenderingInfo1.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("suQAn`!Xr)2/", xYPlot0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.getLegendItemToolTipGenerator();
      xYDifferenceRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      combinedRangeXYPlot0.setDomainCrosshairPaint(xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -196 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.mapDatasetToDomainAxis(24, 500);
      IntervalMarker intervalMarker0 = new IntervalMarker(828.61, 0.05, color0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(500, (Marker) intervalMarker0, layer0, false);
      Rectangle rectangle0 = new Rectangle();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getQuadrantPaint(0);
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((double) 500, plotRenderingInfo0, (Point2D) point2D_Float0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(500);
      combinedRangeXYPlot0.getRendererForDataset(simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      chartRenderingInfo1.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("suQAn`!Xr)2/", xYPlot0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.getLegendItemToolTipGenerator();
      xYDifferenceRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1181, 1957, 1, 7, 500, 4, true, true, true, true, true, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.clearRangeMarkers((-955));
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.getSeriesCount();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), 5.0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(0, (-1380.22F));
      combinedRangeXYPlot0.zoomRangeAxes((-1801.3109), plotRenderingInfo0, (Point2D) point2D_Float0, true);
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.clearDomainMarkers((-1500));
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 10);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(combinedDomainXYPlot1.DEFAULT_INSETS);
      combinedDomainXYPlot0.getDatasetCount();
      combinedDomainXYPlot0.mapDatasetToRangeAxis(2, 10);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, valueAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1, 61, 181, 4, 54, 674, true, true, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((-804.60070504), plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_mvVXh+,t#3");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 500, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(10);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation2 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setRangeAxisLocation(63, axisLocation2, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -240 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", combinedDomainXYPlot0);
      NumberAxis numberAxis0 = new NumberAxis("{S;0");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(4.0, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, clusteredXYBarRenderer0);
      xYPlot0.setDataset((XYDataset) null);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{S;0";
      stringArray0[1] = "{S;0";
      stringArray0[2] = "{S;0";
      stringArray0[3] = "Jt48ERPY";
      stringArray0[4] = "";
      stringArray0[5] = "{S;0";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      CategoryPlot categoryPlot0 = null;
      try {
        categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis0, stackedBarRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      combinedRangeXYPlot0.setDomainGridlinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      Graphics2D graphics2D0 = null;
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.calculateRangeAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseStroke();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(1);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
      combinedRangeXYPlot0.getDatasetCount();
      combinedRangeXYPlot0.isDomainPannable();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.markerChanged((MarkerChangeEvent) null);
      combinedDomainXYPlot0.getDomainAxis((-1488));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(180, 1.5, 1.0, 0.05);
      rectangle2D_Double0.getBounds2D();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, true, true, true, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getBaseStroke();
      GeneralPath generalPath0 = new GeneralPath(candlestickRenderer0.DEFAULT_SHAPE);
      combinedRangeXYPlot0.setRangeCrosshairStroke(stroke0);
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, 1.0F, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      color0.darker();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      LogAxis logAxis0 = new LogAxis();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.getRenderer((-2281));
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot1.setDomainAxisLocation(14, axisLocation2, true);
      combinedRangeXYPlot0.setDomainAxisLocation(2803, axisLocation1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2000.0, 1526.319119928794, 0.05, 4.0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, false, false, true, true);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.setRangeTickBandPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.NaN, 1.0F, 0.0, 1.0E-8);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(0.05, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      combinedDomainXYPlot0.setDomainAxis(62, (ValueAxis) numberAxis3D0, true);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getDomainMarkers(layer0);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
      Boolean boolean0 = new Boolean(false);
      JFreeChart jFreeChart0 = new JFreeChart("BM432lZ'ikb$d", defaultXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) defaultXYItemRenderer0.ZERO, (double) 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Paint paint0 = combinedRangeXYPlot1.getDomainZeroBaselinePaint();
      combinedDomainXYPlot1.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 3324.793052998888, numberAxis3D0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, paint0);
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.mapDatasetToDomainAxis(24, 500);
      combinedRangeXYPlot0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      combinedDomainXYPlot1.getRangeAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getSeriesStroke(10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2328.549), 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.isRangePannable();
      combinedDomainXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2341.7482833862305);
      combinedDomainXYPlot0.setRangeAxis(14, (ValueAxis) cyclicNumberAxis0, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo1.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("suQAn`!Xr)2/", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1181, 1957, 1, 7, 500, 4, true, true, true, true, true, true);
      chartPanel0.getPopupLocation((MouseEvent) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) xYDifferenceRenderer0.ZERO, plotRenderingInfo0, (Point2D) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      // Undeclared exception!
      try { 
        xYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.NaN, 1.0F, 0.0, 1.0E-8);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(0.05, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      combinedDomainXYPlot0.setDomainAxis(62, (ValueAxis) numberAxis3D0, true);
      Layer layer0 = Layer.BACKGROUND;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(10);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis("^yV?,5Of~,G}3/q");
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot3.getRendererForDataset((XYDataset) null);
      combinedDomainXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      chartRenderingInfo1.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("suQAn`!Xr)2/", xYPlot0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.getLegendItemToolTipGenerator();
      xYDifferenceRenderer0.setLegendItemURLGenerator((XYSeriesLabelGenerator) null);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1181, 1957, 1, 7, 500, 4, true, true, true, true, true, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      rectangle2D_Double0.getBounds2D();
      ChartPanel chartPanel1 = new ChartPanel((JFreeChart) null, false, false, true, true, true);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo1.getPlotInfo();
      JFreeChart jFreeChart0 = new JFreeChart("suQAn`!Xr)2/", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1181, 1957, 1, 7, 500, 4, true, true, true, true, true, true);
      chartPanel0.getPopupLocation((MouseEvent) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) xYDifferenceRenderer0.ZERO, plotRenderingInfo0, (Point2D) null);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.getRendererForDataset((XYDataset) null);
      xYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0F, 1388.0, 10, 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0, true);
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      xYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
      xYPlot0.canSelectByPoint();
      combinedDomainXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      combinedRangeXYPlot0.getRenderer(2);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      combinedRangeXYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.setFixedRangeAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1908.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 10;
      color0.getColorComponents(floatArray0);
      color0.darker();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      LogAxis logAxis0 = new LogAxis();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, 10, 10, 10, 1868, 243, false, false, false, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      chartRenderingInfo0.clone();
      xYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null, true);
      xYPlot0.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYToolTipGenerator0);
      candlestickRenderer0.getSeriesStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 0.0, 10, 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 1.0F, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      combinedDomainXYPlot1.setDomainAxis(273, valueAxis0, true);
      combinedDomainXYPlot1.getDomainMarkers((Layer) null);
      combinedDomainXYPlot1.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
      combinedRangeXYPlot0.canSelectByPoint();
      JFreeChart jFreeChart0 = new JFreeChart("'2zFeC^", thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3045);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      combinedDomainXYPlot0.draw(graphics2D0, rectangle2D_Double0, (Point2D) null, plotState0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(10, valueAxis0.DEFAULT_TICK_LABEL_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, thermometerPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      valueAxis0.addChangeListener(thermometerPlot0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1.0F, 10, compositeTitle0, rectangleAnchor0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTitleAnnotation0);
      combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      double double0 = Double.NaN;
      defaultCaret0.getMagicCaretPosition();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.add(xYPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1874.41));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      GeneralPath generalPath0 = new GeneralPath();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      SystemColor systemColor0 = SystemColor.text;
      combinedDomainXYPlot0.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getBaseStroke();
      combinedRangeXYPlot0.setRangeCrosshairStroke(stroke0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) candlestickRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) candlestickRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getDomainCrosshairValue();
      combinedRangeXYPlot0.getRangeAxisForDataset(1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Graphics2D graphics2D0 = null;
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawBackground((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemStroke(10, 10, false);
      xYPlot0.setRangeZeroBaselineStroke(stroke0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "'+v");
      Stroke stroke1 = cyclicNumberAxis0.getAdvanceLineStroke();
      xYPlot0.setRangeMinorGridlineStroke(stroke1);
      xYPlot0.getLegendItems();
      xYPlot0.isDomainMinorGridlinesVisible();
      cyclicNumberAxis0.resizeRange((double) 1.0F, 1.7976931348623157E308);
      xYPlot0.setWeight(500);
      cyclicNumberAxis0.resizeRange2(10, 0.0);
      xYPlot0.setDomainCrosshairLockedOnData(true);
      xYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("'+v");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(minute0, 0.05);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(categoryAxis3D0, defaultKeyedValueDataset0);
      xYPlot0.datasetChanged(datasetChangeEvent0);
      ValueMarker valueMarker0 = new ValueMarker(1.7976931348623157E308, stackedAreaRenderer0.DEFAULT_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      valueMarker0.setLabelOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addRangeMarker((-2699), (Marker) valueMarker0, layer0);
      xYPlot0.getRangeAxisLocation();
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(0.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      combinedDomainXYPlot0.setDataset(2, (XYDataset) defaultTableXYDataset0);
      combinedDomainXYPlot1.clearAnnotations();
      combinedDomainXYPlot1.isRangePannable();
      combinedDomainXYPlot1.getDomainAxisIndex(numberAxis3D0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(303.878052998527);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(3227.4493043274, (-1426.0282445), "");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-2412), (ValueAxis) cyclicNumberAxis1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation(2);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.setRangeAxisLocation(63, axisLocation1, true);
      combinedDomainXYPlot2.getRangeAxisForDataset(0);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.resizeRange2(10, 1.0F);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      combinedDomainXYPlot0.getDomainCrosshairValue();
      MockDate mockDate0 = new MockDate();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot2.configureDomainAxes();
      combinedDomainXYPlot2.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot1.setQuadrantPaint(1, combinedDomainXYPlot2.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot1.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedDomainXYPlot1.getRangeAxisIndex(dateAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedDomainXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, point0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, 10, 10, 10, 1868, 243, false, false, false, false, false, true, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      thermometerPlot0.setForegroundAlpha(0.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      combinedDomainXYPlot0.setDomainAxis(2, valueAxis0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 3554);
      Layer layer2 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((int) (byte)0, (Marker) intervalMarker0, layer0, false);
      combinedDomainXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      combinedDomainXYPlot0.setDataset(0, (XYDataset) defaultTableXYDataset0);
      boolean boolean0 = new Boolean(false);
      combinedDomainXYPlot0.getDomainAxisIndex(numberAxis3D0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      combinedDomainXYPlot0.setRangeAxis(6, (ValueAxis) numberAxis3D0, false);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker1 = new CategoryMarker(false, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker1);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(numberAxis3D1.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getLegendItems();
      IntervalMarker intervalMarker0 = new IntervalMarker(497.9, 1.0E-8, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer2 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer2, false);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      combinedRangeXYPlot0.setDataset(500, (XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("I{HY>1u'F)QO");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.setRangeAxis(3038, (ValueAxis) dateAxis0);
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot0.setRangePannable(false);
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      GeneralPath generalPath0 = new GeneralPath();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, rectangle2D0, point2D_Float0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(1068);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(2341.7482833862305, plotRenderingInfo0, (Point2D) point2D_Float0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      combinedRangeXYPlot0.getRendererForDataset(simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.mapDatasetToDomainAxis(24, 500);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(828.61, Double.NaN, color0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(500, (Marker) intervalMarker0, layer0, false);
      Rectangle rectangle0 = new Rectangle();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle0, 0, layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.05, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation(2);
      AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot1.setRangeAxisLocation(10, axisLocation0, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers((-3563), layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker0.setLabel("?Qc/T9-WWF;PQz");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      categoryMarker0.setLabelFont(stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT);
      combinedRangeXYPlot0.clearRangeMarkers();
      JFreeChart jFreeChart0 = new JFreeChart("?Qc/T9-WWF;PQz", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 48, 2, 10, 500, 2404, false, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.getAnchor();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(4.0, plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getItemStroke(10, 10, false);
      SystemColor systemColor0 = SystemColor.text;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ">K%RDhe~ Z<6%");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1768.0, 1768.0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, (Layer) null, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setDataset((-1184), (XYDataset) defaultTableXYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 10);
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setNegativeArrowVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=InQM#|QrADKnr2";
      stringArray0[1] = "_}h";
      stringArray0[2] = "_}h";
      stringArray0[3] = "_}h";
      stringArray0[4] = "wYr>Q^|`Ujev";
      stringArray0[5] = "_}h";
      stringArray0[6] = "_}h";
      SymbolAxis symbolAxis0 = new SymbolAxis("_}h", stringArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1110.87489718818));
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, symbolAxis0, cyclicNumberAxis0, candlestickRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(categoryMarker0);
      xYPlot0.markerChanged(markerChangeEvent0);
      xYPlot0.getDomainAxis(500);
      GeneralPath generalPath0 = null;
      try {
        generalPath0 = new GeneralPath(300);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot0.getRangeAxisEdge();
      BlockContainer blockContainer0 = new BlockContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 0.0, 0.25, 0.0F, blockContainer0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      ArrayList<GradientPaint> arrayList0 = new ArrayList<GradientPaint>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(2, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.resizeRange2(10, 1.0F);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      combinedDomainXYPlot0.getDomainCrosshairValue();
      MockDate mockDate0 = new MockDate();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 10, 0.0F, 0.0F);
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createIntersection(rectangle2D0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation((-2361));
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      dateAxis0.dateToJava2D(mockDate0, rectangle2D1, rectangleEdge0);
      combinedDomainXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      combinedDomainXYPlot0.setDataset(10, (XYDataset) defaultTableXYDataset0);
      combinedDomainXYPlot1.clearAnnotations();
      combinedDomainXYPlot0.isRangePannable();
      combinedDomainXYPlot1.getDomainAxisIndex(numberAxis3D0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedDomainXYPlot1.setRangeAxis(2050, (ValueAxis) cyclicNumberAxis0, true);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      color0.darker();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(false);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-1476));
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRangeAxisLocation((-1476), axisLocation1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes((-776.3661246636), (PlotRenderingInfo) null, (Point2D) point0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jt48ERPY", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1127, 10, 10, 10, 1868, 243, false, false, false, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      xYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null, true);
      xYPlot0.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) deviationRenderer0);
      combinedRangeXYPlot0.getWeight();
      double double0 = (-1879.5579);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers((-3563), layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker0.setLabel("?Qc/T9-WWF;PQz");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Font font0 = stackedAreaRenderer0.getBaseItemLabelFont();
      categoryMarker0.setLabelFont(font0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1353.4739), "?Qc/T9-WWF;PQz");
      combinedRangeXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0F);
      combinedRangeXYPlot1.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedRangeXYPlot0.setWeight(500);
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      cyclicNumberAxis0.setAdvanceLinePaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      combinedDomainXYPlot0.equals(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      numberAxis3D0.setLabelPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.getDomainGridlinePaint();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      combinedDomainXYPlot2.setRenderer(19, (XYItemRenderer) xYStepRenderer0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D1);
      combinedRangeXYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D1;
      numberAxis3D0.setFixedDimension(2341.7482833862305);
      combinedDomainXYPlot2.setRangeAxes(valueAxisArray0);
      LogAxis logAxis0 = new LogAxis((String) null);
      logAxis0.setTickMarkStroke(combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
      logAxis0.setLowerBound(1922.2655);
      combinedDomainXYPlot2.mapDatasetToDomainAxis(500, 500);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot1.removeDomainMarker(10, (Marker) categoryMarker0, layer0, false);
      Rectangle rectangle0 = new Rectangle();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle0, 10, layer1);
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 10.0, numberAxis3D0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      LogAxis logAxis0 = new LogAxis();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[4] = (ValueAxis) numberAxis0;
      combinedDomainXYPlot1.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      JTextPane jTextPane0 = new JTextPane();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      JTextPane jTextPane0 = new JTextPane();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot1.setDomainPannable(true);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation(2);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      axisLocation1.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot1.setRangeAxisLocation(10, axisLocation0, false);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      DateAxis dateAxis0 = new DateAxis((String) null);
      combinedDomainXYPlot1.getDataRange(dateAxis0);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(numberAxis3D1.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getLegendItems();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, 500, "a$m+u->;*+1OQ7\"R");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis(500);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 10.0, 4.0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis3D0, areaRenderer0);
      categoryPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      numberAxis3D0.hasListener(combinedDomainXYPlot0);
      combinedDomainXYPlot0.getDomainMarkers(18, layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot1.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis(500);
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(193, hour0);
      TimeZone.getDefault();
      combinedRangeXYPlot0.clearRangeMarkers(1353);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.clone();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedRangeXYPlot0.setRangeAxisLocation(3087, axisLocation1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.isDomainGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis((-1600));
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(500, hour0);
      TimeZone.getDefault();
      combinedRangeXYPlot0.clearRangeMarkers(14);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot1.clone();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getDomainMarkers(349, layer1);
      combinedDomainXYPlot1.setDomainPannable(false);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisEdge();
      combinedDomainXYPlot0.getDomainGridlinePaint();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY(205, 205);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 205, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.configureDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getLegendItems();
      combinedDomainXYPlot1.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(false);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation(20);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot1.setRangeAxisLocation(510, axisLocation2, false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 500;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(5, 10, intArray0, 73, false, 2, 508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      JTextPane jTextPane0 = new JTextPane();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setQuadrantPaint(2, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      combinedDomainXYPlot0.getRangeAxisIndex(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabel((String) null);
      Layer layer0 = Layer.BACKGROUND;
      Locale locale0 = Locale.FRANCE;
      XYPlot xYPlot0 = new XYPlot();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 2503.6631402521, 180.0, 0.05);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      xYPlot0.setDomainGridlineStroke(stroke0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 4.0, 2341.7482833862305);
      xYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPointerAnnotation0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis3D0, areaRenderer0);
      categoryPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot1.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis numberAxis0 = new NumberAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(8, (ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getLegendItems();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(1431, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1431) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      // Undeclared exception!
      try { 
        AxisLocation.getOpposite((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' argument.
         //
         verifyException("org.jfree.chart.axis.AxisLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("I{HY>1u'F)QO");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I{HY>1u'F)QO";
      stringArray0[1] = "I{HY>1u'F)QO";
      SymbolAxis symbolAxis0 = new SymbolAxis("I{HY>1u'F)QO", stringArray0);
      valueAxisArray0[0] = (ValueAxis) symbolAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot1.getDomainAxisEdge(1303);
      combinedDomainXYPlot1.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.setBaseLegendShape(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.setRenderer(4, (XYItemRenderer) xYStepRenderer0, false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedDomainXYPlot0.getIndexOf(xYStepRenderer0);
      combinedDomainXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.isRangePannable();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)7;
      boolean boolean0 = true;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 500, byteArray0, (byte)7, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.clone();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 10);
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.FOREGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "w-]E<j3|?)Xc019\"p%");
      cyclicNumberAxis0.resizeRange((-267.40238567), (double) 10);
      combinedDomainXYPlot0.setWeight((-707));
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      combinedDomainXYPlot1.setDomainPannable(true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-707), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-707) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      BasicStroke basicStroke0 = new BasicStroke();
      xYPlot0.setRangeZeroBaselineStroke(basicStroke0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "'+v");
      cyclicNumberAxis0.getAdvanceLineStroke();
      xYPlot0.getLegendItems();
      xYPlot0.isRangeGridlinesVisible();
      int int0 = 3562;
      CategoryMarker categoryMarker0 = new CategoryMarker(false, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, basicStroke0);
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker(3562, (Marker) categoryMarker0, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.getRangeAxis(500);
      String string0 = "~m:0j.UpoRIaJt";
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(193, hour0);
      TimeZone.getDefault();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      GeneralPath generalPath0 = new GeneralPath();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      JTextField jTextField0 = new JTextField();
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jTextField0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-983), layer0);
      combinedDomainXYPlot0.setDomainPannable(true);
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8);
      cyclicNumberAxis0.resizeRange2((-268.43049), 10);
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      PeriodAxis periodAxis0 = new PeriodAxis("O6+ =sx/7)w/5UGg:");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue(500.0, true);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 10, 1.0F);
      Layer layer1 = Layer.BACKGROUND;
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      Frame frame0 = null;
      try {
        frame0 = new Frame("", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      Color.getColor(" H'3<[n4T/rY^g3/f", 1716);
      color1.getColorSpace();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.05, 500);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), "oc36");
      xYPlot0.setDomainAxis(3562, (ValueAxis) cyclicNumberAxis0);
      xYPlot0.getLegendItems();
      xYPlot0.isNotify();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setNotify(true);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.clearSelection();
      SystemColor systemColor0 = SystemColor.text;
      String string0 = "brocBB6vPt=";
      double double0 = (-2244.0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 0.0F;
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 1358;
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(1358, layer0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      IntervalMarker intervalMarker0 = new IntervalMarker(Double.NaN, 10.0);
      intervalMarker0.setLabelOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      combinedRangeXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot0.isDomainPannable();
      String string0 = "|n:)VId0(dlaRJB=";
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("|n:)VId0(dlaRJB=", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), 5.0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-25), 0, byteArray0, 970, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.NaN);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) histogramDataset0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setRangeGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, 1388.0, 10.0, 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      combinedDomainXYPlot1.setRangeCrosshairValue(2565.9065778, false);
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot1.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      int int0 = (-4083);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setDomainAxis((-4083), (ValueAxis) cyclicNumberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, attributeSet0);
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0, dateAxis0.DEFAULT_TICK_LABEL_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      categoryMarker0.setLabel("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 1.0F, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) logAxis0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(10, valueAxis0.DEFAULT_TICK_LABEL_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, thermometerPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      int[] intArray0 = new int[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 568, intArray0, 0, false, 0, 4410);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.configureDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getLegendItems();
      combinedDomainXYPlot1.isDomainCrosshairVisible();
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, true);
      chartPanel0.getAnchor();
      combinedRangeXYPlot0.zoomRangeAxes(25.5, plotRenderingInfo0, (Point2D) null);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeRangeMarker((Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      combinedRangeXYPlot0.isDomainZoomable();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, attributeSet0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(500);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYAreaRenderer2_0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.getLegendItems();
      xYPlot1.isRangeGridlinesVisible();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500, 1.0F, "8]^QW;5H<L@");
      cyclicNumberAxis0.resizeRange(1.0, 10.0);
      xYPlot0.setWeight(10);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeAxis((ValueAxis) dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setQuadrantPaint(3755, xYPlot1.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (3755) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 10.0);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(1280, (Marker) intervalMarker0, layer1, true);
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers((-3563), layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker0.setLabel("?Qc/T9-WWF;PQz");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1353.4739), "?Qc/T9-WWF;PQz");
      combinedRangeXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-3563), 0.05, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)41;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(10, byteArray0);
      HashMap<RenderingHints.Key, XYTextAnnotation> hashMap0 = new HashMap<RenderingHints.Key, XYTextAnnotation>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      int int0 = 3040;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(3040, 79, byteArray0, (byte)1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-1747), layer0);
      combinedDomainXYPlot0.setDomainPannable(true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(10, valueAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      IntervalMarker intervalMarker0 = new IntervalMarker((-427.5847), 4.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker(4, (Marker) intervalMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemStroke(10, 10, false);
      xYPlot0.setRangeZeroBaselineStroke(stroke0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "'+v");
      Stroke stroke1 = cyclicNumberAxis0.getAdvanceLineStroke();
      xYPlot0.setRangeMinorGridlineStroke(stroke1);
      xYPlot0.getLegendItems();
      xYPlot0.isDomainMinorGridlinesVisible();
      cyclicNumberAxis0.resizeRange((double) 1.0F, 1.7976931348623157E308);
      xYPlot0.setWeight(500);
      cyclicNumberAxis0.resizeRange2(10, 0.0);
      xYPlot0.setDomainCrosshairLockedOnData(true);
      xYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("'+v");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(minute0, 0.05);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(categoryAxis3D0, defaultKeyedValueDataset0);
      xYPlot0.datasetChanged(datasetChangeEvent0);
      ValueMarker valueMarker0 = new ValueMarker(1.7976931348623157E308, stackedAreaRenderer0.DEFAULT_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addRangeMarker((-2699), (Marker) valueMarker0, layer0);
      xYPlot0.getRangeAxisLocation();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 2341.7482833862305, (-3.0), 10);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(2524.918, 10, 2341.7482833862305, 0);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation1);
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, true);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainAxis(1, valueAxis0, false);
      combinedDomainXYPlot1.setDomainPannable(false);
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      combinedDomainXYPlot1.setQuadrantPaint(2, color0);
      combinedDomainXYPlot1.getWeight();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickLabelsVisible(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      combinedDomainXYPlot0.setRenderer(489, (XYItemRenderer) xYBubbleRenderer0, false);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) valueMarker0, layer1, true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis3D0);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      Layer layer2 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, combinedRangeXYPlot2.DEFAULT_GRIDLINE_PAINT, xYBubbleRenderer0.DEFAULT_STROKE);
      combinedRangeXYPlot2.removeRangeMarker((Marker) categoryMarker0, layer1);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      combinedRangeXYPlot2.setRangeMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot1.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      color0.darker();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      Stroke stroke0 = combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedRangeXYPlot1.DEFAULT_BACKGROUND_PAINT, stroke0);
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.removeDomainMarker((Marker) intervalMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      Stroke stroke1 = piePlot0.getBaseSectionOutlineStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(stroke1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainAxisEdge(4);
      xYPlot0.getRangeMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0);
      combinedDomainXYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setDomainTickBandPaint(xYBubbleRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedDomainXYPlot0.setQuadrantPaint(2, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), 5.0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("8k|@z|");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(true, 10);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("8k|@z|");
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(numberAxis3D1, defaultKeyedValueDataset0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      Color color1 = color0.darker();
      color1.getColorSpace();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(false, 10);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("");
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(categoryAxis3D1, defaultKeyedValueDataset0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYSeries xYSeries0 = new XYSeries(dateAxis0.DEFAULT_DATE_TICK_UNIT);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      combinedDomainXYPlot0.setDomainGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.indexOf(xYSeriesCollection0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 10, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be Integer instances.", xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.canSelectByRegion();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, cyclicNumberAxis0, stackedBarRenderer0);
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      AxisLocation.getOpposite(axisLocation0);
      defaultXYDataset0.hasListener(categoryPlot0);
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      stackedBarRenderer0.setAutoPopulateSeriesStroke(true);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      Layer layer2 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) categoryMarker1, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0, (-915.8810251255729), "S!u'r&2");
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis1;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      combinedDomainXYPlot1.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot1.mapDatasetToDomainAxis(970, 10);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.getOrientation();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker(2083, (Marker) valueMarker0, layer0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(2845, shortArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.5F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (-1935.3348F);
      floatArray0[4] = (float) 10;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.5F;
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) 10;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = (-406);
      int int1 = 1181;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1181, 10, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.18);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(false);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "I{HY>1u'F)QO", "Indices must be Integer instances.", "{0}: ({1}, {2})");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(6, standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      Stroke stroke0 = combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isRangeGridlinesVisible();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7976931348623157E308);
      cyclicNumberAxis0.resizeRange((double) 1.0F, (double) 1.0F);
      combinedDomainXYPlot0.setWeight((-1615));
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      combinedDomainXYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("}DGOvE@z8tBPwTP $f");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(mockDate0, 1.0F);
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, defaultKeyedValueDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), 5.0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      chartRenderingInfo0.getRenderingSource();
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-25), 0, byteArray0, 970, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0F, 1388.0, 10, 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F, false);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0, true);
      combinedDomainXYPlot0.setDomainPannable(true);
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(6, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (6) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateAxis dateAxis0 = new DateAxis("S!u'r&2");
      XYPlot xYPlot1 = new XYPlot(defaultXYDataset0, dateAxis0, dateAxis0, xYDifferenceRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("$PIH)@oXE$@T#keB", 1.0F, 10.0, (-1040.070514067228));
      xYPlot1.isRangeZoomable();
      Font font0 = xYPointerAnnotation0.getFont();
      xYPlot0.setNoDataMessageFont(font0);
      Layer layer1 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      cyclicNumberAxis1.setRangeWithMargins(dateAxis0.DEFAULT_RANGE, false, true);
      Frame frame0 = null;
      try {
        frame0 = new Frame("S!u'r&2", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      ValueMarker valueMarker0 = new ValueMarker((-3568.812), xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "'+v";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(898, axisLocation0, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      combinedDomainXYPlot0.setRenderer(4, (XYItemRenderer) xYBubbleRenderer0, true);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setRangeAxis(2, (ValueAxis) symbolAxis0);
      combinedRangeXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      double double0 = (-1491.50042596);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      String string0 = ")&Q1Y2-4nKsn7yz]iI%";
      PeriodAxis periodAxis0 = new PeriodAxis(")&Q1Y2-4nKsn7yz]iI%");
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("[U9#Ae&1r^", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 2389);
      bufferedImage0.createGraphics();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[6];
      String string1 = "Null 'period' argument.";
      try { 
        ICC_Profile.getInstance("Null 'period' argument.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file Null 'period' argument.
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.clone();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 10);
      Layer layer0 = Layer.FOREGROUND;
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer1, true);
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      combinedDomainXYPlot1.setDataset(10, (XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.mapDatasetToRangeAxes((-707), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), 2.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      PeriodAxis periodAxis0 = new PeriodAxis("O6+ =sx/7)w/5UGg:");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker("O6+ =sx/7)w/5UGg:");
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker1 = new IntervalMarker(10, 2.0F);
      combinedRangeXYPlot2.addRangeMarker((-2128), (Marker) intervalMarker1, layer0, true);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(180, 10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot2.addRangeMarker((-552), (Marker) intervalMarker1, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(dateAxis0);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      combinedRangeXYPlot3.setDomainCrosshairPaint(combinedRangeXYPlot2.DEFAULT_BACKGROUND_PAINT);
      Layer layer2 = Layer.FOREGROUND;
      combinedRangeXYPlot2.removeRangeMarker((Marker) intervalMarker1, layer1);
      combinedDomainXYPlot0.clearDomainMarkers(2849);
      combinedRangeXYPlot0.getRangeAxisEdge();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      CategoryAxis categoryAxis0 = new CategoryAxis("0&");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, cyclicNumberAxis0, stackedBarRenderer0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getRangeAxisLocation();
      XYPlot xYPlot1 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(3.0, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickLabelsVisible(false);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      combinedDomainXYPlot0.setRenderer(489, (XYItemRenderer) xYBubbleRenderer0, false);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setRangeAxis(462, valueAxis0);
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 10;
      intArray0[6] = 2;
      intArray0[7] = 10;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2, 10, intArray0, 2, false, 500, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers((-3563), layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      Graphics2D graphics2D0 = null;
      MultiTextUI multiTextUI0 = new MultiTextUI();
      JTextField jTextField0 = new JTextField(3);
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jTextField0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getBounds2D();
      combinedRangeXYPlot0.getRenderer(797);
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDomainPannable(false);
      combinedDomainXYPlot0.setQuadrantPaint(0, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedDomainXYPlot0.getDomainCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYBubbleRenderer0, true);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.setQuadrantPaint(2, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, cyclicNumberAxis0);
      samplingXYLineRenderer0.findRangeBounds(defaultXYDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainPannable(true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(10, samplingXYLineRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker1 = new CategoryMarker(true, logAxis0.DEFAULT_TICK_MARK_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker0.setLabel((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      IntervalMarker intervalMarker0 = new IntervalMarker(1756.412304, 10, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      intervalMarker0.setLabelPaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      CategoryMarker categoryMarker2 = new CategoryMarker(numberAxis3D0.DEFAULT_TICK_UNIT);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.addRangeMarker(10, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(500, 102);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      JFreeChart jFreeChart0 = new JFreeChart("8]^QW;5H<L@", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      combinedRangeXYPlot2.select((-2851.7873299), (double) 0.0F, (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer((-1251));
      combinedRangeXYPlot2.getIndexOf(standardXYItemRenderer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      styleContext0.getChangeListeners();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), 2.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      PeriodAxis periodAxis0 = new PeriodAxis("O6+ =sx/7)w/5UGg:");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker("O6+ =sx/7)w/5UGg:");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker1 = new IntervalMarker(10, 2.0F);
      combinedRangeXYPlot2.addRangeMarker((-2128), (Marker) intervalMarker1, layer0, true);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(180, 10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      JFreeChart jFreeChart0 = new JFreeChart("z", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      combinedRangeXYPlot2.select((-1312.4361508), (-1312.4361508), (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.getDataset();
      combinedRangeXYPlot2.getDomainAxisLocation(1024);
      int int0 = (-1711);
      int int1 = (-2975);
      int int2 = (-4399);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)29;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, (-2975), byteArray0, (-707), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (-2975) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      chartRenderingInfo1.getChartArea();
      chartRenderingInfo1.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setRect(Double.NaN, (double) 10, (-24.3), 5.0);
      defaultCaret0.getBounds2D();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getRenderer((-1356));
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot1.setDomainAxisLocation(797, axisLocation0, true);
      combinedRangeXYPlot0.clearRangeMarkers(1657);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      styleContext0.getChangeListeners();
      styleContext0.removeAttribute(attributeSet0, attributeSet0);
      combinedDomainXYPlot0.setRangeCrosshairValue(1.0E-8, true);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      jTextPane0.getCaretColor();
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2);
      Layer layer0 = Layer.BACKGROUND;
      TreeSet<TexturePaint> treeSet0 = new TreeSet<TexturePaint>();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.setRangeGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, true);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setRangeAxis(valueAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainPannable(false);
      combinedDomainXYPlot0.setQuadrantPaint(2, valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.getWeight();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8);
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.annotations.XYPolygonAnnotation", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      ColorModel.getRGBdefault();
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(10, 10, 500, 1693);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (a
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemStroke(10, 10, false);
      xYPlot0.setRangeZeroBaselineStroke(stroke0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "'+v");
      Stroke stroke1 = cyclicNumberAxis0.getAdvanceLineStroke();
      xYPlot0.setRangeMinorGridlineStroke(stroke1);
      xYPlot0.getLegendItems();
      xYPlot0.isRangeGridlinesVisible();
      cyclicNumberAxis0.resizeRange((double) 1.0F, 1.7976931348623157E308);
      xYPlot0.setWeight(500);
      xYPlot0.setDomainCrosshairLockedOnData(true);
      xYPlot0.getFixedLegendItems();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("'+v");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(minute0, 0.05);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(categoryAxis3D0, defaultKeyedValueDataset0);
      xYPlot0.datasetChanged(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      numberAxis3D0.setTickLabelsVisible(true);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10);
      arrayList0.add(cyclicXYItemRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(2, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.magenta;
      color0.darker();
      StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("Null 'location' for index 0 not permitted.");
      combinedDomainXYPlot0.setDomainAxis(4, (ValueAxis) dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 823.02753);
      Layer layer0 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1.0F, (-704.4301998541027));
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, false);
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      PeriodAxis periodAxis0 = new PeriodAxis(")&Q1Y2-4nKsn7yz]iI%");
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, xYDifferenceRenderer0.DEFAULT_PAINT, samplingXYLineRenderer0.DEFAULT_STROKE);
      combinedRangeXYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'marker' not permitted.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      Frame frame0 = null;
      try {
        frame0 = new Frame(")&Q1Y2-4nKsn7yz]iI%", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2);
      Layer layer0 = Layer.BACKGROUND;
      TreeSet<TexturePaint> treeSet0 = new TreeSet<TexturePaint>();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.setRangeGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, valueAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker1.setLabel("");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer2 = Layer.BACKGROUND;
      combinedDomainXYPlot0.setRangeAxis(2, (ValueAxis) logAxis0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      combinedDomainXYPlot0.getDomainCrosshairPaint();
      combinedRangeXYPlot1.getRangeTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GeneralPath generalPath0 = new GeneralPath();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateAxis dateAxis0 = new DateAxis("S!u'r&2");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, dateAxis0, xYDifferenceRenderer0);
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      Layer layer1 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      xYDifferenceRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      Frame frame0 = null;
      try {
        frame0 = new Frame((String) null, (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D rectangle2D0 = defaultCaret0.getBounds2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getRenderingSource();
      GeneralPath generalPath0 = new GeneralPath();
      combinedRangeXYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) null);
      combinedRangeXYPlot0.getRenderer(3944);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((-1843), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ArrayList<DefaultXYZDataset> arrayList0 = new ArrayList<DefaultXYZDataset>();
      Object[][][] objectArray0 = new Object[0][7][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      DateAxis dateAxis0 = new DateAxis("7Fd=fj;SMs");
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, dateAxis0, dateAxis0, xYSplineRenderer0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("7Fd=fj;SMs");
      xYPlot0.setDomainAxis((ValueAxis) numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabel((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10, 10, 1.0F);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Ix98Q~j1", "{0}: ({1}, {2})", "Ix98Q~j1");
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, true);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getBaseOutlinePaint();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05, stackedXYAreaRenderer2_0.DEFAULT_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue((-1761.358346555937));
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker1 = new CategoryMarker(true, logAxis0.DEFAULT_TICK_MARK_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      categoryMarker0.setLabel((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      IntervalMarker intervalMarker0 = new IntervalMarker(1756.412304, 10, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CategoryMarker categoryMarker2 = new CategoryMarker(numberAxis3D0.DEFAULT_TICK_UNIT);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.addRangeMarker(10, (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(500, 102);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      JFreeChart jFreeChart0 = new JFreeChart("8]^QW;5H<L@", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      combinedRangeXYPlot2.select((-2851.7873299), (double) 0.0F, (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals((-1491.50042596), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1491.50042596), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      defaultXYDataset0.removeSeries(false);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      PeriodAxis periodAxis0 = new PeriodAxis(")&Q1Y2-4nKsn7yz]iI%");
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0E-8);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis1);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDifferenceRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, cyclicNumberAxis1, xYDifferenceRenderer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNull(collection0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 1.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, xYDifferenceRenderer0.DEFAULT_STROKE, samplingXYLineRenderer0.DEFAULT_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0E-8, intervalMarker0.getStartValue(), 0.01);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0E-8, intervalMarker0.getStartValue(), 0.01);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame(")&Q1Y2-4nKsn7yz]iI%", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10, 10, 1.0F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertNotNull(standardXYToolTipGenerator0);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Ix98Q~j1", "{0}: ({1}, {2})", "Ix98Q~j1");
      assertNotNull(standardXYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, true);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(boolean1 == boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05, stackedXYAreaRenderer2_0.DEFAULT_PAINT);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedDomainXYPlot0.setDomainCrosshairValue((-1761.358346555937));
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals((-1761.358346555937), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot2);
      
      boolean boolean2 = combinedRangeXYPlot2.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean2);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals((-1761.358346555937), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      valueAxisArray0[4] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1761.358346555937), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(6, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(6, valueAxisArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis1);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDifferenceRenderer0);
      
      DateAxis dateAxis0 = new DateAxis("S!u'r&2");
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("S!u'r&2", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(dateAxis0);
      
      XYPlot xYPlot1 = new XYPlot(defaultXYDataset0, dateAxis0, dateAxis0, xYDifferenceRenderer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("S!u'r&2", dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot1);
      
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      Collection collection1 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(cyclicNumberAxis0.equals((Object)cyclicNumberAxis1));
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(cyclicNumberAxis0, cyclicNumberAxis1);
      assertNotSame(xYPlot0, xYPlot1);
      assertSame(layer0, layer1);
      assertNull(collection1);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame("S!u'r&2", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = new TreeSet<TexturePaint>();
      assertNotNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      combinedDomainXYPlot0.setRangeGridlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("");
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.25, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      combinedDomainXYPlot0.setRangeAxis(2, (ValueAxis) logAxis0);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(3, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(3, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeAxis(2192, (ValueAxis) numberAxis3D0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2193, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2193, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2193, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = Color.magenta;
      assertEquals(0, color0.getGreen());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "54");
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals("54", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals("54", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation2 = combinedRangeCategoryPlot0.getRangeAxisLocation(10);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals("54", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation2.toString());
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      
      AxisLocation axisLocation3 = AxisLocation.getOpposite(axisLocation2);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals("54", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation2.toString());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation3.toString());
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertFalse(axisLocation3.equals((Object)axisLocation0));
      assertFalse(axisLocation3.equals((Object)axisLocation2));
      assertFalse(axisLocation3.equals((Object)axisLocation1));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation3);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotSame(axisLocation3, axisLocation0);
      assertNotSame(axisLocation3, axisLocation2);
      assertNotSame(axisLocation3, axisLocation1);
      assertNotNull(axisLocation3);
      
      combinedRangeXYPlot0.setRangeAxisLocation(568, axisLocation1, false);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation0.equals((Object)axisLocation3));
      assertFalse(axisLocation0.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation3));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation0, axisLocation3);
      assertNotSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation3);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLeftArrow(combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals("54", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.05, Double.POSITIVE_INFINITY, 0.05, (-1848.1987912878));
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertNotNull(standardXYToolTipGenerator0);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("{0}: ({1}, {2})", "{0}: ({1}, {2})", "!gVNwuC3pQ#!xmVt,U");
      assertNotNull(standardXYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderer((-707), (XYItemRenderer) stackedXYAreaRenderer2_0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis("W[pu,ljb3{<", zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("W[pu,ljb3{<", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      JTextPane jTextPane0 = new JTextPane();
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertNotNull(jTextPane0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      assertNotNull(attributeSet0);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("W[pu,ljb3{<", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(501, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(458.9616884375129, 10);
      assertEquals(458.9616884375129, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1.0F, 500);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(500.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, false);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(500.0, xYTextAnnotation0.getY(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      
      int int0 = (-39);
      int[] intArray0 = new int[1];
      intArray0[0] = (-39);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1020), 10, intArray0, 10, true, 500, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, cyclicNumberAxis0, stackedBarRenderer0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      boolean boolean0 = defaultXYDataset0.hasListener(categoryPlot0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      
      stackedBarRenderer0.setAutoPopulateSeriesStroke(true);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertSame(layer2, layer0);
      assertSame(layer2, layer1);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker1);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) categoryMarker1, layer0, true);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(categoryMarker1, categoryMarker0);
      assertSame(layer0, layer1);
      assertSame(layer0, layer2);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.mapDatasetToDomainAxis(970, 10);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(numberAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYBubbleRenderer0, true);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setQuadrantPaint(0, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      JTextPane jTextPane0 = new JTextPane();
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertNotNull(jTextPane0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      assertNotNull(attributeSet0);
      
      ChangeListener[] changeListenerArray0 = styleContext0.getChangeListeners();
      assertEquals(2, changeListenerArray0.length);
      assertNotNull(changeListenerArray0);
      
      AttributeSet attributeSet1 = styleContext0.removeAttribute(attributeSet0, attributeSet0);
      assertNotNull(attributeSet1);
      
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(attributeSet1);
      assertTrue(styleContext_SmallAttributeSet0.equals((Object)attributeSet1));
      assertNotNull(styleContext_SmallAttributeSet0);
      
      jTextPane0.setCharacterAttributes(styleContext_SmallAttributeSet0, false);
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(attributeSet1.equals((Object)styleContext_SmallAttributeSet0));
      assertTrue(styleContext_SmallAttributeSet0.equals((Object)attributeSet1));
      assertNotSame(attributeSet1, styleContext_SmallAttributeSet0);
      assertNotSame(styleContext_SmallAttributeSet0, attributeSet1);
      
      Color color0 = jTextPane0.getCaretColor();
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getBlue());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Font font0 = Font.decode("XY_Plot");
      assertFalse(font0.isItalic());
      assertEquals("XY_Plot", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertNotNull(font0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Font font1 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isTransformed());
      assertEquals(0, font1.getStyle());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals("Default", font1.getName());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isBold());
      assertTrue(font1.isPlain());
      assertFalse(font1.equals((Object)font0));
      assertNotNull(font1);
      
      combinedRangeXYPlot0.setNoDataMessageFont(font1);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(font1.hasLayoutAttributes());
      assertFalse(font1.isTransformed());
      assertEquals(0, font1.getStyle());
      assertEquals(12, font1.getSize());
      assertEquals(12.0F, font1.getSize2D(), 0.01F);
      assertEquals("Default", font1.getName());
      assertFalse(font1.isItalic());
      assertFalse(font1.hasUniformLineMetrics());
      assertFalse(font1.isBold());
      assertTrue(font1.isPlain());
      assertFalse(font1.equals((Object)font0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(font1, font0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setRangeCrosshairValue((double) 10, true);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(10.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setRangeCrosshairVisible(true);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(10.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingSource renderingSource0 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource0);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      
      int int0 = 2;
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(2);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(43, axisLocation0, true);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(basicStroke0);
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(axisSpace0);
      
      short[] shortArray0 = new short[2];
      short short0 = (short)4;
      shortArray0[0] = (short)4;
      short short1 = (short)114;
      shortArray0[1] = (short)114;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      assertEquals(1, shortLookupTable0.getNumComponents());
      assertEquals(10, shortLookupTable0.getOffset());
      assertArrayEquals(new short[] {(short)4, (short)114}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortLookupTable0);
      
      JFreeChart jFreeChart0 = new JFreeChart("L]8t6)k7~6|\"CY.i\"", combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(renderingHints0);
      
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, shortLookupTable0.getNumComponents());
      assertEquals(10, shortLookupTable0.getOffset());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertArrayEquals(new short[] {(short)4, (short)114}, shortArray0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(2, shortArray0.length);
      assertNotNull(lookupOp0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3081.7F;
      floatArray0[1] = (float) (short)114;
      floatArray0[2] = (float) (short)4;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 6;
      floatArray0[6] = (float) (short)4;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(2, 6, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 7 and should be 12
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      JFreeChart jFreeChart0 = new JFreeChart("(-agB:", combinedRangeXYPlot1);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(chartPanel0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(680, 10.0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(680.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot1.addRangeMarker((Marker) intervalMarker0, layer0);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(intervalMarker0.getLabel());
      assertEquals(680.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(chartRenderingInfo0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      Layer layer2 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      combinedRangeXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer2, false);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(intervalMarker0.getLabel());
      assertEquals(680.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(layer2.equals((Object)layer1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes((-2948), arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(11, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 2, numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0E-8, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1.0F, 10);
      assertEquals(10.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals("", xYTextAnnotation0.getText());
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-1011), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer1);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(layer1, layer0);
      assertNull(collection0);
      
      Layer layer2 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer0));
      assertNotSame(layer2, layer0);
      assertSame(layer2, layer1);
      assertNotNull(layer2);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((-1996), (Marker) valueMarker0, layer0, true);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(layer0.equals((Object)layer1));
      assertFalse(layer0.equals((Object)layer2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertNotSame(layer0, layer1);
      assertNotSame(layer0, layer2);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setDomainAxis(594, (ValueAxis) numberAxis0);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(595, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1896, 1722, byteArray0, byteArray0, byteArray0, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setOutlineVisible(true);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      assertNotNull(attributeSet0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      ChangeListener[] changeListenerArray0 = styleContext0.getChangeListeners();
      assertEquals(2, changeListenerArray0.length);
      assertNotNull(changeListenerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AttributeSet attributeSet1 = styleContext0.removeAttribute(attributeSet0, object0);
      assertNotNull(attributeSet1);
      
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(attributeSet1);
      assertTrue(styleContext_SmallAttributeSet0.equals((Object)attributeSet1));
      assertNotNull(styleContext_SmallAttributeSet0);
      
      JTextPane jTextPane0 = new JTextPane();
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertNotNull(jTextPane0);
      
      jTextPane0.setCharacterAttributes(attributeSet0, false);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.getIgnoreRepaint());
      
      Color color0 = jTextPane0.getCaretColor();
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getGreen());
      assertEquals(51, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getBlue());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertNotNull(color0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      SystemColor systemColor0 = SystemColor.textHighlight;
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      int int0 = (-3440);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-3440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-3440) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(4383.541);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(4383.541, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(4383.541, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis1);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-826), cyclicNumberAxis1.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-826) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis0);
      
      NumberAxis3D numberAxis3D1 = new NumberAxis3D((String) null);
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertFalse(numberAxis3D1.isPositiveArrowVisible());
      assertTrue(numberAxis3D1.isAutoRange());
      assertNull(numberAxis3D1.getLabel());
      assertEquals(0.05, numberAxis3D1.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D1.getLowerBound(), 0.01);
      assertNull(numberAxis3D1.getLabelToolTip());
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D1.getMinorTickCount());
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D1.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D1.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D1.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D1.getLabelURL());
      assertFalse(numberAxis3D1.isVerticalTickLabels());
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D1.isInverted());
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D1.getUpperBound(), 0.01);
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D1.isVisible());
      assertEquals(0.0, numberAxis3D1.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D1.equals((Object)numberAxis3D0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D1);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.equals((Object)numberAxis3D1));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertFalse(numberAxis3D1.isPositiveArrowVisible());
      assertTrue(numberAxis3D1.isAutoRange());
      assertNull(numberAxis3D1.getLabel());
      assertEquals(0.05, numberAxis3D1.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D1.getLowerBound(), 0.01);
      assertNull(numberAxis3D1.getLabelToolTip());
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D1.getMinorTickCount());
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D1.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D1.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D1.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D1.getLabelURL());
      assertFalse(numberAxis3D1.isVerticalTickLabels());
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D1.isInverted());
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D1.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D1.isVisible());
      assertEquals(0.0, numberAxis3D1.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(numberAxis3D1.equals((Object)numberAxis3D0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertFalse(numberAxis3D1.isPositiveArrowVisible());
      assertTrue(numberAxis3D1.isAutoRange());
      assertNull(numberAxis3D1.getLabel());
      assertEquals(0.05, numberAxis3D1.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D1.getLowerBound(), 0.01);
      assertNull(numberAxis3D1.getLabelToolTip());
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D1.getMinorTickCount());
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D1.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D1.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D1.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D1.getLabelURL());
      assertFalse(numberAxis3D1.isVerticalTickLabels());
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D1.isInverted());
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D1.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D1.isVisible());
      assertEquals(0.0, numberAxis3D1.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(numberAxis3D1.equals((Object)numberAxis3D0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(numberAxis3D1, numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(numberAxis3D0.equals((Object)numberAxis3D1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setRenderer(500, (XYItemRenderer) xYBubbleRenderer0, true);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(501, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(numberAxis3D0.equals((Object)numberAxis3D1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot2);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot2.getLegendItems();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot1.isDomainCrosshairVisible();
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(501, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(numberAxis3D0.equals((Object)numberAxis3D1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot2));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot2.setRangeAxis(1, (ValueAxis) numberAxis3D1);
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertFalse(numberAxis3D1.isPositiveArrowVisible());
      assertTrue(numberAxis3D1.isAutoRange());
      assertNull(numberAxis3D1.getLabel());
      assertEquals(0.05, numberAxis3D1.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D1.getLowerBound(), 0.01);
      assertNull(numberAxis3D1.getLabelToolTip());
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D1.getMinorTickCount());
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D1.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D1.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D1.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D1.getLabelURL());
      assertFalse(numberAxis3D1.isVerticalTickLabels());
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D1.isInverted());
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D1.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D1.isVisible());
      assertEquals(0.0, numberAxis3D1.getFixedAutoRange(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(2, combinedDomainXYPlot2.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(numberAxis3D1.equals((Object)numberAxis3D0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(numberAxis3D1, numberAxis3D0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("");
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.25, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker2 = new CategoryMarker("");
      assertFalse(categoryMarker2.getDrawAsLine());
      assertNull(categoryMarker2.getLabel());
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertFalse(categoryMarker2.equals((Object)categoryMarker1));
      assertFalse(categoryMarker2.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker2);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot3);
      
      combinedRangeXYPlot3.addRangeMarker(3, (Marker) categoryMarker0, layer2, true);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker0, categoryMarker1);
      
      combinedDomainXYPlot0.mapDatasetToDomainAxis(1, 3);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-1491.50042596), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-1491.50042596), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(")&Q1Y2-4nKsn7yz]iI%");
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0E-8);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis1);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertNotNull(xYDifferenceRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, cyclicNumberAxis1, xYDifferenceRenderer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNull(collection0);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame(")&Q1Y2-4nKsn7yz]iI%", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("");
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.25, intervalMarker0.getEndValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker2 = new CategoryMarker("");
      assertNull(categoryMarker2.getLabel());
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertFalse(categoryMarker2.getDrawAsLine());
      assertFalse(categoryMarker2.equals((Object)categoryMarker0));
      assertFalse(categoryMarker2.equals((Object)categoryMarker1));
      assertNotNull(categoryMarker2);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot3);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot2.getDomainAxisLocation();
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot3));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotNull(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addDomainMarker(41, (Marker) categoryMarker0, layer0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Paint paint0 = combinedDomainXYPlot0.getDomainTickBandPaint();
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10, 10, 1.0F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertNotNull(standardXYToolTipGenerator0);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Ix98Q~j1", "{0}: ({1}, {2})", "Ix98Q~j1");
      assertNotNull(standardXYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, true);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(boolean1 == boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      
      Font font0 = Font.decode("item");
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals("item", font0.getName());
      assertEquals(12, font0.getSize());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertFalse(font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      combinedRangeXYPlot0.setNoDataMessageFont(numberAxis3D0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 10, true);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(10.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(10.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("");
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.25, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker2 = new CategoryMarker("");
      assertNull(categoryMarker2.getLabel());
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertFalse(categoryMarker2.getDrawAsLine());
      assertFalse(categoryMarker2.equals((Object)categoryMarker1));
      assertFalse(categoryMarker2.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker2);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot3);
      
      combinedRangeXYPlot3.addRangeMarker(3, (Marker) categoryMarker0, layer2, true);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker0, categoryMarker1);
      
      combinedRangeXYPlot3.setDomainCrosshairPaint(combinedRangeXYPlot1.DEFAULT_OUTLINE_PAINT);
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot3));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      
      boolean boolean1 = combinedRangeXYPlot3.removeRangeMarker((Marker) categoryMarker0, layer1);
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(layer1.equals((Object)layer2));
      assertFalse(layer1.equals((Object)layer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(layer1, layer2);
      assertNotSame(layer1, layer0);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker0, categoryMarker1);
      
      combinedDomainXYPlot0.clearDomainMarkers(161);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("");
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker1);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 1.25, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.25, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker2 = new CategoryMarker(false);
      assertNull(categoryMarker2.getLabel());
      assertFalse(categoryMarker2.getDrawAsLine());
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertFalse(categoryMarker2.equals((Object)categoryMarker1));
      assertFalse(categoryMarker2.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker2);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot3);
      
      combinedRangeXYPlot2.addRangeMarker(0, (Marker) categoryMarker1, layer1, false);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertNull(logAxis0.getLabel());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot3));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(layer1.equals((Object)layer2));
      assertFalse(layer1.equals((Object)layer0));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertFalse(categoryMarker1.equals((Object)categoryMarker2));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(layer1, layer2);
      assertNotSame(layer1, layer0);
      assertNotSame(categoryMarker1, categoryMarker0);
      assertNotSame(categoryMarker1, categoryMarker2);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot3.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot3));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      CombinedRangeXYPlot combinedRangeXYPlot4 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot4.isSubplot());
      assertFalse(combinedRangeXYPlot4.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot4.getDatasetCount());
      assertFalse(combinedRangeXYPlot4.isRangePannable());
      assertTrue(combinedRangeXYPlot4.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot4.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot4.isDomainPannable());
      assertTrue(combinedRangeXYPlot4.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot4.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot4.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot4.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot4.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot4.isNotify());
      assertTrue(combinedRangeXYPlot4.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot4.getWeight());
      assertEquals(5.0, combinedRangeXYPlot4.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot4.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot4.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot4.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot4.getRendererCount());
      assertEquals(15, combinedRangeXYPlot4.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot4.getNoDataMessage());
      assertFalse(combinedRangeXYPlot4.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot4.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot4.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot4.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot4.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot4.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot4.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot4.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot4.isDomainZoomable());
      assertTrue(combinedRangeXYPlot4.canSelectByRegion());
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot3));
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot2));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot4);
      
      Layer layer3 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer3.toString());
      assertFalse(layer3.equals((Object)layer2));
      assertFalse(layer3.equals((Object)layer0));
      assertSame(layer3, layer1);
      assertNotSame(layer3, layer2);
      assertNotSame(layer3, layer0);
      assertNotNull(layer3);
      
      boolean boolean1 = combinedRangeXYPlot4.removeRangeMarker((Marker) categoryMarker0, layer3);
      assertFalse(combinedRangeXYPlot4.isSubplot());
      assertFalse(combinedRangeXYPlot4.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot4.getDatasetCount());
      assertFalse(combinedRangeXYPlot4.isRangePannable());
      assertTrue(combinedRangeXYPlot4.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot4.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot4.isDomainPannable());
      assertTrue(combinedRangeXYPlot4.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot4.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot4.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot4.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot4.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot4.isNotify());
      assertTrue(combinedRangeXYPlot4.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot4.getWeight());
      assertEquals(5.0, combinedRangeXYPlot4.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot4.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot4.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot4.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot4.getRendererCount());
      assertEquals(15, combinedRangeXYPlot4.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot4.getNoDataMessage());
      assertFalse(combinedRangeXYPlot4.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot4.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot4.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot4.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot4.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot4.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot4.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot4.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot4.isDomainZoomable());
      assertTrue(combinedRangeXYPlot4.canSelectByRegion());
      assertEquals("Layer.FOREGROUND", layer3.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot3));
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot4.equals((Object)combinedRangeXYPlot2));
      assertFalse(layer3.equals((Object)layer2));
      assertFalse(layer3.equals((Object)layer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean1);
      assertNotSame(combinedRangeXYPlot4, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot4, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot4, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot4, combinedRangeXYPlot2);
      assertSame(layer3, layer1);
      assertNotSame(layer3, layer2);
      assertNotSame(layer3, layer0);
      assertNotSame(categoryMarker0, categoryMarker2);
      assertNotSame(categoryMarker0, categoryMarker1);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      JFreeChart jFreeChart0 = new JFreeChart("(-agB:", combinedRangeXYPlot1);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(chartPanel0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(680, 10.0);
      assertEquals(680.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot1.addRangeMarker((Marker) intervalMarker0, layer0);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(680.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(plotRenderingInfo0);
      
      Point2D point2D0 = chartPanel0.getAnchor();
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNull(point2D0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.findSubplot(plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(6, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 0, 0.0, 1);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(3, logAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryMarker1);
      
      categoryMarker0.setLabel("");
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertNotSame(categoryMarker0, categoryMarker1);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.addRangeMarker((Marker) categoryMarker0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, Double.NaN, logAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(Double.NaN, intervalMarker0.getEndValue(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker2 = new CategoryMarker(10);
      assertEquals(1.0F, categoryMarker2.getAlpha(), 0.01F);
      assertNull(categoryMarker2.getLabel());
      assertFalse(categoryMarker2.getDrawAsLine());
      assertFalse(categoryMarker2.equals((Object)categoryMarker1));
      assertFalse(categoryMarker2.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker2);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot3);
      
      combinedRangeXYPlot3.addRangeMarker((-2715), (Marker) categoryMarker0, layer2, false);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
      
      combinedRangeXYPlot3.setDomainCrosshairPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot3));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot3);
      
      boolean boolean1 = combinedRangeXYPlot3.removeRangeMarker((Marker) categoryMarker0, layer1);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(layer1.equals((Object)layer2));
      assertFalse(layer1.equals((Object)layer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(categoryMarker0.equals((Object)categoryMarker1));
      assertFalse(categoryMarker0.equals((Object)categoryMarker2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(layer1, layer2);
      assertNotSame(layer1, layer0);
      assertNotSame(categoryMarker0, categoryMarker1);
      assertNotSame(categoryMarker0, categoryMarker2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.5E-4, 1.0F, 3081.5962711706, (-562.68));
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(logAxis0);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryMarker1);
      
      categoryMarker1.setLabel("2Dt|J;4e");
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals("2Dt|J;4e", categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(categoryMarker1, categoryMarker0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedDomainXYPlot0.setRenderer(808, (XYItemRenderer) null, true);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(809, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(809, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(legendItemCollection0);
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(809, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-1326), (ValueAxis) numberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(numberAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 484, 1309.603535044317, 0.0, chartRenderingInfo0);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(484, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(484, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(484, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(484, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      double double0 = Double.NaN;
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      assertNotNull(symbolicXYItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-860), (List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker(18, (Marker) valueMarker0, layer1, true);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(layer1.equals((Object)layer0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(layer1, layer0);
      
      Layer layer2 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer0));
      assertNotSame(layer2, layer0);
      assertSame(layer2, layer1);
      assertNotNull(layer2);
      
      boolean boolean1 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      combinedDomainXYPlot1.setDomainAxis(33, (ValueAxis) numberAxis0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(34, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(523.367143062012, 1505.753328929);
      assertNull(intervalMarker0.getLabel());
      assertEquals(523.367143062012, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1505.753328929, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer3 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer3.toString());
      assertFalse(layer3.equals((Object)layer2));
      assertFalse(layer3.equals((Object)layer1));
      assertSame(layer3, layer0);
      assertNotSame(layer3, layer2);
      assertNotSame(layer3, layer1);
      assertNotNull(layer3);
      
      combinedDomainXYPlot0.addDomainMarker(386, (Marker) valueMarker0, layer2, false);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(layer2.equals((Object)layer3));
      assertFalse(layer2.equals((Object)layer0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(layer2, layer3);
      assertNotSame(layer2, layer0);
      assertSame(layer2, layer1);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertNotNull(defaultPolarItemRenderer0);
      
      Paint paint0 = defaultPolarItemRenderer0.getSeriesItemLabelPaint(1);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertNull(paint0);
      
      combinedDomainXYPlot1.setRangeCrosshairPaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(34, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.addDomainMarker(10, (Marker) valueMarker0, layer1, false);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(layer1.equals((Object)layer2));
      assertFalse(layer1.equals((Object)layer0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(layer1, layer2);
      assertNotSame(layer1, layer0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(11, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, 458.9616884375129);
      assertEquals(458.9616884375129, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(4.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 1.0F, 10);
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals(10.0, xYTextAnnotation0.getY(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(xYTextAnnotation0);
      
      xYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0, true);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertNull(xYTextAnnotation0.getURL());
      assertEquals("", xYTextAnnotation0.getText());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals(10.0, xYTextAnnotation0.getY(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, XYTextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingSource renderingSource0 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource0);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(2);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(43, axisLocation0, false);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(numberAxis3D0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingSource renderingSource0 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertNotNull(defaultCaret0);
      
      Rectangle rectangle0 = (Rectangle)defaultCaret0.getBounds2D();
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      RenderingSource renderingSource1 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource1);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) null);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(797);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertSame(layer1, layer0);
      assertNotNull(layer1);
      
      Layer layer2 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(layer2.equals((Object)layer0));
      assertNotSame(layer2, layer1);
      assertNotSame(layer2, layer0);
      assertNotNull(layer2);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      Layer layer3 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer3.toString());
      assertFalse(layer3.equals((Object)layer2));
      assertSame(layer3, layer1);
      assertNotSame(layer3, layer2);
      assertSame(layer3, layer0);
      assertNotNull(layer3);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "8]^QW;5H<L@";
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis("8]^QW;5H<L@", zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      JTextPane jTextPane0 = new JTextPane();
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertNotNull(jTextPane0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      assertNotNull(attributeSet0);
      
      ChangeListener[] changeListenerArray0 = styleContext0.getChangeListeners();
      assertEquals(2, changeListenerArray0.length);
      assertNotNull(changeListenerArray0);
      
      AttributeSet attributeSet1 = styleContext0.removeAttribute(attributeSet0, attributeSet0);
      assertNotNull(attributeSet1);
      
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(attributeSet1);
      assertTrue(styleContext_SmallAttributeSet0.equals((Object)attributeSet1));
      assertNotNull(styleContext_SmallAttributeSet0);
      
      jTextPane0.setCharacterAttributes(styleContext_SmallAttributeSet0, false);
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertTrue(attributeSet1.equals((Object)styleContext_SmallAttributeSet0));
      assertTrue(styleContext_SmallAttributeSet0.equals((Object)attributeSet1));
      assertNotSame(attributeSet1, styleContext_SmallAttributeSet0);
      assertNotSame(styleContext_SmallAttributeSet0, attributeSet1);
      
      Color color0 = jTextPane0.getCaretColor();
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(color0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals("8]^QW;5H<L@", dateAxis0.getLabel());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(jTextPane0.isFocusTraversalPolicyProvider());
      assertFalse(jTextPane0.getIgnoreRepaint());
      assertTrue(jTextPane0.getFocusTraversalKeysEnabled());
      assertTrue(jTextPane0.isFocusCycleRoot());
      assertTrue(jTextPane0.isFocusTraversalPolicySet());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getBlue());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (500) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10, 10, 1.0F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertNotNull(standardXYToolTipGenerator0);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("Ix98Q~j1", "{0}: ({1}, {2})", "Ix98Q~j1");
      assertNotNull(standardXYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, true);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(boolean1 == boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05, stackedXYAreaRenderer2_0.DEFAULT_PAINT);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      assertEquals(0.05, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      
      boolean boolean2 = combinedRangeXYPlot2.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean2);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(11, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1491.50042596));
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1491.50042596), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals((-1491.50042596), cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(")&Q1Y2-4nKsn7yz]iI%");
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(periodAxis0);
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0E-8);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(cyclicNumberAxis1);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDifferenceRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, periodAxis0, cyclicNumberAxis1, xYDifferenceRenderer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(")&Q1Y2-4nKsn7yz]iI%", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(0.99999999, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(1.0000000050247593E-8, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNull(collection0);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame(")&Q1Y2-4nKsn7yz]iI%", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingSource renderingSource0 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer((-2911));
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'marker' argument.", combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(10, 0.0F, renderingHints0);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(rescaleOp0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(100.0, 0.5F);
      assertEquals(0.5, point2D_Double0.y, 0.01);
      assertEquals(100.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(11, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, 458.9616884375129);
      assertEquals(458.9616884375129, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(4.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      combinedDomainXYPlot0.addDomainMarker(1802, (Marker) valueMarker0, layer2, true);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(11, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      
      ArrayList<CyclicXYItemRenderer> arrayList0 = new ArrayList<CyclicXYItemRenderer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(2, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(1, (ValueAxis) numberAxis0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      combinedDomainXYPlot0.addDomainMarker((-4065), (Marker) intervalMarker0, layer2, false);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(samplingXYLineRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, (ValueAxis) null, samplingXYLineRenderer0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedDomainXYPlot0.setRenderer(1896, (XYItemRenderer) samplingXYLineRenderer0, false);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1897, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1897, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(legendItemCollection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean0 = combinedDomainXYPlot1.isDomainCrosshairVisible();
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-126), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker(18, (Marker) valueMarker0, layer1, true);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(layer1.equals((Object)layer0));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(layer1, layer0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(3554, 1032, byteArray0, byteArray0, byteArray0, (-4152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2886.10161077466, 3, 1, 0.0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(logAxis0);
      
      categoryMarker0.setLabel("");
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Color color0 = (Color)combinedRangeXYPlot1.getDomainZeroBaselinePaint();
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 4.0, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(4.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0E-8, intervalMarker0.getStartValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(2);
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker1);
      
      combinedRangeXYPlot1.addRangeMarker(2, (Marker) categoryMarker1, layer1, false);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertFalse(layer1.equals((Object)layer0));
      assertFalse(layer1.equals((Object)layer2));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(categoryMarker1, categoryMarker0);
      assertNotSame(layer1, layer0);
      assertNotSame(layer1, layer2);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      boolean boolean1 = combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer2);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(layer2.equals((Object)layer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean1);
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2886.10161077466, 3, 1, 0.0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      categoryMarker0.setLabel("");
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Color color0 = (Color)combinedRangeXYPlot1.getDomainZeroBaselinePaint();
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 4.0, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0E-8, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(4.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertNotSame(layer2, layer1);
      assertSame(layer2, layer0);
      assertNotNull(layer2);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      
      CategoryMarker categoryMarker1 = new CategoryMarker(2);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker1);
      
      combinedRangeXYPlot1.addRangeMarker(2, (Marker) categoryMarker1, layer1, false);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertNull(categoryMarker1.getLabel());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertFalse(layer1.equals((Object)layer2));
      assertFalse(layer1.equals((Object)layer0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(categoryMarker1, categoryMarker0);
      assertNotSame(layer1, layer2);
      assertNotSame(layer1, layer0);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      
      List list0 = combinedRangeXYPlot0.getAnnotations();
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis3D0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("ToFBH`YVC:m~8Lr.");
      assertEquals(0.05, numberAxis3D1.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertFalse(numberAxis3D1.isPositiveArrowVisible());
      assertTrue(numberAxis3D1.isAutoRange());
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0, numberAxis3D1.getMinorTickCount());
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D1.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D1.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D1.isAutoTickUnitSelection());
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals("ToFBH`YVC:m~8Lr.", numberAxis3D1.getLabel());
      assertNull(numberAxis3D1.getLabelURL());
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D1.isVerticalTickLabels());
      assertTrue(numberAxis3D1.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D1.getFixedAutoRange(), 0.01);
      assertEquals(1.0, numberAxis3D1.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D1.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertFalse(numberAxis3D1.isInverted());
      assertNull(numberAxis3D1.getLabelToolTip());
      assertTrue(numberAxis3D1.isVisible());
      assertFalse(numberAxis3D1.equals((Object)numberAxis3D0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D1);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      
      XYBubbleRenderer xYBubbleRenderer1 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer1.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBubbleRenderer1.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer1.getScaleType());
      assertTrue(xYBubbleRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer1.getBaseSeriesVisible());
      assertEquals(2.0, xYBubbleRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBubbleRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYBubbleRenderer1.getPassCount());
      assertFalse(xYBubbleRenderer1.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer1.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer1.equals((Object)xYBubbleRenderer0));
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertNotNull(xYBubbleRenderer1);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setRenderer(1, (XYItemRenderer) xYBubbleRenderer0, false);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertTrue(xYBubbleRenderer0.equals((Object)xYBubbleRenderer1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(xYBubbleRenderer0, xYBubbleRenderer1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot1.getLegendItems();
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot1.isDomainCrosshairVisible();
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      
      combinedDomainXYPlot1.setRangeAxis(10, (ValueAxis) numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(11, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertFalse(numberAxis3D0.equals((Object)numberAxis3D1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(numberAxis3D0, numberAxis3D1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(2);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainAxis(2, (ValueAxis) numberAxis0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(3, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 3554);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(3554.0, intervalMarker0.getEndValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer2 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer2.toString());
      assertFalse(layer2.equals((Object)layer1));
      assertSame(layer2, layer0);
      assertNotSame(layer2, layer1);
      assertNotNull(layer2);
      
      combinedDomainXYPlot0.addDomainMarker((int) (byte)0, (Marker) intervalMarker0, layer0, false);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(3, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(3554.0, intervalMarker0.getEndValue(), 0.01);
      assertFalse(layer0.equals((Object)layer1));
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer0, layer2);
      assertNotSame(layer0, layer1);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(defaultPolarItemRenderer0);
      
      Paint paint0 = defaultPolarItemRenderer0.getSeriesItemLabelPaint(3);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertNull(paint0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("S!u'r&2");
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, cyclicNumberAxis0, stackedBarRenderer0);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("S!u'r&2", categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame("S!u'r&2", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(1, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertFalse(layer1.equals((Object)layer0));
      assertNotSame(layer1, layer0);
      assertNotNull(layer1);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0, true);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      combinedDomainXYPlot0.setRenderer(489, (XYItemRenderer) xYBubbleRenderer0, false);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(490, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(490, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(490, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeAxis(462, (ValueAxis) numberAxis0);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(463, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(490, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-876), xYPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-876) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis3D0);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      xYBubbleRenderer0.setDefaultEntityRadius((-573));
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-573), xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      
      combinedDomainXYPlot0.setRenderer(1860, (XYItemRenderer) xYBubbleRenderer0, true);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-573), xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertNotNull(stackedAreaRenderer0);
      
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(500, (-3150.4247), color0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals((-3150.4247), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.addRangeMarker(1, (Marker) intervalMarker0, layer0, true);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals((-3150.4247), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean1 = combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals((-3150.4247), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(samplingXYLineRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, cyclicNumberAxis0, (ValueAxis) null, samplingXYLineRenderer0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      xYPlot0.setDataset((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame("S!u'r&2", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYBubbleRenderer0, true);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeAxis(2192, (ValueAxis) numberAxis3D0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2193, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2193, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10, 10, 1.0F);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      categoryMarker0.setLabel("");
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis3D0);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(501, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      numberAxis3D0.setTickLabelsVisible(true);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderer((-1625), (XYItemRenderer) xYBubbleRenderer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(samplingXYLineRenderer0);
      
      XYDataset xYDataset0 = null;
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(samplingXYLineRenderer0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYPlot xYPlot0 = new XYPlot(defaultXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, samplingXYLineRenderer0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertFalse(samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertTrue(samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertTrue(samplingXYLineRenderer0.getBaseCreateEntities());
      assertFalse(samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      
      Frame frame0 = null;
      try {
        frame0 = new Frame("S!u'r&2", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((-1), (ValueAxis) numberAxis3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      combinedDomainXYPlot0.setDomainPannable(true);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(10, numberAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2530), "", (-1035), 0, (-2530), (-1035), 0, 0, 0, 0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(dateAxis0);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedXYBarRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, dateAxis0, dateAxis0, stackedXYBarRenderer0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      
      Color color0 = (Color)xYPlot0.getRangeCrosshairPaint();
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 981.3797);
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(981.3797, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker(1, (Marker) intervalMarker0, layer0, true);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(981.3797, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = Color.magenta;
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      Color color1 = color0.darker();
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-5111630), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(178, color1.getBlue());
      assertEquals(178, color1.getRed());
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(0, color1.getGreen());
      assertEquals((-5111630), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(178, color1.getBlue());
      assertEquals(178, color1.getRed());
      assertFalse(color0.equals((Object)color1));
      assertFalse(color1.equals((Object)color0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis0);
      
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYBubbleRenderer0, true);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(501, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(11, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(numberAxis3D0);
      
      String string0 = null;
      numberAxis3D0.setLabel((String) null);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      double double0 = 2.5E-5;
      Rectangle rectangle0 = new Rectangle((-1), 0, 0, 500);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(500.0, rectangle0.getMaxY(), 0.01);
      assertEquals(500.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(250.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-1.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(500, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals((-1), rectangle0.x);
      assertNotNull(rectangle0);
      
      RectangleEdge rectangleEdge0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Font font0 = TextAnnotation.DEFAULT_FONT;
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedRangeXYPlot0, true);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isInverted());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(font0.isTransformed());
      assertTrue(font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isItalic());
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isBold());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(plotRenderingInfo0);
      
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane(1866);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2530), "", (-1035), 0, (-2530), (-1035), 0, 0, 0, 0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(dateAxis0);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertNotNull(stackedXYBarRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, dateAxis0, dateAxis0, stackedXYBarRenderer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      
      xYPlot0.setRangeZeroBaselineVisible(true);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2530,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2530,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2530), simpleTimeZone0.getRawOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals("", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "";
      int int0 = (-1035);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2517), "", (-1035), 0, (-2517), (-1035), 0, 0, 0, 0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2517,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2517,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-2517), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2517,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1035,startDay=0,startDayOfWeek=-2517,startTime=-1035,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-2517), simpleTimeZone0.getRawOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-2402), axisLocation1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis3D0);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertNotNull(xYBubbleRenderer0);
      
      combinedDomainXYPlot0.setRenderer(1860, (XYItemRenderer) xYBubbleRenderer0, true);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertNotNull(stackedAreaRenderer0);
      
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(500, (-3150.4247), color0);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-3150.4247), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.addRangeMarker(1, (Marker) intervalMarker0, layer0, true);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(500.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-3150.4247), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingSource renderingSource0 = chartRenderingInfo0.getRenderingSource();
      assertNull(renderingSource0);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(2);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(43, axisLocation0, true);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setLabel((String) null);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      
      Marker marker0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = Color.magenta;
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertNotNull(color0);
      
      Color color1 = color0.darker();
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(178, color1.getBlue());
      assertEquals(178, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals((-5111630), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color1);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65281), color0.getRGB());
      assertEquals(178, color1.getBlue());
      assertEquals(178, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals((-5111630), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertFalse(color0.equals((Object)color1));
      assertFalse(color1.equals((Object)color0));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(color0, color1);
      assertNotSame(color1, color0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis0);
      
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals("", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(8, stringArray0.length);
      assertNotNull(symbolAxis0);
      
      valueAxisArray0[1] = (ValueAxis) symbolAxis0;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      DateAxis dateAxis0 = new DateAxis("I>wMzewKRs", simpleTimeZone0);
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals("I>wMzewKRs", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      Minute minute0 = Minute.parseMinute("");
      assertNull(minute0);
      
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("org.jfree.chart.block.BorderArrangement", (RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) numberAxis3D0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertNotNull(xYBubbleRenderer0);
      
      combinedDomainXYPlot0.setRenderer(1860, (XYItemRenderer) xYBubbleRenderer0, true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis3D0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1861, combinedDomainXYPlot0.getRendererCount());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      int int0 = 18;
      ValueMarker valueMarker0 = new ValueMarker(2);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(18, (Marker) valueMarker0, layer1, true);
      combinedDomainXYPlot0.setDomainAxis(2, valueAxis0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(3554, 1032, byteArray0, byteArray0, byteArray0, (-4152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint(500, logAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (500) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      combinedRangeXYPlot0.indexOf(timeTableXYDataset0);
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainGridlineStroke();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer0;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepAreaRenderer0;
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = null;
      try {
        standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("ZRlue)1ixMGxF", (NumberFormat) null, (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xFormat' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-1395.3190699));
      xYBarDataset0.hasListener(defaultTableXYDataset0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1395.3190699), (-1395.3190699), "Null 'id' argument.");
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(xYBarDataset0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      double double0 = 10.0;
      xYPlot0.setRangeCrosshairValue(10.0);
      xYPlot0.getRangeAxisEdge();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(882);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("/*Hq^a");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.getPlotType();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      int int0 = (-2057);
      double double0 = 0.0;
      double double1 = (-730.6);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 215, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (215) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer(2);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }
}
