* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.joda.time.field.UnsupportedDurationField
* Starting Client-0
* Connecting to master process on port 3266
* Analyzing classpath: 
  - subjects/buggy-versions/Time-1/target/classes
  - defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.field.UnsupportedDurationField
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 252
* Using seed 3583030677
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 137 / 252
[MASTER] 03:10:29.752 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 03:14:43.668 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
[MASTER] 03:17:18.694 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.getValueAsLong(J)J: Line 119: 314,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I28 Branch 7 IFNONNULL L246 - false: 452779,416194,81762| Number of FF evals: 408493
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.getType()Lorg/joda/time/DurationFieldType;: root-Branch: 39,0,0| Number of FF evals: 6326
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.readResolve()Ljava/lang/Object;: Line 275: 828096,755280,0| Number of FF evals: 408667
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I23 Branch 6 IFNONNULL L245 - false: 452983,417200,81994| Number of FF evals: 408671
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.isPrecise()Z: Line 101: 119,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.isPrecise()Z: root-Branch: 119,0,0| Number of FF evals: 12441
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I28 Branch 7 IFNONNULL L246 - true: 452779,416194,81988| Number of FF evals: 408493
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.getValueAsLong(J)J: root-Branch: 314,0,0| Number of FF evals: 9127
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I23 Branch 6 IFNONNULL L245 - true: 204,0,0| Number of FF evals: 75456
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.getType()Lorg/joda/time/DurationFieldType;: Line 79: 39,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPNE L241 - false: 317,0,0| Number of FF evals: 67758
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.readResolve()Ljava/lang/Object;: root-Branch: 828096,755280,0| Number of FF evals: 408667
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.compareTo(Lorg/joda/time/DurationField;)I: I4 Branch 3 IFEQ L227 - false: 22,0,0| Number of FF evals: 2928
Number of times BBC is called, activated, and useful for org.joda.time.field.UnsupportedDurationField.equals(Ljava/lang/Object;)Z: I13 Branch 5 IFEQ L243 - false: 204,0,0| Number of FF evals: 76039
* Search finished after 601s and 8560 generations, 2584438 statements, best individual has fitness: 109.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 43
* Number of covered goals: 41
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 35
* Number of covered goals: 31
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 31
* Number of covered goals: 28
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 64
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 45%
* Total number of goals: 22
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 35
* Number of covered goals: 31
* Generated 48 tests with total length 218
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
[MASTER] 03:19:24.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:19:31.323 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:31.324 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.add(0L, 1);

[MASTER] 03:19:31.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:31.554 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.add((long) Integer.MIN_VALUE, 1L);

[MASTER] 03:19:32.027 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.chrono.LimitChronology$LimitDurationField cannot be cast to org.joda.time.field.UnsupportedDurationField
[MASTER] 03:19:32.027 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DurationFieldType durationFieldType0 = DurationFieldType.eras();
UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
UnsupportedDurationField unsupportedDurationField1 = (UnsupportedDurationField)offsetDateTimeField0.getRangeDurationField();
unsupportedDurationField1.compareTo((DurationField) unsupportedDurationField0);

[MASTER] 03:19:32.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:32.477 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getDifference(1L, (-3010L));

[MASTER] 03:19:32.713 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:32.713 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getDifferenceAsLong((-154), (-836L));

[MASTER] 03:19:32.939 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:32.939 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getMillis(3076);

[MASTER] 03:19:33.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:33.182 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getMillis(3049, (-150L));

[MASTER] 03:19:33.408 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:33.408 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getMillis(731L);

[MASTER] 03:19:33.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:33.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getMillis(0L, (long) 0);

[MASTER] 03:19:33.900 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:33.900 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getName();

[MASTER] 03:19:34.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:34.133 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getUnitMillis();

[MASTER] 03:19:34.371 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:34.371 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getValue(0L);

[MASTER] 03:19:34.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:34.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getValue((long) 1, 338L);

[MASTER] 03:19:34.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:34.823 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getValueAsLong(0L);

[MASTER] 03:19:35.042 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:35.042 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.getValueAsLong(0L, (long) 0);

[MASTER] 03:19:35.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:35.542 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.isPrecise();

[MASTER] 03:19:35.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:35.787 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-154), (-154), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.isSupported();

[MASTER] 03:19:36.024 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:19:36.024 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-158), (-158), 0);
DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
durationField0.toString();

* Writing tests to file
* Writing JUnit test case 'UnsupportedDurationField_ESTest' to results/Time-1/org.joda.time.field.UnsupportedDurationField/BBC-F0-100/tests/10
* Done!

* Computation finished
