/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 01:27:51 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Partial_ESTest extends Partial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      partial0.without(dateTimeFieldType0);
      DateTimeUtils.setCurrentMillisFixed((-891L));
      // Undeclared exception!
      try { 
        partial0.toString("'");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Values array must not be null");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      dateTimeFieldType0.isSupported(islamicChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType.era();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      dateTimeFieldType1.getField(ethiopicChronology0);
      yearMonth0.isSupported(dateTimeFieldType2);
      DurationFieldType durationFieldType0 = dateTimeFieldType2.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 3);
      Partial partial2 = partial1.without(dateTimeFieldType1);
      partial2.withFieldAdded(durationFieldType0, 115);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-667));
      DateTime dateTime0 = localDateTime1.toDateTime();
      partial2.isMatch((ReadableInstant) dateTime0);
      // Undeclared exception!
      partial0.withFieldAddWrapped(durationFieldType0, 292278993);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Weeks weeks0 = Weeks.ZERO;
      Partial partial1 = partial0.withPeriodAdded(weeks0, 7);
      Partial partial2 = partial0.with(dateTimeFieldType0, (-1099));
      partial2.getValue(0);
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      YearMonth.now();
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial((Chronology) null, (DateTimeFieldType[]) null, intArray0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        partial0.toString("94Y", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[0];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      Locale locale0 = new Locale("The partial must not be null", "The partial must not be null");
      // Undeclared exception!
      try { 
        partial0.toString("'", locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-149L));
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      Partial partial1 = partial0.without(dateTimeFieldType1);
      partial1.with(dateTimeFieldType0, 2);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) partial0, (-149L));
      partial0.toString((String) null);
      Partial partial2 = new Partial();
      partial1.isMatch((ReadablePartial) partial0);
      partial2.toString();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[12];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType2;
      Partial partial3 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial3.toString((String) null, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Partial partial1 = new Partial(partial0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.getOffset((long) 1);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      partial1.getField(0, chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      partial1.property(dateTimeFieldType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      durationFieldType0.isSupported(chronology0);
      // Undeclared exception!
      try { 
        partial1.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 0, 0, 0, 1);
      Instant instant0 = dateTime0.toInstant();
      DateTime dateTime1 = instant0.toDateTime((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadableInstant) dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType.yearOfEra();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      Partial partial0 = null;
      try {
        partial0 = new Partial(yearMonth1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.toStringList();
      Locale locale0 = Locale.GERMAN;
      partial0.toString("z", locale0);
      // Undeclared exception!
      try { 
        Instant.parse("Partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType3, decoratedDurationField0);
      DateTimeFieldType dateTimeFieldType5 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType8, 3276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfYear < weekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-990L), (Chronology) iSOChronology0);
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) iSOChronology0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(iSOChronology0, mutableDateTime0, mutableDateTime1);
      mutableDateTime0.weekyear();
      LimitChronology.getInstance(iSOChronology0, mutableDateTime0, mutableDateTime1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MutableDateTime.now((Chronology) iSOChronology0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) limitChronology0);
      Partial partial0 = null;
      try {
        partial0 = new Partial(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2014-02-14T20:21:21.320Z (ISOChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 1298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = 639;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.toString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      dateTimeFieldType4.getDurationType();
      // Undeclared exception!
      try { 
        partial0.getValues();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 819;
      intArray0[1] = 1583;
      intArray0[2] = 91;
      intArray0[3] = (-2638);
      intArray0[4] = 2797;
      intArray0[5] = (-1064);
      intArray0[6] = 2227;
      intArray0[7] = 3338;
      intArray0[8] = 1;
      Partial partial0 = new Partial((Chronology) null, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getFormatter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "000";
      uTCProvider0.getZone("000");
      Chronology chronology0 = buddhistChronology0.withZone((DateTimeZone) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getField(1, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Partial partial0 = new Partial(copticChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped((DurationFieldType) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Partial partial0 = new Partial(julianChronology0, (DateTimeFieldType[]) null, (int[]) null);
      Partial partial1 = new Partial(partial0, (int[]) null);
      // Undeclared exception!
      try { 
        partial1.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Partial partial0 = new Partial();
      String string0 = partial0.toString("zZ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      YearMonth.now();
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType.halfdayOfDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getFieldTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N{SyVP'~");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.minuteOfDay();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.getFieldTypes();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Partial partial0 = new Partial(islamicChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-3862));
      partial1.property(dateTimeFieldType0);
      Partial partial2 = partial1.without(dateTimeFieldType0);
      assertEquals(0, partial2.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      Chronology chronology0 = buddhistChronology0.withZone((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset(1L, false);
      Chronology chronology1 = buddhistChronology1.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(chronology1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Partial partial1 = new Partial(dateTimeFieldType0, 0);
      int int0 = partial1.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      int[] intArray0 = new int[1];
      int int0 = 122;
      intArray0[0] = 122;
      Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        partial0.withFieldAdded(durationFieldType0, (-583));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      Locale locale0 = Locale.CHINESE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.setCopy("8", locale0);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      Chronology chronology0 = gJChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      Partial partial1 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        partial1.toStringList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2931);
      intArray0[1] = 256;
      intArray0[2] = 110;
      intArray0[3] = (-848);
      intArray0[4] = 1240;
      intArray0[5] = 3;
      intArray0[6] = (-2030);
      intArray0[7] = (-1973);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfMonth < yearOfCentury
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gregorianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Chronology chronology0 = limitChronology0.withUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      LocalTime localTime0 = new LocalTime(chronology0);
      gregorianChronology0.set(localTime0, (-1661L));
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      long long0 = (-781L);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3271L), (-781L), limitChronology0);
      // Undeclared exception!
      try { 
        partial0.getValue(1426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(julianChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      Partial partial2 = partial0.without(dateTimeFieldType0);
      Partial partial3 = partial1.without(dateTimeFieldType0);
      assertTrue(partial3.equals((Object)partial2));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1504;
      intArray0[1] = 28;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28 for clockhourOfDay must not be larger than 24
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFieldType dateTimeFieldType1 = partial0.getFieldType(0);
      assertNull(dateTimeFieldType1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      int[] intArray0 = new int[4];
      intArray0[0] = 861;
      intArray0[1] = (-1);
      int int0 = 18;
      intArray0[2] = 18;
      intArray0[3] = 715;
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getFieldType((-1792));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      partial0.toString();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Partial partial0 = new Partial();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withUTC();
      Partial partial1 = new Partial(chronology0, (DateTimeFieldType[]) null, (int[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        partial1.property(dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gregorianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Chronology chronology0 = limitChronology0.withUTC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3271L), (-781L), limitChronology0);
      gregorianChronology0.get((ReadablePeriod) mutablePeriod0, (-781L), (-781L));
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      YearMonth.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 0;
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("fwmd[_DS[", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"fwmd[_DS[\" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.toStringList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      YearMonth.now();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      Partial partial0 = new Partial();
      Partial partial1 = new Partial(partial0, (int[]) null);
      Minutes minutes0 = Minutes.MAX_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
      try { 
        partial1.minus(hours0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Partial partial0 = new Partial();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 31);
      Locale locale0 = Locale.CHINESE;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      int[] intArray0 = new int[6];
      intArray0[0] = 31;
      intArray0[1] = 31;
      intArray0[2] = 31;
      intArray0[3] = 31;
      intArray0[4] = 31;
      intArray0[5] = 31;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: yearOfEra < year
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      int[] intArray0 = new int[6];
      int int0 = 1799;
      intArray0[0] = 1799;
      intArray0[1] = 73281320;
      intArray0[2] = 1533;
      intArray0[3] = (-2075);
      intArray0[4] = 17;
      intArray0[5] = 97;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = null;
      try {
        partial1 = new Partial(partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2340);
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      partial1.getFormatter();
      dateTimeFieldType1.getDurationType();
      // Undeclared exception!
      try { 
        partial1.with(dateTimeFieldType1, (-2340));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      intArray0[0] = 2048;
      intArray0[1] = 2048;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2048 for hourOfHalfday must not be larger than 11
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 4);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[3] = 994;
      intArray0[4] = 0;
      intArray0[5] = 5;
      intArray0[6] = 1;
      intArray0[7] = 5;
      intArray0[8] = 4;
      Partial partial1 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial1.with(dateTimeFieldType0, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < monthOfYear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1502;
      intArray0[7] = 1;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      partial0.getChronology();
      // Undeclared exception!
      try { 
        partial0.toString("L\"U7K8-bDW]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      partial0.toString();
      DateTimeFieldType dateTimeFieldType0 = partial0.getFieldType(1);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Partial partial0 = new Partial();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      DurationField durationField0 = durationFieldType1.getField(gJChronology0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType4 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType5;
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFieldType.secondOfDay();
      GJChronology.getInstanceUTC();
      Partial partial0 = new Partial();
      Hours hours0 = Hours.ONE;
      Partial partial1 = new Partial(partial0, (int[]) null);
      Partial.Property partial_Property0 = new Partial.Property(partial1, 52);
      DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        partial1.plus(hours0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2613);
      intArray0[2] = 354;
      intArray0[3] = 393;
      intArray0[4] = 287;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfHalfday < monthOfYear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 701;
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 701 for clockhourOfDay must not be larger than 24
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      yearMonth0.isSupported(dateTimeFieldType1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      yearMonth0.isSupported(dateTimeFieldType1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
      Partial partial2 = partial1.withFieldAdded(durationFieldType0, 1);
      assertFalse(partial2.equals((Object)partial1));
      assertNotSame(partial2, partial0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      yearMonth0.isSupported(dateTimeFieldType1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-96));
      Partial partial2 = partial0.withFieldAdded(durationFieldType0, (-924));
      assertNotSame(partial2, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType.era();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      dateTimeFieldType1.getField(ethiopicChronology0);
      yearMonth0.isSupported(dateTimeFieldType2);
      DurationFieldType durationFieldType0 = dateTimeFieldType2.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 3);
      Partial partial2 = partial1.without(dateTimeFieldType1);
      assertEquals(2, partial2.size());
      
      Partial partial3 = partial2.withFieldAdded(durationFieldType0, 115);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-667));
      DateTime dateTime0 = localDateTime1.toDateTime();
      boolean boolean0 = partial2.isMatch((ReadableInstant) dateTime0);
      assertNotSame(partial1, partial3);
      assertFalse(boolean0);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      yearMonth0.isSupported(dateTimeFieldType1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      Partial partial2 = partial0.without(dateTimeFieldType0);
      Partial partial3 = partial2.withFieldAdded(durationFieldType0, 1);
      assertTrue(partial3.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 292272984;
      intArray0[2] = (-1350);
      intArray0[3] = 24;
      intArray0[4] = 819;
      dateTimeFieldType0.getDurationType();
      intArray0[5] = (-427);
      intArray0[6] = 418;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.seconds();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: secondOfMinute and secondOfMinute
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Partial partial0 = new Partial(gJChronology0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1));
      LocalTime localTime0 = LocalTime.now();
      partial0.isMatch((ReadablePartial) localTime0);
      LocalTime.now();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      Partial partial1 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 61);
      MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      Partial partial1 = partial0.with(dateTimeFieldType1, 17);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      mutableDateTime0.addWeekyears(25);
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldType0.getField((Chronology) null);
      LocalTime localTime0 = new LocalTime((long) 4);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = (-291);
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.withPeriodAdded(minutes0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      mutableDateTime0.addWeekyears(25);
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      dateTimeFieldType0.isSupported((Chronology) null);
      intArray0[1] = 4;
      intArray0[2] = 3;
      intArray0[3] = 4;
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.with((DateTimeFieldType) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 93;
      intArray0[1] = (-284);
      intArray0[2] = (-671);
      Partial partial0 = new Partial(gJChronology0, (DateTimeFieldType[]) null, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.without(dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      DateTimeZone.getDefault();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Locale locale0 = Locale.GERMAN;
      Partial partial0 = new Partial(yearMonth0);
      partial0.toString();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      DateTimeFieldType.dayOfMonth();
      // Undeclared exception!
      try { 
        partial1.withField(dateTimeFieldType0, (-4354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[3] = 1440;
      intArray0[4] = 73281;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 4
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 61;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      MutableDateTime.now();
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        partial0.toString("vN}h3?{@]+*pw-2K", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Partial partial0 = new Partial(yearMonth0);
      DateTimeZone.getDefault();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Locale locale0 = Locale.GERMAN;
      partial0.toString();
      partial0.withFieldAddWrapped(durationFieldType0, (-2418));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType1, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 27);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 27);
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      Partial partial1 = partial0.with(dateTimeFieldType1, (-1875));
      assertEquals(2, partial1.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Partial partial0 = new Partial(yearMonth0);
      Partial partial1 = new Partial(yearMonth0);
      DateTimeFieldType.weekOfWeekyear();
      int[] intArray0 = new int[0];
      Partial partial2 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial2.isMatch((ReadablePartial) partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType.millisOfSecond();
      ISOChronology.getInstanceUTC();
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and year
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFieldType.secondOfDay();
      GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      ISOChronology.getInstanceUTC();
      DateTimeFieldType.secondOfDay();
      Partial partial1 = new Partial(yearMonth0);
      DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 5);
      Partial partial1 = new Partial(partial0);
      DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      partial1.getFieldTypes();
      int int0 = partial0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 93;
      intArray0[1] = (-284);
      intArray0[2] = (-671);
      intArray0[3] = 1440;
      intArray0[4] = 73281;
      intArray0[5] = 20;
      int int0 = 2674;
      intArray0[6] = 2674;
      intArray0[7] = 44;
      intArray0[8] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: minuteOfDay and minuteOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Partial partial0 = new Partial(yearMonth0);
      GJChronology.getInstance();
      Hours hours0 = Hours.EIGHT;
      Locale locale0 = Locale.ITALIAN;
      Partial partial1 = new Partial();
      String string0 = partial1.toString((String) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology.getInstanceUTC();
      Partial partial0 = new Partial();
      Hours hours0 = Hours.ONE;
      Partial partial1 = new Partial(partial0, (int[]) null);
      Partial.Property partial_Property0 = new Partial.Property(partial1, 52);
      DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        partial1.with(dateTimeFieldType0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType.secondOfMinute();
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      DateTimeFieldType.weekyearOfCentury();
      MutableDateTime.now();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      partial0.isMatch((ReadableInstant) mutableDateTime0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1564);
      Partial partial1 = partial_Property0.getPartial();
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = 5235;
      localTime0.plusHours(5235);
      Partial partial0 = null;
      try {
        partial0 = new Partial((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(819);
      Hours hours0 = Hours.ONE;
      Integer integer0 = new Integer(819);
      partial1.isMatch((ReadablePartial) partial0);
      Partial.Property partial_Property1 = new Partial.Property(partial0, 819);
      LocalTime.now();
      Partial partial2 = partial0.with(dateTimeFieldType0, 819);
      assertEquals(1, partial2.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      Partial partial1 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, (int[]) null);
      partial0.getFormatter();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int0 = 100;
      GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldType0, 100);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("Y@31Es.2<g}n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Y@31Es.2<g}n\" for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      int int0 = 5;
      Partial partial0 = new Partial(dateTimeFieldType0, 5);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 5);
      LocalTime.now();
      partial0.with(dateTimeFieldType1, 5);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 5, dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(5);
      DateTime dateTime0 = localDateTime1.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        LimitChronology.getInstance((Chronology) null, dateTime0, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 5);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 5);
      DateTimeFieldType.dayOfYear();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      Partial partial1 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, (int[]) null);
      partial0.getFormatter();
      Partial partial2 = partial0.withField(dateTimeFieldType0, 6320);
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadablePartial) partial2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 20, gJChronology0);
      Partial partial1 = partial0.without(dateTimeFieldType0);
      String string0 = "";
      // Undeclared exception!
      try { 
        partial1.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType3;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[8] = dateTimeFieldType1;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.getFormatter();
      Partial partial1 = partial0.withField(dateTimeFieldType1, 1);
      Partial partial2 = partial1.minus((ReadablePeriod) null);
      assertSame(partial2, partial0);
      
      partial1.getValue(1);
      // Undeclared exception!
      try { 
        partial1.getField(32, chronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = new Partial();
      Integer integer0 = new Integer(0);
      boolean boolean0 = partial2.isMatch((ReadablePartial) partial0);
      partial_Property0.withMaximumValue();
      Partial partial3 = partial0.withChronologyRetainFields(gJChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      boolean boolean1 = partial2.isMatch((ReadableInstant) mutableDateTime0);
      assertTrue(boolean1 == boolean0);
      
      partial_Property0.addWrapFieldToCopy(236548278);
      assertSame(partial0, partial3);
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BuddhistChronology[Etc/UTC]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Chronology chronology0 = buddhistChronology0.withUTC();
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 91, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 20, gJChronology0);
      Hours hours0 = Hours.ONE;
      Integer integer0 = new Integer(819);
      Partial partial1 = partial0.withChronologyRetainFields(gJChronology1);
      Partial partial2 = partial1.withPeriodAdded(hours0, 20);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      partial2.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        partial2.withFieldAdded(durationFieldType0, (-579));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.plusHours((-3));
      Partial partial0 = new Partial(localTime1);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = localTime1.toDateTime(mutableDateTime0);
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int0 = 819;
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.NINE;
      Partial partial2 = new Partial();
      DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        partial1.without(dateTimeFieldType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      DateTimeFieldType.secondOfMinute();
      // Undeclared exception!
      try { 
        partial0.getValue(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int0 = 838;
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, gJChronology0);
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Partial partial0 = new Partial();
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.clockhourOfHalfday();
      Locale locale0 = Locale.TAIWAN;
      LocalTime.now();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      partial0.isMatch((ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = 5235;
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int int1 = 367;
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      Hours hours0 = Hours.ONE;
      Integer integer0 = new Integer(367);
      partial0.isMatch((ReadablePartial) localTime1);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
      // Undeclared exception!
      try { 
        partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      partial0.property(dateTimeFieldType0);
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      DateTimeFieldType.weekOfWeekyear();
      Partial partial1 = new Partial(partial0);
      Partial partial2 = partial1.without(dateTimeFieldType1);
      partial2.toString("\"");
      partial0.isMatch((ReadablePartial) partial1);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 819);
      partial1.plus(mutablePeriod0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
      zonedChronology0.getZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'The partial must not be null' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      partial0.size();
      Locale locale0 = Locale.GERMANY;
      partial0.toString("_'aW\"@b#TS", locale0);
      dateTimeFieldType0.isSupported((Chronology) null);
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      partial0.toStringList();
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      partial1.isMatch((ReadableInstant) mutableDateTime0);
      DateTimeFieldType.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1603);
      Partial partial0 = null;
      try {
        partial0 = new Partial((Partial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      Partial partial1 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, (int[]) null);
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        partial1.withField(dateTimeFieldType0, 6320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Hours hours0 = Hours.ONE;
      Integer integer0 = new Integer(0);
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      
      partial_Property0.withMaximumValue();
      Partial partial2 = partial0.withChronologyRetainFields(gJChronology0);
      Partial partial3 = partial2.withPeriodAdded(hours0, (-1280));
      String string0 = partial3.toString();
      assertEquals("[secondOfDay=819]", string0);
      assertSame(partial2, partial0);
      assertTrue(partial3.equals((Object)partial2));
      assertNotSame(partial3, partial0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      partial0.property(dateTimeFieldType0);
      DateTimeFieldType.minuteOfDay();
      dateTimeFieldType0.isSupported(gJChronology0);
      Partial partial1 = partial0.withField(dateTimeFieldType0, 819);
      partial1.toString();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      partial0.isMatch((ReadableInstant) mutableDateTime0);
      Partial partial2 = partial0.withField(dateTimeFieldType0, 0);
      assertNotSame(partial0, partial2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      partial1.isMatch((ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'monthOfYear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[5];
      intArray0[0] = 819;
      intArray0[1] = 819;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 819;
      Partial partial2 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        partial1.withField(dateTimeFieldType0, (-4354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4354 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      localTime1.minusMillis(367);
      intArray0[1] = 73;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 6);
      Locale locale0 = Locale.GERMAN;
      Partial partial1 = null;
      try {
        partial1 = new Partial((DateTimeFieldType) null, (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = new Partial();
      Hours hours0 = Hours.ONE;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      Partial partial3 = new Partial(gJChronology0, dateTimeFieldTypeArray0, (int[]) null);
      DateTimeFormatter dateTimeFormatter0 = partial2.getFormatter();
      assertNull(dateTimeFormatter0);
      
      System.setCurrentTimeMillis(0);
      String string0 = partial0.toString();
      assertEquals("[secondOfDay=819]", string0);
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      partial_Property0.addToCopy(0);
      partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      gJChronology0.add((ReadablePeriod) hours0, (-1752L), 819);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("((pM|$IBj", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"((pM|$IBj\" for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      Months months0 = Months.SEVEN;
      String string0 = partial0.toString();
      assertEquals("[secondOfDay=819]", string0);
      
      partial2.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      LocalTime.now();
      partial0.with(dateTimeFieldType0, 0);
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial();
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      intArray0[8] = 5;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      Partial partial2 = new Partial();
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      partial2.without(dateTimeFieldType0);
      partial1.toString("\"");
      partial2.isMatch((ReadablePartial) localDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(880L);
      partial2.plus(months0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 99
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      LocalTime.now();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 5235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5235 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      Months months0 = Months.SEVEN;
      Locale locale0 = Locale.TAIWAN;
      int[] intArray0 = new int[9];
      intArray0[0] = 819;
      intArray0[1] = 819;
      intArray0[2] = 0;
      intArray0[3] = (-2014);
      intArray0[4] = 819;
      intArray0[5] = 0;
      intArray0[6] = 819;
      intArray0[7] = 0;
      intArray0[8] = 819;
      Partial partial3 = new Partial(partial2, intArray0);
      partial1.toString((String) null, locale0);
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Hours hours0 = Hours.ONE;
      gJChronology0.add((ReadablePeriod) hours0, (-1752L), 819);
      LocalTime localTime0 = new LocalTime(0, 0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = localTime0.getFieldTypes();
      Partial partial0 = new Partial(localTime0);
      DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
      assertNotSame(dateTimeFieldTypeArray1, dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      Chronology chronology0 = partial0.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      Partial partial2 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      partial1.getFormatter();
      // Undeclared exception!
      try { 
        partial1.withField(dateTimeFieldType0, 367);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 367 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int int0 = (-948);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[1] = 73;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        partial1.withField(dateTimeFieldType0, 73281);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73281 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType3;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[8] = dateTimeFieldType1;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.getFormatter();
      Partial partial1 = partial0.withField(dateTimeFieldType1, 1);
      assertSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Partial partial0 = new Partial((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      partial0.plus((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      partial0.toDateTime((ReadableInstant) null);
      partial0.plus((ReadablePeriod) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localTime0.get(dateTimeFieldType0);
      DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertTrue(dateTimeFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      Months months0 = Months.SEVEN;
      String string0 = partial0.toString();
      assertEquals("[secondOfDay=819]", string0);
      
      partial2.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      LocalTime.now();
      partial1.with(dateTimeFieldType0, 819);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[5] = (-948);
      intArray0[3] = 2775;
      int int0 = 367;
      intArray0[4] = 367;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      Partial partial2 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      partial0.without(dateTimeFieldType0);
      partial2.minus(months0);
      // Undeclared exception!
      try { 
        partial1.toString("S/XBYj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      gJChronology0.add((ReadablePeriod) hours0, (-1752L), 819);
      boolean boolean0 = partial2.isMatch((ReadablePartial) partial0);
      partial_Property0.withMaximumValue();
      Partial partial3 = partial0.withChronologyRetainFields(gJChronology0);
      boolean boolean1 = partial1.isMatch((ReadableInstant) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(partial1.equals((Object)partial3));
      assertSame(partial0, partial3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertTrue(dateTimeFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
      buddhistChronology0.equals(chronology0);
      Partial partial0 = new Partial(dateTimeFieldType0, 1191, lenientChronology0);
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      partial1.getField(0, (Chronology) buddhistChronology0);
      String string0 = partial0.toStringList();
      assertNotSame(partial0, partial1);
      assertEquals("[minuteOfDay=1191]", string0);
      
      // Undeclared exception!
      try { 
        partial1.getField((-2418), (Chronology) lenientChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      partial0.toDateTime((ReadableInstant) null);
      Partial partial1 = partial0.plus((ReadablePeriod) null);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      int[] intArray0 = new int[4];
      intArray0[0] = 5235;
      intArray0[1] = 5235;
      intArray0[2] = 5235;
      intArray0[3] = 97;
      Partial partial2 = new Partial(partial0, intArray0);
      partial0.toString("03:00:00.000", locale0);
      Partial.Property partial_Property0 = new Partial.Property(partial1, 112);
      // Undeclared exception!
      try { 
        partial_Property0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial2.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      int[] intArray0 = new int[1];
      intArray0[0] = 819;
      Partial partial3 = new Partial(partial1, intArray0);
      // Undeclared exception!
      try { 
        partial3.toString("[secondOfDay=819]", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[2] = (-948);
      intArray0[3] = 2775;
      int int0 = 367;
      intArray0[4] = 367;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      Partial partial2 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      partial0.without(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        partial1.toString("S/XBYj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Chronology chronology0 = null;
      Partial partial0 = new Partial();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Partial partial1 = new Partial((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -713 for era must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      int[] intArray0 = new int[8];
      intArray0[0] = 367;
      intArray0[1] = 73;
      intArray0[2] = 73;
      intArray0[3] = (-948);
      intArray0[4] = 367;
      intArray0[5] = 44;
      intArray0[6] = (-948);
      intArray0[7] = 73;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      Partial partial2 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.toString("Types array must not contain null: index ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = new Partial();
      Hours hours0 = Hours.ONE;
      long long0 = new Integer(0);
      boolean boolean0 = partial2.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      
      partial_Property0.withMaximumValue();
      Partial partial3 = partial0.withChronologyRetainFields(gJChronology0);
      Partial partial4 = partial3.withPeriodAdded(hours0, (-1280));
      assertTrue(partial3.equals((Object)partial1));
      assertSame(partial3, partial0);
      assertNotSame(partial4, partial3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[2] = (-948);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Partial partial1 = new Partial(copticChronology0);
      Partial partial2 = new Partial(partial1, intArray0);
      partial2.getValues();
      copticChronology0.add((long) (-948), (long) 869, 0);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-948), 977);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -948
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 5);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 65535);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("org.joda.time.convert.NullConverter", locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.getValues();
      try { 
        DateTimeZone.forOffsetHoursMinutes(869, 367);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 869
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[2] = (-948);
      intArray0[3] = 73;
      intArray0[4] = 367;
      intArray0[5] = 0;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial0.toString();
      partial0.getChronology();
      DateTimeFieldType.minuteOfHour();
      Locale locale0 = Locale.TAIWAN;
      Partial partial2 = new Partial(partial1, intArray0);
      // Undeclared exception!
      try { 
        partial2.toString("Types array must not contain null: index ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = 5235;
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      partial0.toDateTime((ReadableInstant) null);
      int int1 = (-1864);
      partial0.withPeriodAdded((ReadablePeriod) null, 5235);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[2] = (-948);
      intArray0[3] = 73;
      intArray0[4] = 367;
      int int0 = 0;
      intArray0[5] = 0;
      Partial partial1 = new Partial(partial0, intArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      partial1.with(dateTimeFieldType0, 93);
      partial1.getChronology();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = 5235;
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      partial0.toDateTime((ReadableInstant) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      partial0.plus((ReadablePeriod) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      localTime0.get(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5235 for weekOfWeekyear must not be larger than 53
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withZone((DateTimeZone) null);
      DateTimeFieldType.minuteOfHour();
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      Days days0 = Days.TWO;
      Weeks weeks0 = Weeks.weeks(8);
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded(0L, 0);
      Days days1 = duration1.toStandardDays();
      days0.plus(days1);
      Partial partial2 = partial0.withPeriodAdded(days0, 1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertTrue(partial2.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      intArray0[0] = 869;
      intArray0[1] = 93;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(iSOChronology0);
      DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      partial0.getFieldTypes();
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = new int[6];
      intArray0[0] = 869;
      intArray0[1] = 93;
      intArray0[2] = (-948);
      intArray0[3] = 73;
      int int0 = 367;
      intArray0[4] = 367;
      intArray0[5] = 0;
      Partial partial1 = new Partial(partial0, intArray0);
      Months months0 = Months.SEVEN;
      partial1.withPeriodAdded(months0, 0);
      // Undeclared exception!
      try { 
        partial1.toString("S/XBYj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = 5235;
      LocalTime localTime1 = localTime0.plusHours(5235);
      Partial partial0 = new Partial(localTime1);
      ReadablePeriod readablePeriod0 = null;
      partial0.plus((ReadablePeriod) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      LocalTime.now();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 5235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5235 for weekOfWeekyear must not be larger than 53
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType0.getField((Chronology) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 819, gJChronology0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(0);
      Partial partial2 = partial_Property0.withMinimumValue();
      Hours hours0 = Hours.ONE;
      gJChronology0.add((ReadablePeriod) hours0, (-1752L), 819);
      boolean boolean0 = partial2.isMatch((ReadablePartial) partial0);
      assertFalse(boolean0);
      
      partial_Property0.withMaximumValue();
      Partial partial3 = partial0.withChronologyRetainFields(gJChronology0);
      Partial partial4 = partial3.withPeriodAdded(hours0, (-1280));
      assertNotSame(partial4, partial0);
      assertSame(partial3, partial0);
      assertTrue(partial4.equals((Object)partial1));
      assertTrue(partial4.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[0];
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Partial partial0 = new Partial(islamicChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Partial partial1 = new Partial(partial0, intArray0);
      Chronology chronology0 = partial1.getChronology();
      assertNotNull(chronology0);
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.getFieldType(2064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 80;
      int int0 = 3659;
      intArray0[2] = 3659;
      intArray0[3] = 0;
      intArray0[4] = 202;
      intArray0[5] = 171;
      intArray0[6] = (-141);
      intArray0[7] = (-422);
      intArray0[8] = 400;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withZone((DateTimeZone) null);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
      Partial partial0 = new Partial(dateTimeFieldType0, 1191, lenientChronology0);
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      partial1.getField(0, (Chronology) buddhistChronology0);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfMinute' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      int int0 = 70;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 70 for minuteOfHour must not be larger than 59
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Chronology chronology0 = null;
      Partial partial0 = new Partial((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfYear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Partial partial0 = new Partial();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      int int0 = (-898);
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, (-898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      // Undeclared exception!
      try { 
        LimitChronology.getInstance((Chronology) null, mutableDateTime1, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      weeks0.toString();
      Minutes minutes0 = weeks0.toStandardMinutes();
      LocalDate localDate1 = localDate0.plus(minutes0);
      Partial partial0 = new Partial(localDate1);
      // Undeclared exception!
      try { 
        weeks0.getValue(3581);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3581
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
}
