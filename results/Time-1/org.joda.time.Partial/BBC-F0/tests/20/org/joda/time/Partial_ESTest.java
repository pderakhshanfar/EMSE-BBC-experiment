/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 12:45:33 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Partial_ESTest extends Partial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = new Instant();
      int[] intArray0 = new int[8];
      intArray0[0] = 852;
      intArray0[1] = 48;
      intArray0[2] = (-446);
      intArray0[3] = 17887500;
      intArray0[4] = 48;
      intArray0[5] = 20;
      intArray0[6] = (-2440);
      intArray0[7] = 44;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Partial partial0 = new Partial(ethiopicChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getFieldTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.getValue(1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1698;
      intArray0[2] = 22;
      intArray0[3] = 2212;
      intArray0[4] = 2000;
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[5] = 1625;
      intArray0[6] = (-1357);
      intArray0[7] = 15356250;
      intArray0[8] = (-1881);
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.withFieldAdded((DurationFieldType) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      int[] intArray0 = new int[2];
      intArray0[0] = 40;
      intArray0[1] = 53;
      Partial partial0 = new Partial(iSOChronology0, (DateTimeFieldType[]) null, intArray0);
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        partial0.withPeriodAdded(months0, 2007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldType4.getField(islamicChronology0);
      dateTimeFieldType4.isSupported(islamicChronology0);
      Months months0 = Months.FOUR;
      islamicChronology0.get((ReadablePeriod) months0, 2551440384L, 2551440384L);
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      dateTimeFieldType4.getDurationType();
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, (int[]) null);
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Hours hours0 = Hours.THREE;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 0;
      Partial partial0 = new Partial(julianChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.minus(hours0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 91);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadablePartial) partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-10);
      intArray0[1] = (-10);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: weekyearOfCentury < weekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 674;
      intArray0[2] = (-2684);
      intArray0[3] = (-1478);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = ethiopicChronology0.withUTC();
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfSecond < weekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Partial partial0 = new Partial(localDateTime0);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadableInstant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType2, durationField0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dateTimeFieldType4.isSupported(ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType6 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.year();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[8] = dateTimeFieldType8;
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        partial0.getValue(2931);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadableInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Partial partial0 = new Partial();
      Chronology chronology0 = null;
      int[] intArray0 = new int[4];
      intArray0[0] = 7678125;
      intArray0[1] = (-400);
      intArray0[2] = (-1717);
      intArray0[3] = 1609;
      Partial partial1 = new Partial((Chronology) null, (DateTimeFieldType[]) null, intArray0);
      DateTimeFieldType.monthOfYear();
      Days days0 = Days.FOUR;
      // Undeclared exception!
      try { 
        partial1.plus(days0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int0 = 2717;
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 2717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2717 for dayOfYear must not be larger than 366
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Partial partial0 = new Partial(localDateTime0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withZone((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      Partial partial1 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        partial1.isMatch((ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 1697;
      intArray0[1] = 1697;
      intArray0[2] = 1697;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-943);
      intArray0[6] = 1697;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = partial0.with(dateTimeFieldType0, 1697);
      // Undeclared exception!
      try { 
        partial1.without(dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Partial partial0 = new Partial(yearMonth0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      partial_Property0.getAsShortText();
      partial_Property0.setCopy("Feb");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      System.setCurrentTimeMillis(4624L);
      TimeZone timeZone0 = TimeZone.getTimeZone("e");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone1);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.clockhourOfDay();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      dateTimeFieldType1.getField(buddhistChronology0);
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.toString("e");
      partial0.size();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType5, 2471);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Partial partial0 = new Partial();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/*5!q6.,903Lr!");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-98));
      localDateTime1.minusMillis((-98));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and year
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType.hourOfHalfday();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType1, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Partial partial0 = new Partial();
      Hours hours0 = Hours.FOUR;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(684);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      buddhistChronology0.validate(partial0, (int[]) null);
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[8] = dateTimeFieldType8;
      int[] intArray0 = new int[3];
      intArray0[0] = 684;
      dateTimeFieldType0.isSupported(buddhistChronology0);
      intArray0[1] = (-1893);
      intArray0[2] = 684;
      Partial partial1 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial1.without(dateTimeFieldType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType.yearOfCentury();
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      dateTimeFieldType0.getField(buddhistChronology0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
      partial0.size();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withDurationAdded(0L, 917);
      DateTime dateTime2 = partial1.toDateTime(dateTime1);
      DateTime dateTime3 = dateTime2.plusYears(917);
      partial1.isMatch((ReadableInstant) dateTime3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Partial partial0 = new Partial();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(ethiopicChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType2, durationField0);
      DateTimeFieldType dateTimeFieldType5 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 31;
      intArray0[6] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfDay < weekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = null;
      try {
        partial0 = new Partial((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Partial partial0 = new Partial(yearMonth0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = dateTime0.toInstant();
      DateTime dateTime1 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime1);
      partial0.getField(0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("BM0QN74/I>KCm:kRM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"BM0QN74/I>KCm:kRM\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Partial partial0 = new Partial(yearMonth0);
      partial0.getFormatter();
      DurationFieldType.seconds();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, 606, (-3357), 2000, 1970, 3237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Partial partial0 = new Partial(yearMonth0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      partial0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldType1.getRangeDurationType();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Partial partial2 = new Partial(partial0, intArray0);
      partial2.withFieldAdded(durationFieldType0, 0);
      Hours hours0 = Hours.MAX_VALUE;
      Partial partial3 = partial1.plus(hours0);
      partial3.plus(hours0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(1);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfMonth(1);
      LocalDateTime localDateTime3 = localDateTime2.plusSeconds(2500);
      Partial partial0 = new Partial(localDateTime3);
      dateTimeFieldType0.getDurationType();
      localDateTime3.minusWeeks((-1624));
      DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
      partial0.withFieldAdded(durationFieldType0, (-1624));
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-3849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3849 for era must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial1 = partial0.with(dateTimeFieldType0, 33);
      DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      partial1.withFieldAddWrapped(durationFieldType0, 917);
      dateTimeFieldType0.getRangeDurationType();
      Partial partial2 = partial1.withPeriodAdded((ReadablePeriod) null, 2603);
      partial2.without(dateTimeFieldType0);
      partial0.without(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial(localDateTime0);
      partial0.getFormatter();
      localDateTime0.getMinuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType.halfdayOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-919));
      LocalDateTime localDateTime0 = new LocalDateTime(1L, dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-919));
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(61);
      int int0 = (-526);
      Partial partial0 = new Partial(localDateTime2);
      DateTimeFieldType.dayOfWeek();
      Days days0 = Days.MIN_VALUE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, dateTimeZone0);
      zonedChronology1.get((ReadablePeriod) days0, 1L, (long) 1);
      ZonedChronology zonedChronology2 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      ZonedChronology zonedChronology3 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology3.get((ReadablePeriod) days0, (long) 1, 4166L);
      ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology2.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(zonedChronology1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must not be larger than 30
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType2;
      int[] intArray0 = new int[6];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(islamicChronology0);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: era and era
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-980L));
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(505);
      int int0 = (-526);
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType.dayOfWeek();
      Days days0 = Days.MIN_VALUE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) days0, 0L, (-980L));
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone1);
      zonedChronology1.get((ReadablePeriod) days0, 1L, 1940L);
      ZonedChronology.getInstance(zonedChronology1, dateTimeZone0);
      zonedChronology1.withZone(dateTimeZone0);
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        partial1.withChronologyRetainFields(gJChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime((-2635L));
      int int0 = (-788);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-788));
      localDateTime1.withFields(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = gregorianChronology0.withUTC();
      int[] intArray0 = new int[5];
      intArray0[0] = 917;
      intArray0[1] = 149;
      intArray0[2] = 917;
      intArray0[3] = 2353;
      intArray0[4] = (-788);
      Partial partial0 = new Partial(chronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 992);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Days days0 = Days.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology0.get((ReadablePeriod) days0, (long) (-2308), (long) (-526));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology1.get((ReadablePeriod) days0, 4166L, (long) (-2308));
      ZonedChronology zonedChronology2 = ZonedChronology.getInstance(zonedChronology1, dateTimeZone0);
      zonedChronology2.withZone(dateTimeZone0);
      partial0.withChronologyRetainFields(zonedChronology2);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      dateTimeFieldType0.getRangeDurationType();
      Partial partial2 = partial1.withFieldAdded(durationFieldType0, 1);
      Partial partial3 = partial2.plus(days0);
      partial1.getValue(1);
      partial3.getValue(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType4;
      int[] intArray0 = new int[6];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(islamicChronology0);
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for era must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      partial0.isMatch((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      LocalDateTime localDateTime2 = localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks((-2308));
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 3);
      dateTimeFieldType0.getRangeDurationType();
      DateTime dateTime0 = DateTime.now();
      partial1.isMatch((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType.weekyear();
      TimeZone timeZone0 = TimeZone.getTimeZone(" and ");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.minusMinutes((-2308));
      localDateTime0.minusMillis((-1087));
      int int0 = (-1446);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1446), 20, (-3189), 494, 1454);
      LocalDateTime localDateTime1 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime1.minusWeeks((-1446));
      partial0.withFieldAddWrapped(durationFieldType0, 278);
      dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      partial0.withFieldAdded(durationFieldType0, 13421772);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      LocalDateTime localDateTime2 = localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks((-2308));
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 3);
      dateTimeFieldType0.getRangeDurationType();
      Partial partial2 = partial1.withFieldAdded(durationFieldType0, 3);
      // Undeclared exception!
      try { 
        partial2.with(dateTimeFieldType0, (-3849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3849 for dayOfWeek must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getRangeDurationType();
      IslamicChronology.getInstanceUTC();
      Years years0 = Years.TWO;
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      String string0 = partial0.toString();
      assertEquals("[secondOfDay=1]", string0);
      
      Partial partial1 = partial0.without(dateTimeFieldType1);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime((-2635L));
      int int0 = (-788);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-788));
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      LocalDateTime localDateTime3 = localDateTime2.minusMinutes((-788));
      Partial partial0 = new Partial(localDateTime3);
      partial0.getFormatter();
      partial0.getFieldTypes();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-788));
      partial1.toString();
      partial0.isMatch((ReadablePartial) localDateTime2);
      partial1.size();
      Period period0 = Period.hours(int0);
      int int1 = 217;
      Period period1 = period0.plusDays(int1);
      partial0.toStringList();
      int int2 = 99;
      Period period2 = period1.plusHours(int2);
      int int3 = 91;
      // Undeclared exception!
      partial0.withPeriodAdded(period2, int3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      DateTime dateTime0 = DateTime.now();
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertFalse(boolean0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(1);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Days days0 = Days.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) days0, (long) (-650), (long) (-650));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, dateTimeZone0);
      zonedChronology1.get((ReadablePeriod) days0, (long) (-650), 0L);
      zonedChronology1.withZone(dateTimeZone0);
      Partial partial1 = partial0.withChronologyRetainFields(zonedChronology1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      partial1.withFieldAddWrapped(durationFieldType0, 1);
      DurationFieldType.days();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
      Partial partial2 = null;
      try {
        partial2 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      partial0.toString();
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1087));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      zonedChronology0.withZone(dateTimeZone0);
      Partial partial1 = new Partial(zonedChronology0);
      Partial partial2 = partial1.withChronologyRetainFields(buddhistChronology0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        partial2.withFieldAddWrapped(durationFieldType0, 1972);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Partial partial1 = new Partial(dateTimeFieldType0, 2014, islamicChronology0);
      DateTime.now();
      Instant instant0 = new Instant(692L);
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertTrue(boolean0);
      
      Partial partial2 = new Partial();
      partial2.size();
      Years years0 = Years.ZERO;
      Period period0 = new Period(19, 0, 59, 3645);
      Partial partial3 = partial1.withPeriodAdded(period0, 20);
      assertTrue(partial3.equals((Object)partial1));
      assertNotSame(partial3, partial1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, 404);
      Partial partial1 = partial0.with(dateTimeFieldType0, 1000);
      Duration duration0 = new Duration((long) 1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.getDurationType();
      partial0.toString();
      partial1.getFormatter();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType1, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = partial0.with(dateTimeFieldType1, 1);
      Duration duration0 = new Duration((-3063L));
      DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType1.getDurationType();
      // Undeclared exception!
      try { 
        partial1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1087);
      DateTime dateTime0 = DateTime.now();
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertFalse(boolean0);
      
      partial0.size();
      Years years0 = Years.TWO;
      Partial partial1 = partial0.withPeriodAdded(years0, 1);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -326 for minuteOfHour must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      partial0.toString();
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1087));
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1087);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-1087);
      Partial partial1 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.withField(dateTimeFieldType0, 1);
      partial1.toString();
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      assertNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Types array must not be null");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      partial0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      partial0.without(dateTimeFieldType0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2, (-2308), 4, (-3879), 6, 2584, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3879 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      LocalDateTime localDateTime2 = localDateTime0.minusMonths((-2308));
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      durationFieldType0.getField(copticChronology0);
      dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks((-2308));
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 917);
      dateTimeFieldType0.getRangeDurationType();
      Partial partial2 = partial0.withFieldAdded(durationFieldType0, (-2308));
      assertNotSame(partial0, partial1);
      assertNotSame(partial2, partial0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.getDurationType();
      partial0.toString();
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      BuddhistChronology.getInstanceUTC();
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      partial0.getChronology();
      DateTimeFieldType.hourOfDay();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      // Undeclared exception!
      try { 
        partial_Property0.addToCopy(3474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Days days0 = Days.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology0.get((ReadablePeriod) days0, (long) (-526), (long) (-526));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, dateTimeZone0);
      zonedChronology1.withZone(dateTimeZone0);
      Partial partial1 = partial0.withChronologyRetainFields(zonedChronology1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      durationFieldType0.getField(zonedChronology1);
      localDateTime0.minusWeeks((-526));
      partial1.withFieldAddWrapped(durationFieldType0, 1);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      DurationFieldType durationFieldType1 = dateTimeFieldType1.getRangeDurationType();
      assertEquals("centuries", durationFieldType1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      int int0 = (-1087);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      partial0.toString();
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1087));
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime1.minusWeeks((-2308));
      // Undeclared exception!
      partial0.withFieldAddWrapped(durationFieldType0, 73281);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-542));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(localDateTime1);
      partial0.toString();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      Days days0 = Days.ZERO;
      dateTimeFieldType0.getField(zonedChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-542);
      intArray0[1] = 91;
      intArray0[3] = (-542);
      intArray0[4] = (-542);
      Partial partial1 = new Partial(zonedChronology0, (DateTimeFieldType[]) null, intArray0);
      partial0.toString();
      // Undeclared exception!
      try { 
        partial1.getFormatter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial1 = new Partial(partial0);
      partial0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial2 = new Partial(partial0);
      partial2.without(dateTimeFieldType0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(73281, 73273, 1, (-1), (-1150), (-551), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.minusYears((-542));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = (-542);
      intArray0[2] = 0;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[9];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = (-1580);
      intArray0[6] = (-1580);
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1580));
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      partial1.getChronology();
      partial2.isBefore(partial1);
      partial_Property0.getPartial();
      partial2.toStringList();
      partial1.getChronology();
      partial1.plus((ReadablePeriod) null);
      System.setCurrentTimeMillis((-2558));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      Partial partial0 = new Partial(localDateTime1);
      partial0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      partial0.without(dateTimeFieldType0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-2308), (-1150), (-2308), 73273, (-3866), 73273, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73273 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis((-2308));
      LocalDateTime localDateTime2 = localDateTime0.minusYears((-526));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks((-2308));
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 3);
      dateTimeFieldType0.getRangeDurationType();
      partial1.withFieldAdded(durationFieldType0, 3);
      // Undeclared exception!
      try { 
        partial1.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-542));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(localDateTime1);
      partial0.toString();
      Days days0 = Days.ZERO;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      partial0.getFieldTypes();
      DateTimeFieldType dateTimeFieldType1 = partial0.getFieldType(1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFieldType.secondOfDay();
      TimeZone timeZone0 = TimeZone.getTimeZone("org.joda.time.Partial");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.minusYears(6);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(localDateTime0);
      partial0.toString();
      partial0.without(dateTimeFieldType0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(5, 6, 5, 61, 44, (-614), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 241;
      intArray0[2] = 90;
      intArray0[3] = 241;
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getPartial();
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFieldType0.isSupported(julianChronology0);
      DateTimeZone.getDefault();
      Partial partial1 = new Partial();
      dateTimeFieldType0.getRangeDurationType();
      partial0.getChronology();
      Partial partial2 = partial_Property0.getPartial();
      String string0 = partial0.toStringList();
      assertEquals("[secondOfDay=0]", string0);
      
      Chronology chronology0 = partial1.getChronology();
      partial_Property0.addWrapFieldToCopy(90);
      Partial partial3 = partial0.withChronologyRetainFields(chronology0);
      Partial partial4 = partial2.withField(dateTimeFieldType0, 0);
      assertSame(partial4, partial3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        partial0.with((DateTimeFieldType) null, (-435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-542));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(localDateTime1);
      partial0.toString();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = iSOChronology0.withUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      Days days0 = Days.ZERO;
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) days0, (long) (-542), (long) (-542));
      Chronology chronology1 = zonedChronology0.withZone(dateTimeZone0);
      partial0.withChronologyRetainFields(chronology1);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      Partial partial1 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial1, (-31));
      // Undeclared exception!
      try { 
        partial_Property0.withMinimumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[14];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      int[] intArray0 = new int[6];
      intArray0[0] = 403;
      intArray0[1] = (-27);
      intArray0[2] = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType3.isSupported(islamicChronology0);
      intArray0[3] = (-551);
      intArray0[4] = 0;
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      partial0.property(dateTimeFieldType0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-551));
      // Undeclared exception!
      try { 
        partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      int[] intArray0 = new int[6];
      intArray0[0] = 403;
      intArray0[1] = 2;
      intArray0[2] = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFieldType3.isSupported(islamicChronology0);
      intArray0[3] = (-551);
      intArray0[4] = 0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      dateTimeFieldType4.getField(ethiopicChronology0);
      intArray0[5] = (-1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: hourOfDay and hourOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Partial partial0 = new Partial();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      partial0.with(dateTimeFieldType0, 19);
      Duration duration0 = new Duration(60L);
      partial0.getChronology();
      DateTimeFieldType.hourOfHalfday();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial0.toString();
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 241;
      intArray0[2] = 90;
      intArray0[3] = 241;
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.getPartial();
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = new Partial();
      dateTimeFieldType1.getRangeDurationType();
      partial0.getChronology();
      partial_Property0.getPartial();
      partial0.toStringList();
      partial2.getChronology();
      partial2.toString();
      partial_Property0.addWrapFieldToCopy(90);
      Partial.Property partial_Property1 = partial1.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        partial_Property1.setCopy("[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"[]\" for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.toZoneId();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Partial partial0 = new Partial(buddhistChronology0);
      Months months0 = Months.THREE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      Partial partial1 = new Partial(dateTimeFieldType0, 1);
      Partial partial2 = partial1.plus(months0);
      Days days0 = Days.daysBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
      partial2.minus(days0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeZone.getDefault();
      dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 241;
      intArray0[2] = 90;
      intArray0[3] = 241;
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getPartial();
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial1 = new Partial();
      dateTimeFieldType1.getRangeDurationType();
      partial0.getChronology();
      Partial partial2 = partial_Property0.getPartial();
      partial0.toStringList();
      Chronology chronology0 = partial1.getChronology();
      partial1.toString();
      partial_Property0.addWrapFieldToCopy(90);
      partial0.withChronologyRetainFields(chronology0);
      // Undeclared exception!
      try { 
        partial2.withField(dateTimeFieldType0, (-2741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2741 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis(6);
      localDateTime0.minusYears(6);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime0.minusWeeks((-2501));
      partial0.withFieldAddWrapped(durationFieldType0, (-1580));
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[2] = (-1087);
      partial0.isMatch((ReadablePartial) partial0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        partial0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis(6);
      LocalDateTime localDateTime2 = localDateTime0.minusYears(6);
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks((-2308));
      partial0.withFieldAddWrapped(durationFieldType0, 3);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-2308));
      partial0.toString();
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 91;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      DurationFieldType.hours();
      partial1.getChronology();
      partial_Property0.getPartial();
      partial2.toStringList();
      partial1.getChronology();
      Partial partial3 = partial_Property0.withMaximumValue();
      String string0 = partial3.toString();
      assertEquals("[weekOfWeekyear=53, monthOfYear=1]", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1087);
      intArray0[1] = (-1087);
      intArray0[2] = (-1087);
      intArray0[3] = (-1087);
      Partial partial1 = new Partial(strictChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1087));
      Partial partial2 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported(strictChronology0);
      DateTimeZone.getDefault();
      partial1.size();
      partial_Property0.getPartial();
      DurationFieldType.hours();
      partial1.getChronology();
      Partial.Property partial_Property1 = partial1.property(dateTimeFieldType0);
      partial_Property1.getPartial();
      partial0.toStringList();
      partial2.getChronology();
      partial2.toString();
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("[weekyear=-1087]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      strictChronology0.withUTC();
      Partial partial0 = null;
      try {
        partial0 = new Partial((Partial) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.toZoneId();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Partial partial0 = new Partial(buddhistChronology0);
      Months months0 = Months.THREE;
      partial0.plus(months0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeZone.getDefault();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("halfdays", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.toString((String) null);
      partial0.getFormatter();
      int int0 = 3474;
      Period period0 = Period.millis(3474);
      Minutes minutes0 = Minutes.TWO;
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      Period period1 = period0.normalizedStandard(periodType1);
      Partial partial1 = partial0.withPeriodAdded(period1, (-551));
      DateTimeFieldType.dayOfYear();
      // Undeclared exception!
      try { 
        partial1.getField(3474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 249;
      intArray0[2] = 249;
      intArray0[3] = 249;
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getPartial();
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      partial0.size();
      Partial partial1 = new Partial();
      partial0.getChronology();
      partial_Property0.getPartial();
      partial0.toStringList();
      partial1.getChronology();
      partial1.toString();
      Partial partial2 = partial_Property0.addWrapFieldToCopy(249);
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      LocalDate localDate1 = localDate0.plusYears((-1685));
      // Undeclared exception!
      try { 
        partial2.isMatch((ReadablePartial) localDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 249;
      intArray0[2] = 90;
      intArray0[3] = 249;
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getPartial();
      dateTimeFieldType1.isSupported(julianChronology0);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial1 = new Partial();
      dateTimeFieldType1.getRangeDurationType();
      partial0.getChronology();
      Partial partial2 = partial_Property0.getPartial();
      partial0.toStringList();
      partial1.getChronology();
      partial1.toString();
      Partial partial3 = partial_Property0.addWrapFieldToCopy(90);
      assertNotSame(partial3, partial1);
      
      // Undeclared exception!
      try { 
        partial2.withField(dateTimeFieldType0, (-2741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2741 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1087);
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        partial0.getValue((-1087));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.toStringList();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.seconds();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType3 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis(6);
      localDateTime0.minusYears((-542));
      Partial partial0 = new Partial(localDateTime1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      int[] intArray0 = new int[2];
      intArray0[1] = (-542);
      Partial partial1 = new Partial(partial0, intArray0);
      boolean boolean0 = partial1.isMatch((ReadablePartial) localDateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      int int0 = 91;
      intArray0[4] = 91;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      int int1 = 23034375;
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 23034375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 23034375 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-2308));
      localDateTime1.minusMillis(6);
      int int0 = (-542);
      localDateTime0.minusYears((-542));
      Partial partial0 = new Partial(localDateTime1);
      Days days0 = Days.FIVE;
      Partial partial1 = partial0.withPeriodAdded(days0, (-2741));
      partial1.getValues();
      Chronology chronology0 = partial0.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Partial partial2 = new Partial(chronology0);
      Partial.Property partial_Property0 = new Partial.Property(partial2, 220);
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType.hourOfHalfday();
      Years years0 = Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'years' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      int int0 = (-2558);
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 249;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 249);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      dateTimeFieldType1.getRangeDurationType();
      partial1.getChronology();
      Partial partial3 = partial_Property0.getPartial();
      partial2.toStringList();
      partial1.getChronology();
      partial3.toString();
      // Undeclared exception!
      try { 
        partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 249;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 249);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      dateTimeFieldType1.getRangeDurationType();
      partial1.getChronology();
      Partial partial3 = new Partial((Chronology) null);
      partial2.toStringList();
      partial1.getChronology();
      // Undeclared exception!
      try { 
        partial_Property0.getAsString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 249;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 249);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      partial1.getFieldType(0);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("qj,ZKo|'GZw3OV");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1087);
      Partial partial1 = new Partial(partial0, intArray0);
      Hours hours0 = Hours.FOUR;
      Partial partial2 = partial1.minus(hours0);
      assertNotSame(partial2, partial1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Partial partial0 = new Partial();
      int int0 = 523;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      partial0.indexOf(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        partial0.toString("Values array must be the same length as the types array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Chronology chronology0 = gregorianChronology0.withUTC();
      dateTimeFieldType1.getField(chronology0);
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, (int[]) null);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 90);
      partial_Property0.getPartial();
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeZone.getDefault();
      Partial partial1 = null;
      try {
        partial1 = new Partial(partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d\"@>I-)'IDx");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(Integer.MAX_VALUE);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(7);
      LocalDateTime localDateTime3 = localDateTime2.minusYears(7);
      Partial partial0 = new Partial(localDateTime3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      localDateTime2.minusWeeks(7);
      partial0.withFieldAddWrapped(durationFieldType0, 27);
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withDurationAdded(60L, 0);
      dateTime0.yearOfEra();
      DateTime dateTime2 = dateTime1.plusDays(0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime2, (ReadableInstant) dateTime2);
      Duration duration0 = new Duration(60L);
      Partial partial1 = partial0.withPeriodAdded(hours0, 0);
      partial1.getValues();
      partial1.getChronology();
      DateTimeFieldType.hourOfHalfday();
      Partial.Property partial_Property0 = new Partial.Property(partial1, 0);
      // Undeclared exception!
      try { 
        partial_Property0.addToCopy((-2187));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.toStringList();
      partial0.size();
      Years years0 = Years.MAX_VALUE;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        partial0.getField(6, (Chronology) copticChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 249;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 249);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      dateTimeFieldType1.getRangeDurationType();
      partial1.getChronology();
      partial_Property0.getPartial();
      // Undeclared exception!
      try { 
        partial2.toStringList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      unsupportedDateTimeField0.getType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType3;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology.getInstance(buddhistChronology0);
      dateTimeFieldType0.getField(buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-2558);
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 90;
      intArray0[6] = 1;
      Partial partial0 = new Partial(buddhistChronology0, (DateTimeFieldType[]) null, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
      Partial partial1 = partial_Property0.getPartial();
      partial1.isEqual(partial0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        partial1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = 0;
      intArray0[2] = (-2558);
      intArray0[3] = 0;
      dateTimeFieldType1.getField((Chronology) null);
      intArray0[4] = 91;
      intArray0[5] = 249;
      intArray0[6] = 90;
      intArray0[7] = 0;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 249);
      Partial partial1 = partial_Property0.getPartial();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeZone.getDefault();
      partial0.size();
      Partial partial2 = partial_Property0.getPartial();
      dateTimeFieldType1.getRangeDurationType();
      partial1.getChronology();
      Partial partial3 = partial_Property0.getPartial();
      partial2.toStringList();
      Chronology chronology0 = partial1.getChronology();
      assertNull(chronology0);
      
      partial3.toString();
      // Undeclared exception!
      try { 
        partial_Property0.addWrapFieldToCopy(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType2;
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType3;
      Partial partial1 = new Partial(strictChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1087));
      partial_Property0.getPartial();
      dateTimeFieldType3.isSupported(chronology0);
      DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Partial partial2 = new Partial(dateTimeFieldType0, 0, gregorianChronology0);
      partial2.size();
      Partial partial3 = partial_Property0.getPartial();
      dateTimeFieldType1.getRangeDurationType();
      partial3.getChronology();
      partial_Property0.getPartial();
      // Undeclared exception!
      try { 
        partial1.toStringList();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial(localDateTime0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 2119);
      ReadablePartial readablePartial0 = partial_Property0.getReadablePartial();
      DateTimeFieldType dateTimeFieldType5 = partial0.getFieldType(1);
      assertNotNull(dateTimeFieldType5);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime1 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = localDateTime1.toDateTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      dateTime0.minusMillis(1);
      Period period0 = mutablePeriod0.toPeriod();
      Partial partial1 = partial0.withPeriodAdded(period0, 1);
      assertTrue(partial1.equals((Object)readablePartial0));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      unsupportedDateTimeField0.getType();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType.dayOfMonth();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
      Minutes minutes0 = Minutes.minutes(1);
      minutes0.toStandardSeconds();
      Partial partial1 = partial0.minus(minutes0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfSecond();
      Locale locale0 = Locale.JAPAN;
      partial1.toString((String) null, locale0);
      // Undeclared exception!
      try { 
        partial1.property(dateTimeFieldType2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfSecond' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      Hours hours0 = Hours.FOUR;
      Days days0 = hours0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      seconds0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      hours0.isSupported(durationFieldType0);
      partial0.withPeriodAdded(seconds0, 7);
      partial0.size();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getReadablePartial();
      // Undeclared exception!
      try { 
        partial0.getFieldType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.toStringList();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      // Undeclared exception!
      try { 
        partial0.withFieldAdded(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Partial partial0 = new Partial(iSOChronology0);
      partial0.toStringList();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 1452);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("[]", (Locale) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Partial partial0 = new Partial(dateTimeFieldType0, (-1087), chronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1087);
      intArray0[2] = (-1087);
      intArray0[3] = (-1627);
      Partial partial1 = new Partial(partial0, intArray0);
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, (-397), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfDay < weekOfWeekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      Partial partial0 = new Partial(islamicChronology0);
      partial0.getFieldTypes();
      LocalDateTime localDateTime0 = new LocalDateTime((-1L));
      Months months0 = Months.TWO;
      int int0 = (-2849);
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, (-2849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2849
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType0.getRangeDurationType();
      Partial partial0 = new Partial(dateTimeFieldType0, 21);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      dateTimeFieldType0.isSupported(ethiopicChronology0);
      partial0.isSupported(dateTimeFieldType0);
      dateTimeFieldType0.isSupported(ethiopicChronology0);
      Partial partial2 = null;
      try {
        partial2 = new Partial(partial1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Partial partial0 = new Partial();
      int int0 = 1319;
      int int1 = (-6);
      int int2 = 523;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 523);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withDurationAdded(60L, 0);
      dateTime0.yearOfEra();
      DateTime dateTime2 = dateTime1.plusDays(0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime2, (ReadableInstant) dateTime2);
      hours0.toStandardDuration();
      Partial partial1 = partial0.withPeriodAdded(hours0, 0);
      partial1.getValues();
      partial1.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      Hours hours0 = Hours.FOUR;
      Days days0 = hours0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      seconds0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      hours0.isSupported(durationFieldType0);
      int int0 = 0;
      partial0.withPeriodAdded(seconds0, 0);
      partial0.size();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      partial_Property0.getReadablePartial();
      // Undeclared exception!
      try { 
        partial0.getFieldType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 3042;
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 3042);
      int int1 = 0;
      // Undeclared exception!
      try { 
        partial_Property0.addWrapFieldToCopy(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[6];
      intArray0[0] = (-586);
      intArray0[1] = 93;
      intArray0[2] = (-1152);
      intArray0[3] = 3305;
      intArray0[4] = 3890;
      intArray0[5] = (-5925);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = (-1289);
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, (-1289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-86399999);
      intArray0[3] = 5818;
      intArray0[4] = 100;
      intArray0[5] = (-877);
      intArray0[6] = 0;
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getDurationType();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 4803);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4803 for weekyearOfCentury must not be larger than 99
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[8] = dateTimeFieldType8;
      int[] intArray0 = new int[8];
      intArray0[0] = 1619;
      intArray0[1] = (-1404);
      intArray0[2] = 1573;
      intArray0[3] = 0;
      intArray0[4] = 60;
      intArray0[5] = 897;
      intArray0[6] = 2225;
      intArray0[7] = (-1078);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1399);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(julianChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 10080, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10080 for halfdayOfDay must not be larger than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 527;
      intArray0[1] = 93;
      intArray0[2] = 93;
      intArray0[3] = 0;
      intArray0[4] = (-1184);
      intArray0[5] = 93;
      intArray0[6] = 1;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = Period.years(1);
      DateTime dateTime0 = new DateTime((long) 93, (Chronology) ethiopicChronology0);
      Interval interval0 = new Interval(period0, dateTime0);
      Seconds seconds0 = Seconds.secondsIn(interval0);
      ethiopicChronology0.add((ReadablePeriod) seconds0, 0L, 0);
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Partial partial0 = new Partial(iSOChronology0);
      DateTimeFieldType.minuteOfDay();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      Period period0 = null;
      try {
        period0 = new Period(lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.chrono.LenientChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2041);
      intArray0[1] = 93;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
}
