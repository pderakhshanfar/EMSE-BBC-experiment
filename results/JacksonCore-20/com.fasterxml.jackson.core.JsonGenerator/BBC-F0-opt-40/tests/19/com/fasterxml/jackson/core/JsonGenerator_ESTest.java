/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:58:54 GMT 2021
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.LongUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonGenerator_ESTest extends JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)107;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 65599, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 2;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 56319;
      longArray0[6] = 0L;
      uTF8JsonGenerator0.writeArray(longArray0, 2, 1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((char[]) null, 2957, (-330));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write raw value, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 126, (ObjectCodec) null, byteArrayOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-1193));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      byteArray0[0] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1173, true);
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator1.setCodec((ObjectCodec) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      // Undeclared exception!
      try { 
        jsonGenerator1.writeString(charArray0, 2187, (int) (byte) (-102));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = (-2729);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-27);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 7, true);
      try { 
        uTF8JsonGenerator0.writeStartArray(64);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      try { 
        jsonGenerator0.writeRaw('c');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Unexpected padding character ('", "Unexpected padding character ('");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-99);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-108), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, (-108));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter2, true, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRaw("Unexpected padding character ('", (int) (byte)19, (int) (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -108
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, byteArrayBuilder0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-1336));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[8];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1548, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(5);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw('R');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(1L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("STRICT_DUPLICATE_DETECTION");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(4);
      ((JsonGenerator)uTF8JsonGenerator1)._writeSimpleObject(long0);
      assertEquals(1, uTF8JsonGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(5);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeObjectId((Object) null);
      int int0 = 3;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, false);
      // Undeclared exception!
      try { 
        filteringParserDelegate0.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = GeneratorBase.SURR1_LAST;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(56319);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, true, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.setPrettyPrinter(minimalPrettyPrinter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3797), (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      assertTrue(jsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getOutputContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 57343, false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 56319;
      try { 
        uTF8JsonGenerator1.writeArray(doubleArray0, 256, (-380));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1978), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      jsonGenerator0.setPrettyPrinter(defaultPrettyPrinter2);
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#f<;6d)@9Q?~ 0t^", true);
      long[] longArray0 = new long[9];
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1768L);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      jsonGenerator0.getSchema();
      jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'O';
      charArray0[2] = '%';
      charArray0[3] = ' ';
      charArray0[4] = '\"';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw(charArray0, 853, 110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double((-1750.4518));
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3950, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeObjectRef((Object) null);
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      int[] intArray0 = new int[10];
      uTF8JsonGenerator0.writeArray(intArray0, 2, 3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(7);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.writeStartObject();
      try { 
        filteringGeneratorDelegate0.writeNumber((float) 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.util.ByteArrayBuilder");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte) (-65), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonGeneratorDelegate0.overrideStdFeatures(0, 3750);
      assertEquals(1, jsonGenerator0.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      double[] doubleArray0 = new double[8];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 71, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocReadIOBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-32768), (ObjectCodec) null, (Writer) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, false);
      writerBasedJsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(57343);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter3, false, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      filteringGeneratorDelegate0.writeNumber(bigDecimal0);
      filteringGeneratorDelegate0.writeBoolean(true);
      assertEquals(15, filteringGeneratorDelegate0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      Byte byte0 = new Byte((byte)100);
      uTF8JsonGenerator0.writeStartObject((Object) byte0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      bigDecimal0.toBigIntegerExact();
      try { 
        jsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5323, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 3466, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("B$o}a-wGZ%", 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getOutputBuffered();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      long[] longArray0 = new long[3];
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      PrettyPrinter prettyPrinter0 = jsonGeneratorDelegate0.getPrettyPrinter();
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(prettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong((-2147483648L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.canWriteObjectId();
      Float float0 = new Float(659.751F);
      try { 
        uTF8JsonGenerator0.writeObject(float0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      AtomicLong atomicLong0 = new AtomicLong(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 4161, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'H';
      charArray0[2] = 'K';
      charArray0[3] = 'd';
      charArray0[4] = '#';
      charArray0[5] = '2';
      // Undeclared exception!
      jsonGenerator0.writeString(charArray0, 10, 3934);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3964, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.canWriteFormattedNumbers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      long[] longArray0 = new long[5];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeObject((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObject(atomicLong0);
      byteArrayBuilder0.appendTwoBytes(3);
      CharsToNameCanonicalizer.createRoot();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      jsonGeneratorDelegate0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      tokenFilter1.includeString("");
      tokenFilter1.includeRawValue();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumber((float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      char char0 = 'i';
      MockPrintStream mockPrintStream0 = new MockPrintStream("s/=a@!0Hr,8#d");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1078, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = new SerializedString("s/=a@!0Hr,8#d");
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = JsonGenerator.Feature.collectDefaults();
      assertEquals(31, int0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IS,x?|E4/", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 141, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2731), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertEquals(127, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 2326);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(2796);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue((-959));
      String string0 = ",uVYAlxVc!?O@";
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty(",uVYAlxVc!?O@");
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, true, false);
      tokenFilter0.includeRawValue();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumber((short)290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getHighestEscapedChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-115);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 815, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WRITE_NUMBERS_AS_STRINGS");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(1520);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(1520);
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, false, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.enable(jsonGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      long[] longArray0 = new long[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2988), false);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-2988));
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator1 = jsonGenerator0.disable(jsonGenerator_Feature0);
      assertEquals(3, jsonGenerator1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.setCodec((ObjectCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicInteger atomicInteger0 = new AtomicInteger(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      String string0 = " does not support schema of type '";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(" does not support schema of type '", objectArray0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 469, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      // Undeclared exception!
      try { 
        jsonGenerator0.writeObject(byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 630, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      jsonGenerator0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        jsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 56319;
      longArray0[3] = (long) 55296;
      longArray0[4] = (long) 3;
      uTF8JsonGenerator0.writeArray(longArray0, 0, 2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence(1);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter2, true, true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      filteringGeneratorDelegate0.writeStartObject((Object) list0);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '+';
      charArray0[2] = 'a';
      charArray0[3] = '`';
      charArray0[4] = 'Y';
      charArray0[5] = ';';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      tokenFilter0.includeBinary();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeEndObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.TokenFilterContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.setFeatureMask(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      stringWriter0.write("");
      writerBasedJsonGenerator0.getOutputBuffered();
      iOContext0.releaseReadIOBuffer((byte[]) null);
      writerBasedJsonGenerator0.writeNumber(";rueC{ q#[I[");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setFeatureMask(3);
      jsonGenerator0.getCodec();
      SerializedString serializedString0 = new SerializedString("\"mvxt|(~n7)");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 56319;
      longArray0[4] = 0L;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeArray(longArray0, 23, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=23, length=11) for input array of 5 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("pU<|p*GhNN!:J>+Ff");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '{';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      charArray0[4] = '$';
      charArray0[5] = '/';
      charArray0[6] = 'f';
      charArray0[7] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 699, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-129), (ObjectCodec) null, (OutputStream) null, byteArray0, (-3085), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw("pU<|p*GhNN!:J>+Ff");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3085
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      int[] intArray0 = new int[9];
      intArray0[1] = 1;
      intArray0[3] = 2;
      intArray0[7] = 2;
      intArray0[8] = 3;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1157, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      // Undeclared exception!
      try { 
        jsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[6] = 1;
      MockFile mockFile0 = new MockFile("&I1p?y\"MQgo}cB");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)109;
      byte byte0 = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2098), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeUTF8String(byteArray0, (-2098), (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2098
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("aS<EjS<y>au", "W)4_LW*:q'{+s[~ceC");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)60;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1725), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 9, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asUnquotedUTF8();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      try { 
        jsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      AtomicInteger atomicInteger0 = new AtomicInteger(1000);
      IOContext iOContext1 = new IOContext(bufferRecycler1, atomicInteger0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X:4UYuL.5YIm=P");
      IOContext iOContext2 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 56319;
      intArray0[2] = (int) (byte)47;
      intArray0[3] = 0;
      intArray0[2] = (int) (byte)3;
      intArray0[5] = 0;
      intArray0[6] = 3;
      uTF8JsonGenerator1.writeArray(intArray0, 0, (-60));
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4786), false);
      uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int[] intArray0 = new int[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1367, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2379.5035));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write((-1830));
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1608, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber((short)346);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 1;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-756), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2374), true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence((-1));
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(56320);
      // Undeclared exception!
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._writeSimpleObject(atomicInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("h");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.canWriteTypeId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      double[] doubleArray0 = new double[9];
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 1);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonGeneratorDelegate0.writeStartObject();
      try { 
        jsonGenerator0.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Byte byte0 = new Byte((byte) (-97));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4782, (ObjectCodec) null, printStream0, byteArray0, (byte) (-111), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      uTF8JsonGenerator0.flush();
      assertEquals(4782, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-1045));
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("0,Det= p40j");
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue(9);
      TokenFilter tokenFilter4 = tokenFilter3.filterStartArray();
      TokenFilter tokenFilter5 = tokenFilter4.filterStartArray();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2204, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1200), true);
      TokenFilter tokenFilter6 = tokenFilter5.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter6, false, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter3, false, false);
      tokenFilter5.includeBinary();
      filteringGeneratorDelegate1.getDelegate();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeObject("0,Det= p40j");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1200
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 190, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 57, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(33);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue((-1028));
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty("1\"eNp4/'buC`yygi8O");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter3, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeString("No native support for writing Type Ids");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 1, (-2216));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      Byte byte0 = new Byte((byte)10);
      jsonGeneratorDelegate0.writeStartObject((Object) byte0);
      try { 
        jsonGeneratorDelegate0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObject(atomicLong0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      uTF8JsonGenerator0.version();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      uTF8JsonGenerator0.writeStartArray();
      iOContext1.withEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 56319);
      int[] intArray0 = new int[6];
      intArray0[0] = 56319;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1168;
      intArray0[5] = 481;
      uTF8JsonGenerator0.writeArray(intArray0, 0, (-4034));
      uTF8JsonGenerator0.getOutputContext();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-2810));
      assertSame(tokenFilter0, tokenFilter1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8233, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2331, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      String string0 = "h";
      StringReader stringReader0 = new StringReader("h");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumber(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-5661));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, true, true);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-5661));
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append(3460);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator jsonGenerator1 = jsonGenerator0.setFeatureMask(6);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator2 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator2, tokenFilter1, false, true);
      filteringGeneratorDelegate0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        jsonGenerator1.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-353), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1369), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 2);
      JsonGenerator jsonGenerator1 = jsonGenerator0.setCodec((ObjectCodec) null);
      assertEquals(127, jsonGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong();
      atomicLong0.incrementAndGet();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"", false);
      double[] doubleArray0 = new double[16];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(3425);
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue(3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.isClosed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      int[] intArray0 = new int[1];
      uTF8JsonGenerator0.writeArray(intArray0, 0, 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.writeStartObject();
      try { 
        filteringGeneratorDelegate0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      try { 
        jsonGenerator0.writeBooleanField("No native support for writing Type Ids", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 477, (ObjectCodec) null, mockPrintStream0, byteArray0, 477, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumber((-1450));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)39);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      pipedOutputStream0.close();
      byteArray0[1] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 57343;
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 9, (-1068));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)7;
      byte byte0 = (byte) (-20);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-21), (byte)7);
      int int0 = 32;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)108;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-795), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      jsonGenerator0.setHighestNonEscapedChar((byte)5);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      try { 
        filteringGeneratorDelegate0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, (OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      String string0 = "_Sr@%7Uo4jg21@H";
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeRaw("_Sr@%7Uo4jg21@H");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2039;
      longArray0[2] = 0L;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1768, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-960));
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue((-385));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter2, false, false);
      JsonGenerator jsonGenerator0 = filteringGeneratorDelegate0.setRootValueSeparator((SerializableString) null);
      assertEquals(127, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      long[] longArray0 = new long[5];
      uTF8JsonGenerator0.writeArray(longArray0, 2, 2);
      Random.setNextRandom(1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 3284, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 790, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3196, false);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1;
      longArray0[2] = 421L;
      longArray0[3] = (long) 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 1396, (-2796));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w~0<K#?7f|NOS*");
      long[] longArray0 = new long[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 56320;
      doubleArray0[4] = (double) 2;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeArray(doubleArray0, 0, (int) (byte)34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=0, length=34) for input array of 5 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      byteArrayBuilder0.appendThreeBytes(42);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      ((JsonGenerator)uTF8JsonGenerator1)._verifyOffsets(1, 0, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-529), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.getOutputTarget();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-1978));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'K';
      charArray0[2] = '`';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 126, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 126
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)67, (byte)42);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)67, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-101), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator jsonGenerator1 = jsonGenerator0.setFeatureMask(582);
      assertEquals(0, jsonGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)7);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[1];
      uTF8JsonGenerator0.writeArray(intArray0, 0, 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1052);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Owu");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2285, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      JsonGenerator jsonGenerator1 = filteringGeneratorDelegate0.setCodec((ObjectCodec) null);
      assertEquals(127, jsonGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      atomicLong0.incrementAndGet();
      String string0 = "w~0<K#?7fc|NOS*";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w~0<K#?7fc|NOS*", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      long[] longArray0 = new long[14];
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 1, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeObject((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      Byte byte0 = new Byte((byte) (-48));
      uTF8JsonGenerator0.writeObject(byte0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-48);
      intArray0[2] = 2660;
      intArray0[3] = 56319;
      intArray0[4] = 2;
      intArray0[5] = 57343;
      intArray0[6] = 57343;
      intArray0[7] = (int) (byte) (-48);
      uTF8JsonGenerator0.writeArray(intArray0, 2, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ycP/eDct{[?h");
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeEndArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setRootValueSeparator(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecing lsig G\"' for nam.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[4];
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-1808), 2460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecing lsig G\"' for nam.", false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      iOContext0.allocTokenBuffer(56320);
      SerializedString serializedString0 = new SerializedString("4");
      serializedString0.asQuotedUTF8();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      String string0 = ")I.*.8";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(")I.*.8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 31, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3457, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2961), (byte)10);
      try { 
        jsonGenerator0.writeNumber((double) (byte)10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecing lsig '\"' for name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-2580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(165);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 977, (ObjectCodec) null, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("&S$_>k");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter2, true, true);
      // Undeclared exception!
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short)5);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 32, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      try { 
        jsonGenerator0.writeRawUTF8String(byteArray0, (-667), (-101));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      AtomicInteger atomicInteger0 = new AtomicInteger(1000);
      IOContext iOContext1 = new IOContext(bufferRecycler1, atomicInteger0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 56319;
      intArray0[2] = (int) (byte)47;
      intArray0[3] = 0;
      intArray0[2] = (int) (byte)3;
      intArray0[5] = 0;
      intArray0[6] = 3;
      try { 
        uTF8JsonGenerator1.writeArray(intArray0, 0, (-60));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 33, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[0];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      assertEquals(7, writerBasedJsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      filterOutputStream0.write(762);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 32, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonGeneratorDelegate0.getDelegate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeBinary((InputStream) pipedInputStream0, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.canWriteBinaryNatively();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("bE_Hzq>DSR6'p:gw");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2027, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-13), false);
      mockPrintStream0.close();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.writeNumber("pU~v~5N");
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.version();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumber(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      writerBasedJsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, true);
      try { 
        filteringGeneratorDelegate0.writeObjectId(bufferRecycler0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getSchema();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      filteringGeneratorDelegate0.writeBinary((InputStream) sequenceInputStream0, 56320);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeRaw(charArray0, 861, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      String string0 = "GgzFV2Ce#A`F7";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GgzFV2Ce#A`F7", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      try { 
        uTF8JsonGenerator0.writeRawValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write raw value, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=[w~V0<^?m7Nv*O:*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[8];
      uTF8JsonGenerator0.writeArray(longArray0, 1, 0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecting losig '\"' for name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[3];
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(": ws expecting losig '\"' for name");
      uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-4812));
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeNumberField(": ws expecting losig '\"' for name", 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecting losig '\"' for name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[3];
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 1477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, dataOutputStream0, byteArray0, 8, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (-2594.983429);
      doubleArray0[2] = (double) 56319;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 512, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      jsonGenerator0.writeStartArray(1368);
      tokenFilter0.includeRootValue(4412);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(1575L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      TokenFilter tokenFilter0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObjectId((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-167), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-972), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-39), uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(507);
      tokenFilter2.includeRawValue();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      filteringGeneratorDelegate0.getFilterContext();
      String string0 = "YM=)wzfmP@ l(/WO)";
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRawValue("YM=)wzfmP@ l(/WO)", 2, 507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(56320);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      tokenFilter2.includeRawValue();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.negate();
      filteringGeneratorDelegate0.writeNumber(bigDecimal0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(55296);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1944), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecting losig '\"' for name", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[6];
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 2);
      uTF8JsonGenerator0.writeStartObject((Object) iOContext0);
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = true;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      String string0 = "TX";
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeFieldName("TX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObject(atomicLong0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 56319);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArrayBuilder0.NO_BYTES, 57343, 56320, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 56319;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1168;
      intArray0[5] = 481;
      uTF8JsonGenerator0.writeArray(intArray0, 0, (-4034));
      uTF8JsonGenerator0.getOutputContext();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-2810));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      try { 
        filteringGeneratorDelegate0.writeEmbeddedObject((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing embedded objects
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-854));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[12];
      uTF8JsonGenerator0.writeArray(intArray0, 2, 3);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Lx");
      charsToNameCanonicalizer0.makeChild(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dCW$lu9k");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte) (-24);
      iOContext0.allocWriteEncodingBuffer((int) (byte) (-24));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4412), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-4412), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4412
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      atomicLong0.getAndSet(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4126), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeObject((Object) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.copyCurrentEvent((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ws expecting losig '\"' for name");
      double[] doubleArray0 = new double[6];
      Float float0 = new Float((float) 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-8), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("7");
      TokenFilter tokenFilter3 = tokenFilter2.includeElement((byte)64);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter3, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumber(": ws expecting losig '\"' for name");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-854));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[12];
      uTF8JsonGenerator0.writeArray(intArray0, 2, 3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.writeStartObject((Object) short0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        filteringGeneratorDelegate0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.getCharacterEscapes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeEmbeddedObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicInteger atomicInteger0 = new AtomicInteger(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)33, false);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(180);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1*");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-27), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2309, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2, 2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("inI4]1X.|GVPlY");
      byteArrayBuilder0.release();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter3, false, false);
      try { 
        filteringGeneratorDelegate0.writeFieldId(532L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      JsonGeneratorDelegate jsonGeneratorDelegate2 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate2.disable(jsonGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1206);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      uTF8JsonGenerator0.getFormatFeatures();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      try { 
        jsonGeneratorDelegate0.writeFieldId((-2147483648L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "RITE_BI7DECIMAL_AS_QLAIN";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RITE_BI7DECIMAL_AS_QLAIN", false);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2442);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "RITE_BI7DECIMAL_AS_QLAIN", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1392), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw('>');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1392
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.getSchema();
      AtomicLong atomicLong0 = new AtomicLong(0);
      filteringGeneratorDelegate0.writeObjectField("@-L`Rq/@GcaBy;)JP|j", atomicLong0);
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate1.overrideStdFeatures(48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Lx");
      charsToNameCanonicalizer0.makeChild(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dCW$lu9k");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-24);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4412), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-4412), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4412
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{i2}2BC=(Y*DKc");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)528);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'J';
      charArray0[2] = ']';
      charArray0[3] = ',';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawValue(charArray0, 8, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty(":,|\"VOjwW?vm");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, true, false);
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-9223372036854775808L);
      longArray0[2] = 387L;
      longArray0[3] = 432L;
      longArray0[4] = (-50L);
      longArray0[5] = 544L;
      longArray0[6] = (-3900L);
      longArray0[7] = 1L;
      longArray0[8] = (-103L);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeArray(longArray0, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-27);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 7, true);
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, (-2729));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObjectField("kJ,tC>YUepL7s7m8#.", "kJ,tC>YUepL7s7m8#.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_Feature0.enabledIn(12000);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1668, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jsonGeneratorDelegate0.writeBinary((InputStream) byteArrayInputStream0, 102);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate1.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Byte byte0 = new Byte((byte) (-92));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-1021), 1787);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1384), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getSchema();
      boolean boolean0 = jsonGenerator0.canUseSchema((FormatSchema) null);
      assertFalse(boolean0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1*");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1694, false);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 56319;
      intArray0[3] = 33;
      intArray0[4] = 1694;
      intArray0[5] = 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 201);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      StringReader stringReader0 = new StringReader(": was expecting closing '\"' for name");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (-57));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jsonGeneratorDelegate0.writeStartObject((Object) atomicBoolean0);
      String string0 = "!cFm6+&@x*if";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObjectField("!cFm6+&@x*if", bufferRecycler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.BufferRecycler)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AtomicInteger atomicInteger0 = new AtomicInteger((-741));
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1478, (ObjectCodec) null, pipedOutputStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      StringReader stringReader0 = new StringReader("x)+#|[5{-fJ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, true);
      double[] doubleArray0 = new double[1];
      pipedOutputStream0.close();
      doubleArray0[0] = (double) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=3, length=1) for input array of 1 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.overrideStdFeatures(3, 1);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2, charArray0, 12232, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-854));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int[] intArray0 = new int[7];
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("a=qv; EWL{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-217), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 311, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._verifyOffsets(2, 1, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=1, length=5) for input array of 2 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      AtomicInteger atomicInteger0 = new AtomicInteger(1327);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObjectRef(atomicInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      StringReader stringReader0 = new StringReader(": was expecting closing '\"' for name");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2658));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2658), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, true);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2658);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 33;
      doubleArray0[6] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-854));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[7];
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      short short0 = (short) (-854);
      Short short1 = new Short((short) (-854));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int[] intArray0 = new int[7];
      Double double0 = new Double((-1582.2459256733));
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)80, false);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write((-2665));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-903), (ObjectCodec) null, pipedOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      jsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(10);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter2, true, true);
      filteringGeneratorDelegate0.writeRaw("");
      int int0 = filteringGeneratorDelegate0.getFeatureMask();
      assertEquals((-903), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int[] intArray0 = new int[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 413, (ObjectCodec) null, pipedOutputStream0, byteArray0, 92, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      try { 
        jsonGeneratorDelegate0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)105;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeUTF8String(byteArray0, (byte)105, (byte)30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No native support for writing embedded objects");
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "No native support for writing embedded objects", false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 408, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber("~+yVqVZ(JMnX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("7(q*]6G[Dysl?scRwe", "7(q*]6G[Dysl?scRwe");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7(q*]6G[Dysl?scRwe", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Double double0 = new Double(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      String string0 = "aeXLw";
      MockFile.createTempFile("aeXLw", "t:wUloL2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t:wUloL2", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-495), (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-495);
      longArray0[1] = (long) 56320;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 56319;
      longArray0[4] = (long) 2;
      uTF8JsonGenerator0.writeArray(longArray0, 1, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObject(mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed org.evosuite.runtime.mock.java.io.MockFileOutputStream)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = Long.valueOf(1L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)126;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 417, (ObjectCodec) null, printStream0, byteArray0, (-2607), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2607
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 6, (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.disable(jsonGenerator_Feature0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
      assertEquals(6, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "\\as(35|";
      MockFile.createTempFile("as(35|", "as(35|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(35|");
      long[] longArray0 = new long[7];
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      long long0 = 876L;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeFieldId(876L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-7);
      filteringGeneratorDelegate0.writeBinaryField((String) null, byteArray0);
      filteringGeneratorDelegate0.getFormatFeatures();
      filteringGeneratorDelegate0.writeString("");
      filteringGeneratorDelegate0.getOutputContext();
      filteringGeneratorDelegate0.writeBoolean(false);
      Short short0 = new Short((short)165);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setCurrentValue(short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();
      atomicLong0.getAndUpdate(longUnaryOperator0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-48), 2032);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("`+");
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.getFeatureMask();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
      jsonGeneratorDelegate0.setCodec((ObjectCodec) null);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(35|", "as(35|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(35|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(2);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence(56320);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.overrideStdFeatures(0, (-21));
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '=';
      charArray0[2] = 'S';
      charArray0[3] = 'I';
      charArray0[4] = '{';
      charArray0[5] = '3';
      charArray0[6] = 'x';
      charArray0[7] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 345, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(35|", "as(35|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(35|", true);
      atomicLong0.compareAndSet(3, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(2);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      AtomicLong atomicLong0 = new AtomicLong(31);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float(191.53998844);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0);
      Byte byte0 = new Byte((byte)5);
      uTF8JsonGenerator0.writeObject(byte0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 755.66;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Byte byte0 = new Byte((byte)117);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonGeneratorDelegate0.overrideStdFeatures(55296, 33);
      assertEquals(14, jsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/\\as(35|0\\as(35|");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile.createTempFile("as(35|", "as(35|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(35|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(2);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      mockFileOutputStream0.release();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(35|", "as(35|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(35|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(2);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      uTF8JsonGenerator0.getOutputContext();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      mockFileOutputStream0.getChannel();
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2026);
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty("as(35|");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.writeBoolean(false);
      assertEquals(8, filteringGeneratorDelegate0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-835));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      StringReader stringReader0 = new StringReader("I");
      stringReader0.skip(0L);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-699), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.copyCurrentEvent((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 788, (ObjectCodec) null, pipedOutputStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      StringReader stringReader0 = new StringReader("/");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1035, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-104);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 2, (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " does not support schema of type '", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2389, (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
      
      JsonGenerator jsonGenerator1 = jsonGenerator0.setFeatureMask((-1657));
      assertEquals(127, jsonGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-835));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte) (-128);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2770), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name", true);
      atomicLong0.incrementAndGet();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      double[] doubleArray0 = new double[7];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._writeSimpleObject(jsonpCharacterEscapes0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.JsonpCharacterEscapes)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[7];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.overrideFormatFeatures(31, (-321));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      char[] charArray0 = new char[4];
      char char0 = ';';
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.canWriteObjectId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(3|", "as(3|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(3|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      iOContext0.allocNameCopyBuffer(2);
      long[] longArray0 = new long[7];
      uTF8JsonGenerator0.writeArray(longArray0, 0, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.overrideStdFeatures(506, 988);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("`*~$L+|^c]o+Z1Y");
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'V';
      charArray0[2] = 'n';
      charArray0[3] = 'T';
      charArray0[4] = '?';
      charArray0[5] = 'w';
      charArray0[6] = '{';
      charArray0[7] = ']';
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRawValue(charArray0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3670, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3284, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(3284, 195);
      // Undeclared exception!
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._throwInternal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f9@4)]9");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_Feature0.enabledIn((-665));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(95);
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("");
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRaw('f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      double[] doubleArray0 = new double[5];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1671), (ObjectCodec) null, byteArrayBuilder0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger bigInteger0 = new BigInteger(1, mockRandom0);
      uTF8JsonGenerator0.writeObject(bigInteger0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      try { 
        jsonGeneratorDelegate0.writeObjectFieldStart("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      BigDecimal bigDecimal1 = bigDecimal0.abs();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal1.subtract(bigDecimal0, mathContext0);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext1 = new MathContext(55296, roundingMode0);
      bigDecimal0.divideAndRemainder(bigDecimal1, mathContext1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "peig3a`xZt0z?{");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      int int0 = 114;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 2116, 114);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = ": was expecting closing '\"' for name";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString(": was expecting closing '\"' for name");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawUTF8String((byte[]) null, 55296, 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(10);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 789, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 10);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(1491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      Long long0 = new Long((-9223372036854775808L));
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeStartObject((Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      AtomicInteger atomicInteger0 = new AtomicInteger();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charArray0[0] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4, (-51), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3053, (ObjectCodec) null, (Writer) null);
      int int0 = writerBasedJsonGenerator0.getHighestEscapedChar();
      assertEquals(127, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-939));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      jsonGenerator0.setCurrentValue((Object) null);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator0.enable(jsonGenerator_Feature1);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-851));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[9];
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.getOutputBuffered();
      StringReader stringReader0 = new StringReader("2MyNc2~bf`]hf.W8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      pipedOutputStream0.close();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1327), 2271, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)73;
      readerBasedJsonParser0.setRequestPayloadOnError(byteArray0, "2MyNc2~bf`]hf.W8");
      readerBasedJsonParser0.skipChildren();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 'A';
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) 2271;
      doubleArray0[4] = (double) 56320;
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, (-3036));
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.writeOmittedField("");
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2574, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObject(atomicLong0);
      AtomicInteger atomicInteger0 = new AtomicInteger(1183);
      uTF8JsonGenerator0.writeObject(atomicInteger0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(3|", "as(3|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(3|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.flush();
      uTF8JsonGenerator0.writeBoolean(true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.writeObjectFieldStart((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      atomicLong0.addAndGet((-2103L));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeTypeId(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Type Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GgzFV2Ce#A`F7", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldId(3);
      try { 
        uTF8JsonGenerator0.writeObjectFieldStart("GgzFV2Ce#A`F7");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.getPrettyPrinter();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      AtomicInteger atomicInteger0 = new AtomicInteger();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString(".i|m");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2139);
      jsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (int) (byte) (-12));
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(3|", "as(3|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(3|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[7];
      mockFileOutputStream0.flush();
      longArray0[3] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1164));
      int int0 = GeneratorBase.SURR2_FIRST;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 3);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (int) (byte)32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 24 bytes (out of 32)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Generator of type ", false);
      mockFileOutputStream0.flush();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1164));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2785, true);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1164);
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1164);
      longArray0[5] = (long) 2785;
      longArray0[6] = (long) (-1164);
      longArray0[7] = (long) 3;
      longArray0[8] = (long) 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("as(3|", "as(3|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("as(3|", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.writeNullField("as(3|");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringReader stringReader0 = new StringReader("as(3|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4016), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, true);
      // Undeclared exception!
      try { 
        filteringParserDelegate0.readValueAsTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("ZgzFV2^e#WA`F7");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1864, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)110, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getPrettyPrinter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "q";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      uTF8JsonGenerator0.writeObject(bigDecimal0);
      uTF8JsonGenerator0.writeObject((Object) null);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": was expecting closing '\"' for name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      mockFileOutputStream0.flush();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      try { 
        uTF8JsonGenerator0.writeObjectField("", atomicBoolean0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.getOutputBuffered();
      boolean boolean0 = false;
      String string0 = "2MyNc2~bf`]hf.W8";
      StringReader stringReader0 = new StringReader("2MyNc2~bf`]hf.W8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1323), 2271, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      try { 
        uTF8JsonGenerator0.copyCurrentEvent(jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current event to copy
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Array but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":as expecting closing '\"Kfor name");
      atomicLong0.decrementAndGet();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.setHighestNonEscapedChar((-595));
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-3149), true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeNumberField(";ZzFV2^ea#W`7", (int) (byte)0);
      try { 
        filteringGeneratorDelegate0.writeEmbeddedObject((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing embedded objects
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*T");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("*T");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, (TokenFilter) null, true, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setHighestNonEscapedChar((-705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getCurrentValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.canOmitFields();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5812), (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator1 = jsonGenerator0.enable(jsonGenerator_Feature0);
      jsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.canOmitFields();
      jsonGenerator1.writeStartObject((Object) bufferRecycler0);
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(829L);
      IOContext iOContext0 = new IOContext(bufferRecycler1, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=A d");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8088, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      try { 
        filteringGeneratorDelegate0.writeBinary(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1446), 33, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.copyCurrentStructure((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-72);
      byte byte0 = (byte) (-66);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeBinary((InputStream) null, (-536));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA``N7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA``N7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      System.setCurrentTimeMillis((-2147483648L));
      uTF8JsonGenerator0.getFeatureMask();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      mockFileOutputStream0.flush();
      longArray0[3] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1164));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.setFeatureMask(8);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      byte[] byteArray0 = new byte[3];
      file0.delete();
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)1;
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeUTF8String(byteArray0, (byte) (-64), (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -64
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, false);
      char[] charArray0 = new char[3];
      filteringGeneratorDelegate0.writeNumber("i0?x&TWC2E3");
      charArray0[0] = '<';
      charArray0[1] = ']';
      charArray0[2] = '#';
      filteringGeneratorDelegate0.writeString(charArray0, (-905), (-905));
      filteringGeneratorDelegate0.writeNumberField("", 634.2366F);
      filteringGeneratorDelegate0.writeArrayFieldStart("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      mockFileOutputStream0.flush();
      longArray0[3] = (long) 56319;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1164));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue((-845));
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty("ZgzFV2^e#WA`F7");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, false);
      filteringGeneratorDelegate0.setCodec((ObjectCodec) null);
      filteringGeneratorDelegate0.writeOmittedField("");
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getMatchCount();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.useDefaultPrettyPrinter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1391);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      PrettyPrinter prettyPrinter0 = filteringGeneratorDelegate0.getPrettyPrinter();
      prettyPrinter0.writeEndObject(jsonGenerator0, 56319);
      uTF8JsonGenerator0.setPrettyPrinter(prettyPrinter0);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      file0.setReadable(true, true);
      double[] doubleArray0 = new double[10];
      try { 
        uTF8JsonGenerator0.writeFieldName("&YL!mS}T<\"yG~#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      mockFileOutputStream0.flush();
      longArray0[3] = (long) 56319;
      longArray0[4] = (long) 1;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1163));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = uTF8JsonGenerator0.getHighestEscapedChar();
      assertEquals(0, int0);
      
      uTF8JsonGenerator0.getCurrentValue();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-90);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 2047, 1166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      Short short0 = new Short((short) (-3358));
      uTF8JsonGenerator0.writeObject(short0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObject(jsonEncoding0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.JsonEncoding)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA`7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56320);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 128, (byte)0);
      try { 
        uTF8JsonGenerator0.writeObjectRef(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55296);
      jsonGeneratorDelegate0.isClosed();
      jsonGeneratorDelegate0.writeNumber("");
      assertEquals(8, jsonGeneratorDelegate0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55296);
      jsonGeneratorDelegate0.overrideStdFeatures(0, 1650);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-41);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-538), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      jsonGenerator0.getSchema();
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'Z';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-538), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -538
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 56319;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 0;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1163));
      double[] doubleArray0 = new double[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[0] = (-2934.57461425);
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 56320;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1563);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.version();
      assertEquals(35L, file0.length());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append(3460);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      jsonGenerator0.setFeatureMask(6);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(63);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator1, tokenFilter2, false, true);
      filteringGeneratorDelegate0.writeStartObject();
      assertEquals(6, jsonGenerator1.getFeatureMask());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3135, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 761, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber((short)876);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      long[] longArray0 = new long[9];
      longArray0[0] = (-948L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 57343;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 57343;
      longArray0[6] = (long) 56319;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 2;
      uTF8JsonGenerator0.writeArray(longArray0, 2, 2);
      boolean boolean1 = false;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      String string0 = "1";
      try { 
        jsonGeneratorDelegate0.writeNullField("1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getFilter();
      JsonStreamContext jsonStreamContext0 = filteringGeneratorDelegate0.getOutputContext();
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = false;
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 57343;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      uTF8JsonGenerator0.writeArray(longArray0, 0, 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeBinary(byteArray0, (int) (byte)0, (int) (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 56319;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 0;
      uTF8JsonGenerator0.writeArray(longArray0, 0, (-1163));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Long long0 = new Long(0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "WRITE_NUMBERS_AS_STRINGS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((long[]) null, (-1078), 59050);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null array
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short) (-848));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 1, 1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter2 = tokenFilter0.filterStartObject();
      tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      try { 
        filteringGeneratorDelegate0.writeObjectRef(tokenFilter1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(31);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate1.setCharacterEscapes(jsonpCharacterEscapes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(31);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 55296;
      longArray0[1] = (long) 57343;
      longArray0[2] = (long) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 272, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=272, length=10) for input array of 3 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA`7", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 3;
      uTF8JsonGenerator0.setCurrentValue(iOContext0);
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56320);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(0);
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      uTF8JsonGenerator0.getSchema();
      filteringGeneratorDelegate0.canUseSchema((FormatSchema) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '{';
      charArray0[2] = 'N';
      charArray0[3] = '[';
      filteringGeneratorDelegate0.writeRawValue(charArray0, (-1281), (-1281));
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(829L);
      IOContext iOContext0 = new IOContext(bufferRecycler1, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=A d");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8088, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.writeBinary(byteArray0);
      try { 
        filteringGeneratorDelegate0.writeNumberField("", (float) 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      try { 
        jsonGenerator0.writeFieldId(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      tokenFilter0.includeRootValue(57343);
      tokenFilter0.filterStartArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializedString serializedString0 = new SerializedString("ZgzFV2^e#WA`F7");
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(4885L);
      byte byte0 = (byte)77;
      Byte byte1 = Byte.valueOf((byte)77);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte1, true);
      String string0 = "ZgzFV2^e#WA`F7";
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "!b9G'rB+DQNDPQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)77, (ObjectCodec) null, mockFileOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence(1433);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-827));
      int int0 = 32;
      byteArrayBuilder0.reset();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1403), (ObjectCodec) null, stringWriter0);
      Byte byte0 = new Byte((byte)64);
      try { 
        writerBasedJsonGenerator0.writeTypeId(byte0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Type Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA`7", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56320);
      uTF8JsonGenerator0.getOutputTarget();
      boolean boolean0 = uTF8JsonGenerator0.canWriteFormattedNumbers();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getFilter();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.isEnabled(jsonGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZzFV2^e#WA`7", true);
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56320);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      boolean boolean0 = uTF8JsonGenerator0.isEnabled(jsonGenerator_Feature0);
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      atomicLong0.getAndAdd(0);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      jsonGenerator0.writeStartArray(63);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(2);
      iOContext0.allocReadIOBuffer(4);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      jsonGenerator0.writeNumber((-9223372036854775808L));
      jsonGenerator0.canWriteBinaryNatively();
      uTF8JsonGenerator0.writeObject(atomicLong0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObject(bufferRecycler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.BufferRecycler)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1052, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '3';
      stringWriter0.flush();
      charArray0[2] = '|';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 2);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      jsonGeneratorDelegate0.writeNumber(1000000000L);
      jsonGeneratorDelegate0.flush();
      jsonGeneratorDelegate0.getHighestEscapedChar();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56319, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short)4);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      uTF8JsonGenerator0.writeArray(intArray0, 1052, (-2669));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter2 = tokenFilter0.filterStartObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      tokenFilter2.includeRootValue(56320);
      tokenFilter1.filterStartArray();
      uTF8JsonGenerator0.writeNumber(0.0F);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      Byte byte0 = new Byte((byte)100);
      uTF8JsonGenerator0.writeStartObject((Object) byte0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      bigDecimal0.toBigIntegerExact();
      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3591);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, false, true);
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.getFeatureMask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", true);
      Byte byte0 = new Byte((byte)14);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((int[]) null, (-1574), 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null array
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((-1862.0F));
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(!fD", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 33;
      intArray0[2] = 0;
      intArray0[3] = 1;
      uTF8JsonGenerator0.writeArray(intArray0, 0, 3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      tokenFilter0.filterStartObject();
      tokenFilter0.filterStartArray();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-943), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=-943, length=3) for input array of 2 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getOutputTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(2);
      Long long0 = new Long(1);
      uTF8JsonGenerator0.writeObject(long0);
      uTF8JsonGenerator0.writeObject((Object) null);
      double[] doubleArray0 = null;
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2);
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty((String) null);
      TokenFilter tokenFilter4 = tokenFilter3.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter4, false, false);
      CharsToNameCanonicalizer.createRoot();
      tokenFilter0.includeElement(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate2 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter2, false, false);
      byte[] byteArray0 = new byte[0];
      filteringGeneratorDelegate2.writeBinary(byteArray0, (int) (byte) (-81), (int) (byte) (-81));
      try { 
        uTF8JsonGenerator0.writeObjectFieldStart((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1521), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2091), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      jsonGenerator0.getCharacterEscapes();
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("=.hBROI0`e", "=.hBROI0`e");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1382);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(2);
      TokenFilter tokenFilter3 = tokenFilter0.filterStartArray();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 747, (ObjectCodec) null, mockFileOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, true, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      TokenFilter tokenFilter4 = tokenFilter3.includeProperty("CCOBe%?:,*3+");
      tokenFilter4.includeRootValue(1);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter0, true, false);
      try { 
        jsonGeneratorDelegate0.writeNullField("=.hBROI0`e");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      mockFile0.createNewFile();
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 56320;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.writeObject("ZgzFV2^e#WA`F7");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("No native support for writing embedded objects");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCurrentValue();
      try { 
        uTF8JsonGenerator0.writeObjectId((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-695), (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw("IBTq,yBlL", 192, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(0.0);
      Float float0 = new Float(378.699);
      uTF8JsonGenerator0.writeObject(float0);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      uTF8JsonGenerator0.writeObject(atomicBoolean1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, double0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3347, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeArray((double[]) null, 0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null array
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      tokenFilter1.includeRootValue(31);
      tokenFilter0.filterStartArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      tokenFilter1.includeRootValue(3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, true, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNullField("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      int[] intArray0 = new int[8];
      intArray0[0] = 56319;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 56320;
      intArray0[4] = 57343;
      intArray0[5] = 57343;
      intArray0[6] = (-1080);
      intArray0[7] = (-1080);
      uTF8JsonGenerator0.writeArray(intArray0, 1, 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter0.filterStartObject();
      tokenFilter1.filterStartArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      tokenFilter2.includeRootValue(1);
      TokenFilter tokenFilter3 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2778), (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(856.01326088725);
      uTF8JsonGenerator0.writeObject((Object) null);
      byteArrayBuilder0.appendThreeBytes((-1253));
      Boolean boolean0 = new Boolean(true);
      uTF8JsonGenerator0.writeObject(boolean0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, 3, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null array
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short)4);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      uTF8JsonGenerator0.writeArray(intArray0, 1052, (-2669));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(56320);
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      tokenFilter0.includeRootValue((-2019));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter3, true, true);
      Random.setNextRandom((-2013));
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence((-2669));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("=.hBROI0`e", "=.hBROI0`e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter3 = tokenFilter1.includeElement((-53));
      FilteringGeneratorDelegate filteringGeneratorDelegate2 = new FilteringGeneratorDelegate(filteringGeneratorDelegate1, tokenFilter3, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeBinary(byteArray0, 56320, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56320
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short)4);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1814;
      uTF8JsonGenerator0.writeArray(intArray0, 1052, (-2669));
      Integer integer0 = new Integer(1);
      uTF8JsonGenerator0.writeObject(integer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      String string0 = "ZgzFV2^e#WA`F7";
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.writeStartObject();
      mockFile0.createNewFile();
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 56320;
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "R");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeObject("ZgzFV2^e#WA`F7");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 55296;
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, (-452));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0);
      Double double0 = new Double(2);
      uTF8JsonGenerator0.writeObject(atomicLong0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      CharsToNameCanonicalizer.createRoot();
      tokenFilter1.includeRawValue();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("=.hBROI0`e", "=.hBROI0`e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockFileOutputStream0);
      Double double0 = new Double(57343);
      uTF8JsonGenerator0.writeObject(double0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString0 = new SerializedString("");
      filteringGeneratorDelegate0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter3 = tokenFilter1.includeElement(2608);
      assertSame(tokenFilter3, tokenFilter2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("=.hBROI0`e", "=.hBROI0`e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockFileOutputStream0);
      Double double0 = new Double(57343);
      uTF8JsonGenerator0.writeObject(double0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(56320);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(1272);
      TokenFilter tokenFilter3 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter4 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocTokenBuffer(9);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, true);
      filteringGeneratorDelegate0.writeNumber(2444.0);
      filteringGeneratorDelegate0.getOutputTarget();
      assertEquals(14, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, atomicLong0, true);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      CharsToNameCanonicalizer.createRoot();
      filteringGeneratorDelegate0.getSchema();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      Short short0 = new Short((short)4);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1814;
      uTF8JsonGenerator0.writeArray(intArray0, 1052, (-2669));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(56320);
      tokenFilter2.filterStartArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      boolean boolean0 = true;
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        jsonGeneratorDelegate1.writeEmbeddedObject((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing embedded objects
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile mockFile0 = new MockFile("ZgFV2^e#WA`F7", "ZgFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      mockFile0.setWritable(false, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      jsonGenerator0.canWriteTypeId();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 398, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.writeNumberField("", bigDecimal0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate1.writeBooleanField("ZgzFV2^e#WA`F7", true);
      filteringGeneratorDelegate1.setHighestNonEscapedChar(57343);
      assertEquals(398, jsonGenerator0.getFeatureMask());
      assertEquals(398, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(31);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 0, 1814);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=0, length=1814) for input array of 1 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(31);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.overrideStdFeatures(5, 1619);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeNumber((long) 3);
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1517, (byte) (-64));
      try { 
        uTF8JsonGenerator0.writeEmbeddedObject(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing embedded objects
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)96;
      filteringGeneratorDelegate0.writeBinaryField("ZgzFV2^e#WA`F7", byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      filteringGeneratorDelegate0.writeNumberField("dLw3;#,E", 511.6031891);
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-121);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeBinaryField("?Q=QePOUv+\tvP0+R", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`NF7", "ZgzFV2^e#WA`NF7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      try { 
        jsonGeneratorDelegate0.writeNumberField("ZgzFV2^e#WA`NF7", 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();
      atomicLong0.getAndUpdate(longUnaryOperator0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1294, 3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeArrayFieldStart("#>)BN,6(+En8O");
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate1.writeNumber(0.0);
      assertEquals(0, filteringGeneratorDelegate1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`NF7", "ZgzFV2^e#WA`NF7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`NF7");
      CharsToNameCanonicalizer.createRoot();
      try { 
        filteringGeneratorDelegate0.writeEmbeddedObject(atomicLong0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing embedded objects
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      String string0 = null;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObjectFieldStart((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1391);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      PrettyPrinter prettyPrinter0 = filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(prettyPrinter0);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      file0.setReadable(true, true);
      double[] doubleArray0 = new double[0];
      try { 
        uTF8JsonGenerator0.writeFieldName("&YL!mS}T<\"yG~#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZgzFV2^e#WA`F7", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[3];
      file0.createNewFile();
      doubleArray0[1] = (double) 55296;
      doubleArray0[1] = (double) 2;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(3);
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`NF7", "ZgzFV2^e#WA`NF7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      int int0 = 7;
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`NF7");
      CharsToNameCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "*");
      try { 
        uTF8JsonGenerator0.writeNumberField("ZgzFV2^e#WA`NF7", (float) 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumberField("n[2", 240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.close();
      CharsToNameCanonicalizer.createRoot();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.setHighestNonEscapedChar(3374);
      try { 
        jsonGenerator0.writeObjectFieldStart("61;");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      try { 
        uTF8JsonGenerator0.writeFieldId(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-250), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonGeneratorDelegate0.getCodec();
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[1];
      tokenFilter0.includeBoolean(true);
      charArray0[0] = '5';
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence((-238));
      jsonGenerator0.setRootValueSeparator((SerializableString) null);
      boolean boolean0 = filteringGeneratorDelegate0.canWriteObjectId();
      boolean boolean1 = filteringGeneratorDelegate0.canOmitFields();
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3996), (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeNumberField("HYku&u", 0L);
      filteringGeneratorDelegate0.writeNumber((-630.5022601179));
      JsonGenerator jsonGenerator1 = filteringGeneratorDelegate0.setHighestNonEscapedChar(1);
      assertFalse(jsonGenerator1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-2614));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty("=.hBROI0`e");
      boolean boolean1 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter3, false, true);
      try { 
        filteringGeneratorDelegate0.writeArrayFieldStart("=.hBROI0`e");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      int int0 = (-1080);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[1];
      char char0 = '5';
      byte[] byteArray0 = new byte[0];
      try { 
        filteringGeneratorDelegate0.writeBinaryField(": was expecting closing quote for a string value", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      file0.createNewFile();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.writeStringField("ZgzFV2^e#WA`F7", "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("W~[ljT&@:)63ZJP'");
      mockFileOutputStream1.close();
      filteringGeneratorDelegate0.writeBooleanField("com.fasterxml.jackson.core.JsonGenerator$Feature", true);
      filteringGeneratorDelegate0.writeBoolean(true);
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, true);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(56320);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      tokenFilter2.includeRawValue();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      filteringGeneratorDelegate0.writeRaw("}c/ed&)t7)E!I[");
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      filteringGeneratorDelegate0.writeNumber(bigDecimal0);
      int int0 = (-1944);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(55296);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('P');
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "}c/ed&)t7)E!I[", 3526, 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("=.hBROI0`e", "=.hBROI0`e");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockFileOutputStream0);
      Double double0 = new Double(57343);
      uTF8JsonGenerator0.writeObject(double0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1270, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=1270, length=2) for input array of 0 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      StringReader stringReader0 = new StringReader("61;");
      CharsToNameCanonicalizer.createRoot();
      int int0 = (-1080);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "GX0Cowo9%[;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Byte byte0 = new Byte((byte)8);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 56320;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (byte)8;
      uTF8JsonGenerator0.writeArray(doubleArray0, 1, (-785));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "com.fasterxml.jackson.core.JsonGenerator");
      mockFile0.delete();
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(3);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty("p!#a,'Jfe&1CxzyaA");
      TokenFilter tokenFilter4 = tokenFilter3.filterStartObject();
      tokenFilter4.includeRootValue(125);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[3];
      file0.createNewFile();
      doubleArray0[1] = (double) 55296;
      doubleArray0[1] = (double) 2;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(3);
      assertSame(tokenFilter2, tokenFilter0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1378, (ObjectCodec) null, (OutputStream) null, byteArray0, 7, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue((-884));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter3, true, true);
      try { 
        filteringGeneratorDelegate0.writeObjectId(tokenFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 55296;
      doubleArray0[1] = (double) 2;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      file0.delete();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(55296);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter3 = tokenFilter1.filterStartObject();
      tokenFilter3.includeRootValue(55296);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(32);
      boolean boolean0 = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G(w+=;5^K!!<;[5^");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter2, false, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = "WRITE_NUMBERS_AS_STRINGS";
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObject(bufferRecycler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.BufferRecycler)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      file0.setReadable(true, true);
      double[] doubleArray0 = new double[0];
      try { 
        uTF8JsonGenerator0.writeFieldName("&YL!mS}T<\"yG~#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2306), 543, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2151, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String((byte[]) null, 543, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 7, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1004), (-1080), true);
      iOContext0.allocNameCopyBuffer(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 962, false);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(33);
      int int0 = jsonGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-1206));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, true, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter1, true, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate1.writeNumberField("", bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      String string0 = "*";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      int int0 = 7;
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "*");
      char[] charArray0 = new char[0];
      int int1 = (-1004);
      int int2 = (-1080);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 6;
      intArray0[5] = 1;
      intArray0[6] = 7;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeArray(intArray0, 256, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeNumberField((String) null, 339.19961);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = "ZgzFV2^e#WA`F7";
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=0, length=3) for input array of 2 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = "ZgzFV2^e#WA`F7";
      MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      AtomicLong atomicLong1 = new AtomicLong(1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, atomicLong1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 10, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext2.setEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, 0, 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null array
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      String string0 = "yL3s";
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumberField("yL3s", 1597.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "NNA#3`7|)|<A]rF";
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        filteringGeneratorDelegate0.writeNumberField("ZgzFV2^e#WA`F7", bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(56320);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeObject(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence(1416);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-827));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 32, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      byteArrayBuilder0.reset();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      tokenFilter1.includeRootValue(19);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRaw("|Py", 2528, (-2328));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      try { 
        filteringGeneratorDelegate0.writeNumberField("UTF-16BE", 287L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      try { 
        filteringGeneratorDelegate0.writeBooleanField("NNA#3`7|)|<A]rF", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      int int0 = 7;
      CharsToNameCanonicalizer.createRoot();
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      String string0 = "-6";
      try { 
        filteringGeneratorDelegate1.writeStringField("-6", "$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3591);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      String string0 = "QUOTE_FIELD_NAMES";
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeBooleanField("QUOTE_FIELD_NAMES", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
      MockFile mockFile0 = new MockFile("ZgzFV2^e#WA`F7", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      AtomicInteger atomicInteger0 = new AtomicInteger(3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, true);
      Boolean boolean0 = Boolean.valueOf("ZgzFV2^e#WA`F7");
      IOContext iOContext2 = new IOContext(bufferRecycler0, boolean0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 56320;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-2738), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=-2738, length=0) for input array of 21 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)1784);
      File file0 = MockFile.createTempFile(" does not support schema of type '", "x4lMfmzbhg7PN");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      AtomicInteger atomicInteger0 = new AtomicInteger(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4433), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 56320, (-4433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid argument(s) (offset=56320, length=-4433) for input array of 1 element
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = "ZgzFV2^e#WA`F7";
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      String string1 = "*";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      StringReader stringReader0 = new StringReader("ZgzFV2^e#WA`F7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 7, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1004), (-1080), true);
      try { 
        jsonGenerator0.copyCurrentStructure(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current event to copy
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      int int0 = 3591;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3591);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumberField("", (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]q,#");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3530, (ObjectCodec) null, mockPrintStream0, byteArray0, 2206, false);
      try { 
        uTF8JsonGenerator0.writeStringField("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeArrayFieldStart("yL3s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence(3);
      uTF8JsonGenerator1.setRootValueSeparator((SerializableString) null);
      try { 
        ((JsonGenerator)uTF8JsonGenerator1)._reportError("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JsonGenerator.Feature.collectDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)1784);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append('-');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeStartArray();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(57343);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getOutputContext();
      try { 
        filteringGeneratorDelegate0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.getAndDecrement();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, true);
      String string0 = "ZgzFV2^e#WA`F7";
      File file0 = MockFile.createTempFile("ZgzFV2^e#WA`F7", "ZgzFV2^e#WA`F7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      String string1 = "NNA#3`7|)|<A]rF";
      try { 
        uTF8JsonGenerator0.writeNumberField("NNA#3`7|)|<A]rF", (-326.9870974723008));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1374);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      boolean boolean0 = true;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter3, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeStringField("f", "f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1251), (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3591);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter2, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNumber((double) 3591);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = true;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.getSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = Integer.valueOf(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonGenerator");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'R';
      charArray0[2] = 'l';
      stringReader0.read(charArray0, 1, 2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3584, (ObjectCodec) null, (OutputStream) null);
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber(0.0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.setHighestNonEscapedChar(0);
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = (-1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }
}
