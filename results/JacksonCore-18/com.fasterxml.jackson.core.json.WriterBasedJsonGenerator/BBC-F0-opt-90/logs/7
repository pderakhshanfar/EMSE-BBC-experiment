* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-90
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 12976
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 2440189342
* Starting evolution
bbc usage percentage is: 90%
* Initial Number of Goals in DynaMOSA = 589 / 2629
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 603s and 334 generations, 274906 statements, best individual has fitness: 722.0
* Minimizing test suite
[MASTER] 07:33:20.839 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 967
* Number of covered goals: 761
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 508
* Number of covered goals: 391
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 87
* Number of covered goals: 87
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 66%
* Total number of goals: 544
* Number of covered goals: 358
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 44
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 508
* Number of covered goals: 391
* Generated 255 tests with total length 4984
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:34:07.249 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6682666666666667% of time used, but only 37/255 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 07:34:49.616 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:50.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:51.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:51.832 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:52.288 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:52.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:53.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:53.387 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:53.619 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:53.893 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:54.185 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:54.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:56.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:56.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:57.184 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:57.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:57.876 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:58.080 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:58.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:58.790 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:59.092 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:59.340 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:59.772 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:00.097 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:00.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:00.781 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:01.010 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:01.273 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:01.536 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:01.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:01.976 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:02.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:02.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:03.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:03.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:03.477 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:03.719 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:04.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:04.404 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:04.642 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:04.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:05.190 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:05.586 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:05.960 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:06.319 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:06.559 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:07.061 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:07.300 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:07.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:07.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:08.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:08.667 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:08.725 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"pc%0t9C" "\u00[ {\u003\\u00\b\u00\b\u003 \u00\{\u00 3\u00\\\u00{ \u00l3\u00l\\u00\\\u003b]\b> but was:<"pc%0t9C" "\u00[45\u0027\u0060\u0061\u0024\u0065\u0042\u006A\u0054\u0032\u0038\u006D\u0021]\b>
[MASTER] 07:35:08.754 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext0);

JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext1);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = new StringWriter();
assertEquals("", stringWriter1.toString());
assertNotNull(stringWriter1);
assertFalse(stringWriter1.equals((Object)stringWriter0));

IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext2);
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 125, (ObjectCodec) null, stringWriter0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(16);
assertNotSame(iOContext0, iOContext2);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext1, iOContext2);
assertSame(iOContext1, iOContext0);
assertNotSame(stringWriter0, stringWriter1);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(125, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeRawValue());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.includeElement((-1508));
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter1, false, false);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(125, writerBasedJsonGenerator1.getFeatureMask());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(16, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(filteringGeneratorDelegate0);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));

ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
assertNotSame(iOContext0, iOContext2);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext1, iOContext2);
assertSame(iOContext1, iOContext0);
assertNotSame(stringWriter0, stringWriter1);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(125, writerBasedJsonGenerator1.getFeatureMask());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(16, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNull(objectCodec0);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));

WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals("", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertEquals(0, writerBasedJsonGenerator2.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator2.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(1, writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(stringWriter1.equals((Object)stringWriter0));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator1));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator0));

writerBasedJsonGenerator0.writeNumber("pc%0t9C");
assertNotSame(iOContext0, iOContext2);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext1, iOContext2);
assertSame(iOContext1, iOContext0);
assertNotSame(stringWriter0, stringWriter1);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator2));

writerBasedJsonGenerator0.writeString("E'`a$eBjT28m!\bD");
assertNotSame(iOContext0, iOContext2);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext1, iOContext2);
assertSame(iOContext1, iOContext0);
assertNotSame(stringWriter0, stringWriter1);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("\"pc%0t9C\" \"\\u00 {\\u003\\\\u00\\b\\u00\\b\\u003 \\u00\\{\\u00 3\\u00\\\\\\u00{ \\u00l3\\u00l\\\\u00\\\\\\u003b\\b", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator2));

writerBasedJsonGenerator1.writeBoolean(false);
assertNotSame(iOContext0, iOContext2);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext1, iOContext2);
assertSame(iOContext1, iOContext0);
assertNotSame(stringWriter0, stringWriter1);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("\"pc%0t9C\" \"\\u00 {\\u003\\\\u00\\b\\u00\\b\\u003 \\u00\\{\\u00 3\\u00\\\\\\u00{ \\u00l3\\u00l\\\\u00\\\\\\u003b\\b", stringWriter0.toString());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(13, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(125, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(13, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(125, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(stringWriter0.equals((Object)stringWriter1));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator2));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator2));


[MASTER] 07:35:09.031 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:09.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:09.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:09.890 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:10.181 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:10.680 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:10.872 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:11.110 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:35:13.754 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-opt-90/tests/7
* Done!

* Computation finished
