/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:42:29 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      iOContext0.allocWriteEncodingBuffer();
      iOContext0.allocTokenBuffer((-1191));
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeFieldName("dDQiP");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeFieldName("~$e9Ig/Du2aL=");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber((-1.0F));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer(94);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can ot use numeric value accessos", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) ") not numeric, can ot use numeric value accessos");
      writerBasedJsonGenerator0.getCurrentValue();
      writerBasedJsonGenerator0.writeObject((Object) null);
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 2;
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(55296);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket");
      int[] intArray0 = new int[7];
      intArray0[0] = 56319;
      intArray0[1] = 56320;
      intArray0[3] = 56320;
      writerBasedJsonGenerator0.writeString(" bytes (out of ");
      intArray0[5] = (-600);
      intArray0[6] = (-498);
      writerBasedJsonGenerator1._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket", "com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket", true);
      writerBasedJsonGenerator0.writeNumber((long) 56320);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator1._writePPFieldName("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket", false);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("write a string");
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator1._writePPFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Can not ");
      // Undeclared exception!
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3360), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(718);
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0083';
      charArray0[1] = '\u0083';
      charArray0[2] = '\u0083';
      charArray0[3] = '\u0083';
      charArray0[4] = '\u0083';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 4, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      short short0 = (short)45;
      SerializedString serializedString0 = new SerializedString("3]u0)H '?9{");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("FR2Lh5:qf$2>v8+g6{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ") notWnumeric, cn not uC] numeric value acce[sors";
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") notWnumeric, cn not uC] numeric value acce[sors", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter0);
      char char0 = '4';
      char char1 = 'A';
      stringWriter0.append('4');
      char[] charArray0 = new char[20];
      charArray0[0] = 'j';
      charArray0[1] = 'A';
      charArray0[2] = 'u';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'u';
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3360), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber(1);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      stringWriter1.append('\\');
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      writerBasedJsonGenerator0._outputHead = (-972);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-972), (-3360));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeFieldName("|Fh*CQP6RU^P2].");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '~';
      charArray0[2] = 'r';
      charArray0[3] = 'J';
      charArray0[4] = 'o';
      charArray0[5] = '/';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 2759);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeFieldName("WlS");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.canWriteObjectId();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 56319;
      intArray0[5] = 1;
      intArray0[6] = 55296;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeArray(intArray0, 3, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeNumber(2107L);
      String string0 = "`x\"%Wkb^aE{";
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator0.writeBooleanField("`x\"%Wkb^aE{", false);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      String string1 = "z/_JN,4t-d(KB%";
      try { 
        writerBasedJsonGenerator0.writeFieldName("z/_JN,4t-d(KB%");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.canWriteObjectId();
      byte[] byteArray0 = new byte[9];
      writerBasedJsonGenerator0.writeStartArray(2);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-60));
      writerBasedJsonGenerator0.writeNumber((float) 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, cn not use numeric value accessors", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(95);
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      String string0 = "4_Jb4':r;A{jXv`|C ";
      jsonGenerator0.writeBooleanField("4_Jb4':r;A{jXv`|C ", false);
      writerBasedJsonGenerator0.writeNumber(0L);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeBooleanField(".GIGfWvc^l~f", true);
      writerBasedJsonGenerator0.canWriteObjectId();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber("`3?&['dDs-%8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 563, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream1, (-599));
      StringReader stringReader0 = new StringReader("P");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2205, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-3314));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.canWriteObjectId();
      writerBasedJsonGenerator0._writeFieldName("3]u0)H '9{", false);
      writerBasedJsonGenerator0.writeNumber((short)45);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-60));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.writeRaw("~$ie}IgDu-&=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw("~$ie}IgDu-&=");
      writerBasedJsonGenerator0._writeFieldName("~$ie}IgDu-&=", false);
      writerBasedJsonGenerator0.writeNumber(2107L);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 517;
      writerBasedJsonGenerator0.writeBooleanField("`x\"%Wkb^aE{", false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 517);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2414);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 69);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 80, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1111));
      StringWriter stringWriter1 = stringWriter0.append('y');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 100, (-1516));
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1516));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeStartArray(3);
      writerBasedJsonGenerator0.writeFieldName("|Fh*CQP6RU^P2].");
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) null);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig]/D-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeRaw("~$e9Ig]/D-&L=");
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12000, 33);
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-692));
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = ' ';
      writerBasedJsonGenerator0._outputHead = 114;
      charArray0[2] = '(';
      charArray0[3] = 'E';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      SerializedString serializedString0 = new SerializedString("start an array");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("Gr2Dm{h*$;b2F", "Gr2Dm{h*$;b2F");
      writerBasedJsonGenerator0.writeEndObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.canWriteObjectId();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("|cZmYJf7#%6");
      SerializedString serializedString0 = new SerializedString("*^'}jg");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)39, 12000);
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-676));
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[8];
      writerBasedJsonGenerator0.writeNumberField("Ne~", (double) 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      int int0 = 176;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";}gU'z)", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 133);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-701));
      writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString("``G$TdG<]");
      serializedString0.asQuotedChars();
      writerBasedJsonGenerator0.writeNumber((double) 7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("By[~V%0W*xc68~AW");
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(3737.906F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((short) (-946));
      writerBasedJsonGenerator0.canWriteObjectId();
      writerBasedJsonGenerator0._writeFieldName("3]u0)H '9{", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 17 bytes (out of 23)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("|\"gwImhkdB>2R6j");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-199), 3);
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      writerBasedJsonGenerator0.writeNumber((float) 1);
      charArray0[4] = '/';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      charArray0[8] = '\\';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null, 115, 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "";
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString("z[");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumberField("0/ CS8 ,/#U(*hy-", (long) 3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(".GIGfWvc^l~f");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString2 = new SerializedString(".GIGfWvc^l~f");
      serializedString1.asQuotedChars();
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 19, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.canWriteObjectId();
      writerBasedJsonGenerator0._writeFieldName("3]u0{H '9{", false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumberField("", bigDecimal0);
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      String string0 = "write a string";
      writerBasedJsonGenerator0.writeRaw('\u001D');
      writerBasedJsonGenerator0.writeRaw("write a string");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 48);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream1, (-1111));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("write a string", "", false, ':', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      writerBasedJsonGenerator0.writeStartObject();
      JsonParserSequence.createFlattened(jsonParserDelegate0, jsonParserDelegate0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      String string0 = "write a string";
      try { 
        writerBasedJsonGenerator0.writeString("write a string");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3347), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      SerializedString serializedString0 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 56320);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      stringWriter0.write(charArray0, 1, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString2 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=", (-747), 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(55296);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket");
      int[] intArray0 = new int[7];
      intArray0[0] = 56319;
      intArray0[1] = 56320;
      intArray0[3] = 56320;
      intArray0[4] = 1;
      writerBasedJsonGenerator0.writeString(" bytes (out of ");
      intArray0[5] = (-600);
      intArray0[6] = (-498);
      writerBasedJsonGenerator1._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket", "com.fasterxml.\"ackson.core.sym.CHarsToNameCanonical,zer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, (-8), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0._writeFieldName("~$e}Ig/Du-&=", false);
      writerBasedJsonGenerator0.writeNumber(2107L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(1);
      System.setCurrentTimeMillis((-156L));
      writerBasedJsonGenerator0.writeRaw("K\"gwImhwdB>2R6j");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-199), 3);
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '@';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      charArray0[8] = '\\';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null, 115, 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(1);
      String string0 = "";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '2';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = ';';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "~$e}Ig/Du-&=";
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0._writeFieldName("~$e}Ig/Du-&=", false);
      writerBasedJsonGenerator0.writeNumber(2107L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)1492);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '2';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = ';';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '\\';
      charArray0[8] = 'c';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      writerBasedJsonGenerator0.writeRaw('4');
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0._writeFieldName("~$e}Ig/Du-&=", false);
      writerBasedJsonGenerator0.writeNumber(2107L);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 512;
      writerBasedJsonGenerator0.writeBooleanField("`x\"%Wkb^aE{", true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1647L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeObject((Object) null);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 1, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '2';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = ';';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '\\';
      SerializedString serializedString0 = new SerializedString("|-Bae{trN./zr");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 2705, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNullField("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 56320);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      charArray0[2] = '#';
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("]8YyY'1f@", true);
      writerBasedJsonGenerator0.writeNumber((-88L));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      writerBasedJsonGenerator0.writeNumber((short)3945);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, (-2582));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      charArray0[2] = '#';
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(".GIGfWvc^l~f");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName(".GIGfWvc^l~f", true);
      writerBasedJsonGenerator0.writeNumber((-1L));
      File file0 = MockFile.createTempFile("W`+wzv", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 2586);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2586 bytes (out of 2586)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '2';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = ';';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '\\';
      charArray0[8] = 'c';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)21;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (int) (byte)21, 1134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      String string0 = "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket";
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      int[] intArray0 = new int[7];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 55296;
      writerBasedJsonGenerator1.writeArray(longArray0, 2, (-1558));
      intArray0[0] = 56319;
      intArray0[1] = 56320;
      intArray0[2] = 0;
      intArray0[3] = 56320;
      intArray0[4] = 1;
      intArray0[5] = (-600);
      intArray0[6] = (-498);
      writerBasedJsonGenerator1._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", true);
      writerBasedJsonGenerator0.writeNumber((long) 56320);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator1.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) (-600));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '2';
      charArray0[2] = 'E';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '?';
      writerBasedJsonGenerator0.writeString(charArray0, (int) (short)4, 2);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("~$e9Ig/Du-&L=", true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = (-3334);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(44);
      System.setCurrentTimeMillis(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'v';
      charArray0[2] = '#';
      charArray0[3] = ';';
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 0);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 97, (-357));
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext", 924, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(95);
      jsonGenerator0.writeArrayFieldStart(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray(13);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      writerBasedJsonGenerator0.writeString(charArray0, 47, (-4044));
      writerBasedJsonGenerator0.writeNumber(48);
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStringField("", "");
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeObject((Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("-10", "-10");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter", true);
      writerBasedJsonGenerator0.writeNumber(1L);
      writerBasedJsonGenerator0.writeRaw("n:t");
      writerBasedJsonGenerator0.writeRaw('<');
      String string0 = "";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'v';
      charArray0[2] = '#';
      charArray0[3] = ';';
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 0);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("]8YyY'1f@", false);
      writerBasedJsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(3);
      System.setCurrentTimeMillis(0L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1024, 2066);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 32768);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(".GIGfWvc^l~f");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName(".GIGfWvc^l~f", true);
      writerBasedJsonGenerator0.writeNumber((-1L));
      writerBasedJsonGenerator0.writeString(".GIGfWvc^l~f");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0.writeRaw("~$e}Ig/Du-&=");
      writerBasedJsonGenerator0._writeFieldName("~$e}Ig/Du-&=", false);
      writerBasedJsonGenerator0.writeNumber(2107L);
      writerBasedJsonGenerator0.writeBooleanField("`x\"%Wkb^aE{", true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1647L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'v';
      charArray0[2] = '#';
      charArray0[3] = ';';
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = serializedString2.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("Ak", true);
      writerBasedJsonGenerator0.writeNumber((-283L));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      StringWriter stringWriter2 = new StringWriter(592);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber(2);
      System.setCurrentTimeMillis(0);
      writerBasedJsonGenerator0.writeNumber(3);
      stringWriter1.flush();
      writerBasedJsonGenerator0.writeNullField("Current context not an object but ");
      writerBasedJsonGenerator0.writeRaw(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._writeFieldName("IGNORE_UNDEFINED", false);
      SerializedString serializedString0 = new SerializedString("KeY\"z*X9H5e/MGa");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (short)541, (-1784));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-561), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'O';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = ';';
      charArray0[5] = 'A';
      charArray0[6] = 'j';
      charArray0[7] = '\\';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(586);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2257, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) ") not numeric, can not use numeric value accessors");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(0);
      System.setCurrentTimeMillis(56320);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 262);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "e9ku?s0u6@\"p3", true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext4, 1, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeRaw("");
      boolean boolean0 = false;
      writerBasedJsonGenerator0._writeFieldName("a\"\"c", false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'J';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2, 1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '2';
      charArray0[2] = 'E';
      charArray0[3] = '1';
      charArray0[4] = 'Z';
      charArray0[5] = '?';
      writerBasedJsonGenerator0.writeString(charArray0, (int) (short)4, 2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName(",^-yRQBFq!", true);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber((-311));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2066, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('\'');
      writerBasedJsonGenerator0.writeRaw("write a string");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.canWriteObjectId();
      writerBasedJsonGenerator1._verifyPrettyValueWrite("hf>DaWZ");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2066, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('\'');
      writerBasedJsonGenerator0.writeRaw("write a string");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.close();
      float float0 = 31.82508F;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      String string0 = null;
      writerBasedJsonGenerator0.writeObject((Object) null);
      writerBasedJsonGenerator0.writeRaw(';');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonWriteContext", true);
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '*';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 247, 56320);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) ") not numeric, can not use numeric value accessors");
      iOContext0.allocBase64Buffer();
      stringWriter0.write(2083);
      writerBasedJsonGenerator0.writeNumber(56319);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1246);
      writerBasedJsonGenerator0.writeNumber((short)541);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)541);
      char[] charArray0 = new char[6];
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = '\\';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, (int) (short)541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      serializedString0.appendQuoted(charArray0, 56320);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", true);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      char[] charArray1 = new char[10];
      charArray1[0] = 'k';
      charArray1[2] = 'k';
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      try { 
        writerBasedJsonGenerator0.writeNumber((-647.563F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeStartArray(0);
      writerBasedJsonGenerator0.writeStartArray();
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-350), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -350
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '~';
      charArray0[2] = '\'';
      charArray0[3] = 'i';
      charArray0[4] = '*';
      writerBasedJsonGenerator0.writeString(charArray0, (-2241), (-2476));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      String string0 = "~$e9Ig/Du-&L=";
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("start an array", true);
      writerBasedJsonGenerator0.writeNumber((short)1753);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 105, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(" bytes (out of ");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator1.writeFieldName(" bytes (out of ");
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator1.writeRaw(",+IxRI m?iZWq^Ga");
      writerBasedJsonGenerator1._writeFieldName("*]k*,xL;6g_", false);
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 7);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3208);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3201 bytes (out of 3208)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      int[] intArray0 = new int[7];
      intArray0[0] = 56319;
      intArray0[1] = 56320;
      intArray0[2] = 0;
      intArray0[3] = 56320;
      intArray0[4] = 1;
      intArray0[5] = (-600);
      intArray0[6] = (-498);
      writerBasedJsonGenerator1._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", true);
      writerBasedJsonGenerator0.writeNumber((long) 56320);
      writerBasedJsonGenerator1.writeRaw('v');
      writerBasedJsonGenerator1._writePPFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(2);
      // Undeclared exception!
      writerBasedJsonGenerator0._writeFieldName("start an array", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3334), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[8];
      char char0 = 'p';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = '#';
      charArray0[2] = char2;
      char char3 = ';';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      char char5 = '\\';
      charArray0[5] = char5;
      char char6 = 'M';
      charArray0[6] = char6;
      char char7 = 'e';
      charArray0[7] = char7;
      int int0 = 1720;
      writerBasedJsonGenerator0.writeString(charArray0, int0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-71);
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      char[] charArray1 = null;
      iOContext0.releaseNameCopyBuffer(charArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("e28(a8c9So");
      writerBasedJsonGenerator1._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator1.writeFieldName("\u0006V");
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator1.writeRaw("LONG");
      writerBasedJsonGenerator1.writeRaw("LONG");
      writerBasedJsonGenerator0.writeNumber((short) (-2008));
      writerBasedJsonGenerator1.writeNumber((float) 57343);
      writerBasedJsonGenerator0.writeNumber((-3033L));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName(",^-yRQBFq!", true);
      writerBasedJsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short) (-2008));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(1.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", false);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 3844);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(3);
      SerializedString serializedString0 = new SerializedString("e28(a8c9So");
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      Object object1 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("s$*!r)]CA+{|.Q");
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeRaw((String) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("start an array");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 56320);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 107);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 94 bytes (out of 107)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      int[] intArray0 = new int[7];
      intArray0[0] = 56319;
      intArray0[1] = 56320;
      intArray0[2] = 0;
      intArray0[3] = 56320;
      intArray0[4] = 1;
      intArray0[5] = (-600);
      intArray0[6] = (-498);
      writerBasedJsonGenerator1._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", true);
      writerBasedJsonGenerator0.writeNumber((-1193L));
      writerBasedJsonGenerator0.writeRaw('v');
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      writerBasedJsonGenerator0.writeStartObject();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserDelegate0, jsonParserDelegate0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter1, true, true);
      // Undeclared exception!
      try { 
        filteringParserDelegate0.readValueAsTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw(")");
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3995, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 105, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(" bytes (out of ");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      jsonGenerator0.writeBinary(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, 56320);
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1434));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";}zU'z)", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 73, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 877, 63);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 65);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 65 bytes (out of 65)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("~$e9Ig/Du-&L=");
      writerBasedJsonGenerator0.writeNumber((short)4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw(")");
      writerBasedJsonGenerator0.writeNumber((short)1574);
      stringWriter0.append('y');
      char[] charArray0 = new char[0];
      int int0 = (-232);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 32767, (-232));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      byte[] byteArray0 = new byte[1];
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-1351), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";}zU'z)", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 34, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 57343, 242);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-16));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 105, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(" bytes (out of ");
      serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator1.writeFieldName(" bytes (out of ");
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("_OuS<]LnN8");
      writerBasedJsonGenerator1.writeRaw(",+IxRI m?iZWq^Ga");
      String string0 = "*]k*,xL;6g_";
      writerBasedJsonGenerator1._writeFieldName("*]k*,xL;6g_", false);
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString1);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[2] = (byte) (-102);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("t");
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.canWriteObjectId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("]@9E8z%", false);
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 105, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(" bytes (out of ");
      byte[] byteArray0 = serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator0.writeRaw('j');
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1765), 0);
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (-3308), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      System.setCurrentTimeMillis(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("bBv.i>!");
      writerBasedJsonGenerator0.writeString("8S~p^lW");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.setRootValueSeparator((SerializableString) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '|';
      charArray0[7] = '|';
      writerBasedJsonGenerator0.writeString(charArray0, 48, (-1011));
      writerBasedJsonGenerator0.writeString(charArray0, 5, (-1368));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      stringWriter1.write(charArray0);
      stringWriter1.flush();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
      StringReader stringReader0 = new StringReader("m^&w\"5*]+mO");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 32, (-2389), true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3830);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5220, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", false);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 3844);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";}zU'z)", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 34, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 57343, 242);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-16));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 105, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString(" bytes (out of ");
      serializedString1.asQuotedUTF8();
      writerBasedJsonGenerator0._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator0.writeRaw('j');
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite(" bytes (out of ");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString2 = new SerializedString(" bytes (out of ");
      writerBasedJsonGenerator0._writeFieldName(serializedString2, false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-600), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[2] = 'V';
      charArray0[1] = '\"';
      charArray0[2] = 'c';
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber(79L);
      writerBasedJsonGenerator0.writeString(charArray0, 419, (-1892));
      writerBasedJsonGenerator0.writeNumber((-127));
      writerBasedJsonGenerator0.writeNumber((short)10);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 9, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(95);
      writerBasedJsonGenerator0.writeStartArray(9);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      writerBasedJsonGenerator0.writeString(charArray0, 47, (-4044));
      writerBasedJsonGenerator0.writeNumber(48);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      char char0 = '^';
      StringWriter stringWriter1 = new StringWriter();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      String string0 = "";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 624, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(624);
      stringWriter0.write(" bytes (out of ");
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      Object object0 = new Object();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("'hb/e|}E8l9+", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)69, 102);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(33);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2066, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber("write a string");
      writerBasedJsonGenerator0.writeRaw('\'');
      writerBasedJsonGenerator0.writeRaw("write a string");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber(2);
      System.setCurrentTimeMillis(0);
      writerBasedJsonGenerator0.writeNumber(3);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 592;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      stringWriter1.flush();
      writerBasedJsonGenerator0.writeNullField("UTF-32BE");
      stringWriter1.append('k');
      writerBasedJsonGenerator0.writeRaw(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeBoolean(false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber(41);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGene[ator");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)3967);
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeRaw('h');
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 592, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(248);
      SerializedString serializedString0 = new SerializedString("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0.writeRaw("2IIB3P|<72");
      writerBasedJsonGenerator0.writeNumber((short)84);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0._writeFieldName("Current token (%s) not of boolean type", true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) ") not numeric, can not use numeric value accessors");
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)1706);
      stringWriter0.append('y');
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      writerBasedJsonGenerator0.writeBoolean(false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'y';
      charArray1[1] = 'y';
      charArray1[2] = 'C';
      writerBasedJsonGenerator0.writeRaw(charArray1, 3, 0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("P", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false, 'w', 728);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 56)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('k');
      iOContext0.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)3415);
      writerBasedJsonGenerator0.writeNumber(854);
      writerBasedJsonGenerator0.writeNumber((float) (short)3415);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      IOContext iOContext1 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1, 3);
      writerBasedJsonGenerator0.writeNumber((-244));
      System.setCurrentTimeMillis(0L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2501), 1063);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 123);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream1, (-2501));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      int int0 = (-466);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream1, (-466));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)2778);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator1.writeNumber((short)541);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator1.writeNumber((short)1);
      writerBasedJsonGenerator1._writeFieldName(serializedString0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator1.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      System.setCurrentTimeMillis(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("");
      stringWriter0.append((CharSequence) "");
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("version", false);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      String string0 = "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket";
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      jsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      String string1 = "~&Tk6,\\E`CSj+c";
      writerBasedJsonGenerator0.writeRaw("~&Tk6,E`CSj+c");
      try { 
        writerBasedJsonGenerator0.writeNumber("~&Tk6,E`CSj+c");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      String string0 = "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket";
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'N';
      charArray0[2] = '%';
      charArray0[3] = '0';
      charArray0[4] = 'y';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char char0 = '@';
      String string0 = "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      stringWriter0.append('g');
      charArray0[0] = 'V';
      charArray0[1] = '\"';
      charArray0[2] = 'c';
      iOContext1.constructTextBuffer();
      charArray0[3] = 'U';
      iOContext0.setEncoding(jsonEncoding0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(1L, 1);
      writerBasedJsonGenerator0.writeNumberField("lzj</R7(Qy-+5", bigDecimal0);
      charArray0[4] = 'k';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 1745);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('k');
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 2497, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator1.writeString(charArray0, 115, (-523));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("I&JV51'IBo7rqk");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw("I&JV51'IBo7rqk");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", false);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      char[] charArray0 = new char[10];
      charArray0[0] = 'k';
      charArray0[2] = 'k';
      writerBasedJsonGenerator0.writeRaw("S:QR>Zd uZm%");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0._writeFieldName("Current context not an object but ", false);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator1._writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      writerBasedJsonGenerator0.writeNumber(36);
      System.setCurrentTimeMillis(0L);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)264);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1, 592);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(11);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1614), (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.ONE;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      Random.setNextRandom(2);
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'Y';
      charArray0[2] = 'u';
      charArray0[3] = 'H';
      charArray0[4] = 'P';
      charArray0[5] = 'H';
      charArray0[6] = '#';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      writerBasedJsonGenerator0.writeNumber(11);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      System.setCurrentTimeMillis(9223372036854775807L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bBv.i>!");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("bBv.i>!");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeRaw("bBv.i>!");
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("JE4@E&B7hi}M llLw", false);
      writerBasedJsonGenerator0.writeObject((Object) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0.writeString("JE4@E&B7hi}M llLw");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeStartArray(1);
      SerializedString serializedString1 = new SerializedString("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw('X');
      writerBasedJsonGenerator0.writeRaw("j");
      writerBasedJsonGenerator0._writeFieldName("Current token (%s) not of boolean type", false);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      stringWriter0.write("write aT null", 3, 2);
      writerBasedJsonGenerator0.writeNumber("Trying to release buffer not owned by the context");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      writerBasedJsonGenerator0.writeRaw("Trying to release buffer not owned by the context");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.allocBase64Buffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      String string0 = "JE4@E&B7hi}M ll\\Lw";
      writerBasedJsonGenerator0._writeFieldName("JE4@E&B7hi}M llLw", false);
      writerBasedJsonGenerator0.writeObject((Object) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeNumberField("JE4@E&B7hi}M llLw", (BigDecimal) null);
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNumber((short)1682);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'g';
      charArray0[2] = 'c';
      charArray0[3] = 'Q';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 177, (int) (short)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      writerBasedJsonGenerator0.writeObject((Object) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("uiVs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.flush();
      stringWriter0.append('^');
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("'hb/e|}E8l9+", false);
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '^';
      charArray0[8] = '^';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0, 77, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(531);
      char char0 = 'k';
      StringWriter stringWriter1 = stringWriter0.append('k');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char1 = '|';
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '|';
      charArray0[2] = '|';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = new StringBuffer("6P^7aS");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0, 1, 1);
      StringWriter stringWriter3 = stringWriter2.append('`');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      iOContext0.allocBase64Buffer();
      System.setCurrentTimeMillis(0L);
      char[] charArray0 = new char[5];
      charArray0[3] = 's';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 500, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors", 1, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('n');
      int int0 = 35;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(105);
      writerBasedJsonGenerator0.writeNumber(1);
      StringWriter stringWriter2 = stringWriter1.append('n');
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis(2055L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(7);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 21, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 741, 2076);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3442, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = '@';
      charArray0[3] = '\u008D';
      charArray0[4] = '@';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 10, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ") not numeric, can not use numeric value accessors";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      int int0 = 592;
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      IOContext iOContext1 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('k');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("");
      iOContext1.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)2848);
      writerBasedJsonGenerator0.writeNumber(1267);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('%');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2252, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName("=+1<m!EZ,X(7", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)50;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[3] = (byte) (-102);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("write a string");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.append((CharSequence) stringBuffer0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber(1243.5216F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 398, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray0, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2257, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) ") not numeric, can not use numeric value accessors");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(0);
      System.setCurrentTimeMillis(56320);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)35, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 262);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 52);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 50 bytes (out of 52)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      iOContext0.allocBase64Buffer();
      StringWriter stringWriter1 = stringWriter0.append('k');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)2848);
      writerBasedJsonGenerator0.writeNumber(1267);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 398, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(2);
      System.setCurrentTimeMillis((-1275L));
      writerBasedJsonGenerator0.writeRaw("bBv.i>!");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw("]\"2A]doIE");
      try { 
        writerBasedJsonGenerator0.writeNumber(398);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      iOContext0.setEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedUTF8();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0.writeRaw("Jx'");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('[');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw('[');
      writerBasedJsonGenerator0.writeRaw("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite(") not numeric, can not use numeric value accessors");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('k');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName("J\"S21*jJUJ@u6m", true);
      writerBasedJsonGenerator0.flush();
      stringWriter0.write(62);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("1]zLlWO$FuC%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 165, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumberField("_<6", 276.0F);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeNumber(56319);
      System.setCurrentTimeMillis(57343);
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), 44);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 56319);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream1, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 36, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator1._writeFieldName(serializedString0, true);
      String string0 = "Gf|}\\5@&g";
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      char char0 = 'n';
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'n';
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart("Current context not an ARRAY but ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      System.setCurrentTimeMillis(0L);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeRaw("Can not ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Can not ", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("s+7Qt");
      writerBasedJsonGenerator1.writeNumber((long) (byte) (-69));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[3] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("write a string");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("JE4@E&hi} llLw", false);
      writerBasedJsonGenerator0.writeObject((Object) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0.writeString("JE4@E&B7hi} llLw");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'D';
      SerializedString serializedString1 = new SerializedString("Current token (%s) not of boolean type");
      writerBasedJsonGenerator0._writeFieldName(serializedString1, false);
      String string0 = "1]zLl\\WO$FuC%";
      try { 
        writerBasedJsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('n');
      int int0 = 35;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(105);
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeNumber(1);
      StringWriter stringWriter2 = stringWriter1.append('n');
      System.setCurrentTimeMillis(55296);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", "");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-1189), (ObjectCodec) null, stringWriter2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";}zU'z)", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 34, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '@';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = '@';
      charArray0[5] = 'i';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 6);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'g';
      charArray0[7] = 'n';
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 1744);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("write a null", 3, 2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "tSkF", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 248, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      charArray0[1] = ')';
      charArray0[2] = 'i';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      iOContext0.setEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeRaw("");
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      String string0 = "Trying to release buffer not owned by the context";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, (byte) (-102), 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(531);
      StringWriter stringWriter1 = stringWriter0.append('k');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(854);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)2848);
      writerBasedJsonGenerator0.writeNumber(1267);
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 13, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.flush();
      stringWriter0.append('n');
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4000, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('n');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      int int0 = 592;
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString("[");
      writerBasedJsonGenerator0.writeString("[");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "[", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)3943);
      writerBasedJsonGenerator0.writeNumber((-2043));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(") not numeric, can not use numeric value accessors", "", true, '*', 65599);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 44, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.flush();
      stringWriter0.append('n');
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1390, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      stringWriter0.write("write a null", 3, 2);
      writerBasedJsonGenerator0.writeNumber("Trying to release buffer not owned by the context");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = ')';
      charArray0[2] = 'i';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)93, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeStringField("#", "#");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.writeRaw('Y');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      stringWriter1.append('n');
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeEndObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(56320);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('n');
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = ", copied ";
      IOContext iOContext1 = new IOContext(bufferRecycler1, ", copied ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 96, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '?';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '@';
      charArray0[2] = 'i';
      charArray0[4] = 'i';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)127);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber(41);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      String string0 = "1]zLl\\WO$FuC%";
      writerBasedJsonGenerator0.writeFieldName("1]zLlWO$FuC%");
      writerBasedJsonGenerator0.writeStartArray();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(charArray0, (-2917), 659);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        serializedString0.appendQuoted((char[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocTokenBuffer(2);
      writerBasedJsonGenerator0._verifyValueWrite(") not numeric, can not use numeric value accessors");
      byteArray0[0] = (byte) (-97);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 1, 43);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('`');
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 165, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", false);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(809);
      System.setCurrentTimeMillis(0);
      writerBasedJsonGenerator0.writeRaw("W");
      writerBasedJsonGenerator0.writeNumber((short)265);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short) (-2006));
      writerBasedJsonGenerator0.writeFieldName(";yI0");
      writerBasedJsonGenerator0.writeNumber((-61));
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(2);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short)127);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber(41);
      writerBasedJsonGenerator0.writeNumber(2429.3884F);
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)11);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(") not numeric, can not use numeric value accessors", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '@';
      charArray0[2] = 'i';
      charArray0[3] = ')';
      charArray0[4] = 'i';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1612, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '%';
      charArray0[2] = '`';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(charArray0, 6, (-280));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) ") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.writeRaw("");
      try { 
        writerBasedJsonGenerator0.writeNumber((short)127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator0.writeRaw('<');
      writerBasedJsonGenerator0.writeRaw("}jJBAZm;P~{e\"");
      writerBasedJsonGenerator0._writeFieldName(":=% @<NTL/", true);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator0.writeNumber("Trying to release buffer not owned by the context");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = ')';
      charArray0[2] = 'i';
      writerBasedJsonGenerator0.writeString(charArray0, 65536, (-280));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2517, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._releaseBuffers();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)126;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-246), 3372);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 3);
      iOContext1.releaseNameCopyBuffer((char[]) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 1, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      String string0 = null;
      writerBasedJsonGenerator0.writeObject((Object) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 38, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String string0 = "~9#^9|<ox,\\`-";
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (byte)0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("~9#^9|<ox,`-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1069.0);
      assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeNumber("Trying to release buffer not owned by the context");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      String string0 = ",UK%sMj[]6afP`i";
      String string1 = "JE4@E&B7hi} ll\\Lw";
      writerBasedJsonGenerator0._writeFieldName("JE4@E&B7hi} llLw", false);
      writerBasedJsonGenerator0.writeObject((Object) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString("Current token (%s) not of boolean type");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("Current token (%s) not of boolean type", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('d');
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 10, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(105);
      System.setCurrentTimeMillis(2);
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[5] = 'n';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(51);
      stringWriter0.write(33);
      stringWriter0.append((CharSequence) "");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("O.5H1X><`j:");
      writerBasedJsonGenerator0.writeRaw('B');
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      writerBasedJsonGenerator0.writeRaw(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeNumber((short)541);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-1352), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      SerializedString serializedString0 = new SerializedString("Xd=QHa#6-:0*{}Teg");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-717), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)91);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(152);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 54, (ObjectCodec) null, stringWriter0);
      String string0 = ",UK%sMj[]6afP`i";
      writerBasedJsonGenerator0._writeFieldName(",UK%sMj[]6afP`i", false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '+';
      charArray0[2] = '#';
      charArray0[3] = '<';
      charArray0[4] = '(';
      charArray0[5] = 'z';
      charArray0[6] = '9';
      charArray0[7] = '.';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(charArray0, 2, (-2954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 775, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartArray(2);
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("kgQ+{>I$f)pD={evwU", ") not numeric, can not use numeric value accessors", false, '$', 57343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 50)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(") not numeric, can not use numeric value accessors", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3302), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.append('n');
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1390, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 38, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("~9#^9|<ox,`-", "", true, 'G', 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 65535, (ObjectCodec) null, stringWriter1);
      stringWriter1.close();
      writerBasedJsonGenerator0.writeNumber(28);
      System.setCurrentTimeMillis(1L);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'n';
      charArray0[2] = 't';
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 72, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      boolean boolean0 = false;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(152);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 54, (ObjectCodec) null, stringWriter0);
      String string0 = ",UK%sMj[]6afP`i";
      writerBasedJsonGenerator0._writeFieldName(",UK%sMj[]6afP`i", false);
      writerBasedJsonGenerator0.writeObject(",UK%sMj[]6afP`i");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString(",UK%sMj[]6afP`i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(",UK%sMj[]6afP`i", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-704), 0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter((byte)76);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-2736));
      System.setCurrentTimeMillis(612L);
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)464);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeStartArray((-1059));
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '%', 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '%';
      charArray0[2] = 'Q';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter1 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("RDC}Dr~t91d>]f$`5u");
      StringBuilder stringBuilder1 = stringBuilder0.append((-156.8904774411));
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName("RDC}Dr~t91d>]f$`5u");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(5, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeNumber((short) (-137));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3318), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(592);
      stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2723, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byte byte0 = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 102, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      iOContext1.setEncoding(jsonEncoding1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeStartArray((-828));
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("tJjb0\"|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-704), 0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1069.0);
      writerBasedJsonGenerator0.writeStartArray();
      StringReader stringReader0 = new StringReader("Illegal white space character (code 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1482), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures((-1715), 48);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, readerBasedJsonParser0);
      try { 
        jsonParserSequence0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.io.ByteArrayInputStream@0000000006; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-704), 0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)76, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      byteArrayInputStream0.markSupported();
      charArray0[1] = 'Q';
      charArray0[2] = '7';
      charArray0[3] = '4';
      charArray0[4] = '?';
      charArray0[5] = 'O';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (byte)60);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-432), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeRaw("");
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      StringReader stringReader0 = new StringReader("+pxMFJ{6(V$J-9s");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "write a string");
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("+pxMFJ{6(V$J-9s");
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 374, (-579));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3318), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.flush();
      String string0 = "8TJpGOTd$53";
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(242, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      StringReader stringReader0 = new StringReader("+pxMFJ{6(V$J-9s");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "write a string");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1321), (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-704), 0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)76, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      String string0 = ">zs1%[Xj";
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'Q';
      charArray0[2] = '7';
      charArray0[3] = '4';
      charArray0[4] = '?';
      charArray0[5] = 'O';
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (-383), 50);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, (-3997), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not numeric, can not use numeric value accessors", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2504, (ObjectCodec) null, (Writer) null);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 398, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1328, 3130);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray0, 3130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }
}
