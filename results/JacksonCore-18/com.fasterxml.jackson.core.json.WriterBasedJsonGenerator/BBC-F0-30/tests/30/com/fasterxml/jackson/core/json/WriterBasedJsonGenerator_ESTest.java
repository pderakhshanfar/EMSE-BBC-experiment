/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:52:58 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray1 = new char[6];
      charArray1[0] = 'y';
      charArray1[1] = '2';
      charArray1[2] = '*';
      charArray1[3] = 'b';
      charArray1[4] = 'I';
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) dataInputStream0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-457), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      char char0 = '?';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((short) (-1411));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1618), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      writerBasedJsonGenerator0.writeNumber((-261L));
      iOContext2.allocBase64Buffer();
      char[] charArray0 = iOContext2.allocTokenBuffer();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      stringWriter0.write(15);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 961);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      writerBasedJsonGenerator0.writeStartArray(55296);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asUnquotedUTF8();
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpv", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("Can not ", false);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeNumber((-1437.5));
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[2] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)105;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1618), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      writerBasedJsonGenerator0.writeNumber((-261L));
      byte[] byteArray0 = iOContext2.allocBase64Buffer();
      char[] charArray0 = iOContext2.allocTokenBuffer();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      stringWriter0.write(15);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.JsonGeneratorImpl", byteArray0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 961);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 3);
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString(charArray0, (-185), 3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("CEN'/F=tOO;_m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 3);
      writerBasedJsonGenerator0.writeString(charArray0, (-1034), (-440));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString("oj6N\"B mw;^");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-477), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[7] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal((double) '*');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.releaseReadIOBuffer(byteArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeNumber(1285);
      writerBasedJsonGenerator0._writeFieldName("", false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      charArray0[4] = '>';
      iOContext0.setEncoding(jsonEncoding0);
      charArray0[6] = 'p';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeNumber((short)2523);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      writerBasedJsonGenerator0._flushBuffer();
      doubleArray0[5] = (double) 1;
      writerBasedJsonGenerator0.writeArray(doubleArray0, 1, 1);
      boolean boolean0 = writerBasedJsonGenerator0._cfgUnqNames;
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 3);
      writerBasedJsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1281;
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-477), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[7] = '\u0000';
      charArray0[4] = 'Q';
      stringWriter0.append('1');
      charArray0[8] = '\u0000';
      charArray0[6] = '\u0000';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal((double) '\u0000');
      writerBasedJsonGenerator0.writeRawValue("");
      // Undeclared exception!
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-477), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[7] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal((double) '*');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.releaseReadIOBuffer(byteArray0);
      writerBasedJsonGenerator0.writeNumber(0);
      String string0 = "q";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 16, 29988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.J4onGeneratorImpl", false);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.J4onGeneratorImpl");
      stringWriter0.write("com.fasterxml.jackson.core.json.J4onGeneratorImpl");
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '1';
      charArray0[4] = '';
      charArray0[5] = '_';
      charArray0[2] = '_';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      writerBasedJsonGenerator0._outputTail = 57343;
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-1411));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-264), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeNumber((long) 56319);
      BigDecimal bigDecimal0 = new BigDecimal(2018.1455735006705);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal2 = bigDecimal0.divide(bigDecimal1, 91, roundingMode0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber(2018.1455735006705);
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(163);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject((Object) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-2706), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Writer writer0 = null;
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2811);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1159, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeFieldName("Ec");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, writerBasedJsonGenerator0.SURR1_LAST, objectCodec0, writer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal((double) '*');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-477), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal((double) '*');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      iOContext0.releaseReadIOBuffer(byteArray0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._writeFieldName("", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((short) (-1411));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 905, (ObjectCodec) null, (Writer) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRawValue("");
      writerBasedJsonGenerator0.writeStartArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.releaseReadIOBuffer((byte[]) null);
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      writerBasedJsonGenerator0.writeStartObject();
      mockFileInputStream0.getChannel();
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 1419);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1296);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1296.918));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringWriter0.write("");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((-2398));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      iOContext0.allocWriteEncodingBuffer();
      charArray0[5] = 'g';
      writerBasedJsonGenerator0.writeObjectFieldStart("19}8~H{t%uJ%P<");
      charArray0[6] = ' ';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw(' ');
      writerBasedJsonGenerator0.writeRaw("^0-&/h", 3, 0);
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber((-2248L));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      iOContext0.allocWriteEncodingBuffer();
      charArray0[5] = 'g';
      writerBasedJsonGenerator0.writeObjectFieldStart("19}8~H{t%uJ%P<");
      charArray0[6] = ' ';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw(' ');
      try { 
        writerBasedJsonGenerator0.writeNumber((short)2764);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftRight(0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 1281, 2446);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      char[] charArray0 = iOContext0.allocNameCopyBuffer((-3993));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1618), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding2);
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding2);
      iOContext3.setEncoding(jsonEncoding0);
      stringWriter1.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 4320, (-2706));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpv", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber((-596.8520712938073));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      iOContext1.allocBase64Buffer();
      char[] charArray0 = iOContext0.allocTokenBuffer();
      BigDecimal bigDecimal0 = new BigDecimal((-1309.5));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString(charArray0, 93, 2949);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-4172), (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(".PackageVersion", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeStartObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("write a number");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer(0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeRaw("^0-&/h");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocNameCopyBuffer((-3993));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1618), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding2);
      IOContext iOContext3 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext3.allocBase64Buffer();
      char[] charArray0 = iOContext3.allocTokenBuffer();
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString(charArray0, 97, 97);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = ": was expecting closing ''' for name";
      // Undeclared exception!
      writerBasedJsonGenerator0.writeFieldName(": was expecting closing ''' for name");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 1419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-2706));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal1 = new BigDecimal((double) 3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[6];
      charArray0[5] = '~';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "";
      writerBasedJsonGenerator0.writeFieldName("");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      iOContext0.allocWriteEncodingBuffer();
      charArray0[5] = 'g';
      writerBasedJsonGenerator0.writeObjectFieldStart("19}8~H{t%uJ%P<");
      charArray0[6] = ' ';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw(' ');
      writerBasedJsonGenerator0.writeRaw("^0-&/h", 3, 0);
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0.flush();
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      writerBasedJsonGenerator0._cfgUnqNames = true;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 0);
      char[] charArray0 = new char[4];
      double[] doubleArray0 = new double[0];
      writerBasedJsonGenerator0.writeArray(doubleArray0, 37, (-137));
      charArray0[1] = '\'';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      writerBasedJsonGenerator0.writeStartArray();
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0._writeFieldName("", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      BigDecimal bigDecimal0 = new BigDecimal((double) 57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0._flushBuffer();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-440), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[9] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[8] = '\u0000';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString1, true);
      writerBasedJsonGenerator0._flushBuffer();
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(".PackageVersion", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeStartObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("write a number");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeBinary((Base64Variant) null, byteArray0, 0, 239);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.json.JsonGeneratorImpl";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      char char0 = '\'';
      String string1 = "H+bw5";
      stringWriter0.write("H+bw5");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '1';
      charArray0[4] = '\u0085';
      charArray0[5] = '_';
      charArray0[6] = '_';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeString(charArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32768, (ObjectCodec) null, (Writer) null);
      iOContext0.allocReadIOBuffer(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(32768);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(".PackageVersion", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeStartObject();
      iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("write a number");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[5] = 'g';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      writerBasedJsonGenerator0._cfgUnqNames = true;
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1, 1);
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '1';
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeString("R");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1281);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1013), (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-1013);
      intArray0[2] = 56319;
      writerBasedJsonGenerator0.writeArray(intArray0, 1, 1);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, (-619));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._cfgUnqNames = true;
      stringWriter0.write(2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber(9223372036854775807L);
      writerBasedJsonGenerator0.writeFieldName("Ec");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.json.JsonGeneratorImpl";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2752), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeFieldName("+");
      writerBasedJsonGenerator0.writeNumber(770L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal2 = bigDecimal1.divide(bigDecimal0, 57343, roundingMode0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(2);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      iOContext0.allocWriteEncodingBuffer();
      charArray0[5] = 'g';
      writerBasedJsonGenerator0.writeObjectFieldStart("19}8~H{t%uJ%P<");
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw('?');
      writerBasedJsonGenerator0.writeRaw("^0-&/h", 3, 0);
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Aq!Su_n~$TOD[F");
      writerBasedJsonGenerator0.writeNumber((float) 3);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 31);
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'Y';
      charArray0[2] = '';
      charArray0[3] = ';';
      charArray0[4] = ' ';
      charArray0[5] = 'N';
      charArray0[6] = 'r';
      charArray0[7] = 'J';
      charArray0[8] = 'p';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1566.646565906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      iOContext0.allocWriteEncodingBuffer();
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw('?');
      writerBasedJsonGenerator0.writeRaw("^0-&/h", 3, 0);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal1 = new BigDecimal((double) 3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '4';
      charArray0[5] = '~';
      charArray0[2] = '~';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._cfgUnqNames = true;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber(9223372036854775807L);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeFieldName("Ec");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Non-standard token '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocNameCopyBuffer((-3993));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 10, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      byte[] byteArray0 = iOContext2.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "/";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 1, (-3993));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.json.JsonGeneratorImpl";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 31;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeObjectFieldStart(", copied ");
      try { 
        writerBasedJsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      writerBasedJsonGenerator0.writeRaw('g');
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = new BigDecimal(2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = new BigDecimal(2);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 905, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      writerBasedJsonGenerator0.writeBooleanField("", true);
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "o", false);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(2731);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 46, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyValueWrite("write g binary v+luD");
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[10];
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      writerBasedJsonGenerator0.writeNumber((-1));
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw('?');
      String string0 = "^0-&/h";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("^0-&/h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      String string0 = "JM \" -=XO(";
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      iOContext3.allocBase64Buffer();
      int int0 = (-3067);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-3067), (ObjectCodec) null, stringWriter0);
      StringWriter stringWriter1 = new StringWriter(56320);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, (-3595), (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      stringWriter0.write(1684);
      StringWriter stringWriter1 = stringWriter0.append('c');
      stringWriter0.write(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-433), (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 56320);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      iOContext0.releaseNameCopyBuffer((char[]) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer();
      stringWriter1.write(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('W');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw('?');
      writerBasedJsonGenerator0._verifyPrettyValueWrite("^0-&/h");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("^0-&/h");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(".PackageVersion", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeStartObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("write a number");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        writerBasedJsonGenerator0.writeNumber((-1211.764F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("Can not ");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      stringWriter0.write(3);
      StringWriter stringWriter1 = stringWriter0.append('\u0084');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3363), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      writerBasedJsonGenerator0.writeFieldName("{!-");
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.JsonStringEncoder");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(10);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 103, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 37, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("VALUE_EMBEDDED_OBJECT", true);
      writerBasedJsonGenerator0.writeNumber((-1L));
      writerBasedJsonGenerator0.writeNumber((-375.76275170737733));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'm';
      charArray0[2] = '-';
      charArray0[3] = 'O';
      writerBasedJsonGenerator0.writeBooleanField("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "Can not ";
      StringReader stringReader0 = new StringReader("Can not ");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      stringWriter0.write(3);
      stringWriter0.append('\u0084');
      stringWriter0.write((-155));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = true;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber(9223372036854775807L);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator1.writeFieldName("Ec");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      writerBasedJsonGenerator0.writeString(charArray0, (-1820), (-3233));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("Ec", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      writerBasedJsonGenerator0.writeFieldName("4!KhsOWJF1,{6 VF15");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 2734);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      writerBasedJsonGenerator0._cfgUnqNames = true;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1013);
      intArray0[1] = 55296;
      intArray0[2] = 3;
      writerBasedJsonGenerator0.writeArray(intArray0, 128, 0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(14);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '?';
      charArray0[2] = 'g';
      charArray0[3] = 'h';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-828), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocNameCopyBuffer((-3993));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      int int0 = 256;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 256, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      byte[] byteArray0 = iOContext2.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeBinaryField("/", byteArray0);
      try { 
        writerBasedJsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("Can not ");
      stringWriter0.close();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      stringWriter0.write(3);
      stringWriter0.append('t');
      stringWriter0.write((-155));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      String string0 = "@DlMgjw`[E'uN!i1B";
      writerBasedJsonGenerator0._verifyValueWrite("@DlMgjw`[E'uN!i1B");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) (-155));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("JM \" -=XO(", true);
      writerBasedJsonGenerator0.writeNumber(1974.7600809);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      Object object0 = new Object();
      writerBasedJsonGenerator0.writeStartObject(object0);
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("S@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not S@, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Q_%6Jsr\u0005Q9o&Z\"=E");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      String string0 = "-|6L|:=W'sh=1*+4 9!";
      stringWriter0.write("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'Q';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      stringWriter1.write(charArray0);
      writerBasedJsonGenerator0._writeFieldName("-|6L|:=W'sh=1*+4 9!", true);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeFieldName("x<noC&[sRUNL/8");
      writerBasedJsonGenerator0.writeRaw('\'');
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = true;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber(9223372036854775807L);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeFieldName("Ec");
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 2665, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      writerBasedJsonGenerator0.writeFieldName("5}K");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      BigDecimal bigDecimal0 = new BigDecimal(2017.472509418);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal2 = bigDecimal0.divide(bigDecimal1, 56320, roundingMode0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.writeNumber(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.flush();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, 2726, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      iOContext0.constructTextBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("JM \" -=XO(", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-3595), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'U';
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Q_%6Jsr\u0005Q9o&Z\"=E");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0._writeFieldName("-|6L|:=W'sh=1*+4 9!", true);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeFieldName("x<noC&[sRUNL/8");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3993), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1013), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) (-1013));
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0._writeFieldName("TK.Vd[)\"=b+3", true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw(']');
      writerBasedJsonGenerator1._verifyPrettyValueWrite("\"{1JkEIiUmjg0;n\"hg");
      writerBasedJsonGenerator1.flush();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Xun/<!Y52f");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter1.write(1);
      stringWriter0.append('S');
      stringWriter1.write(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-100), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, (-864), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyValueWrite("Xun/<!Y52f");
      writerBasedJsonGenerator0._flushBuffer();
      stringWriter0.write("write a null");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 56320, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1._verifyValueWrite("Illegal character (");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-917.33636F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(92);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeString((char[]) null, 2, (-4143));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 5, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      int[] intArray0 = new int[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = (-1439);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 56320;
      writerBasedJsonGenerator0.setCurrentValue((Object) null);
      intArray0[8] = 0;
      writerBasedJsonGenerator0.writeArray(intArray0, 3, 2);
      writerBasedJsonGenerator0._writeFieldName("%2V}We1=aHh(n9<=W^3", true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("%2V}We1=aHh(n9<=W^3");
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Vs", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Vs");
      iOContext1.allocWriteEncodingBuffer();
      stringWriter0.write((-100));
      stringWriter0.append('[');
      stringWriter0.write((-2));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-864), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyValueWrite("write a null");
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("Illegal character (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Vs", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Vs");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4148, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName(" in field name", false);
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext2.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      writerBasedJsonGenerator0.writeNumber((short)298);
      writerBasedJsonGenerator0.writeRaw(" in field name");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(" in field name", 2683, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1282, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("write a null");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      stringWriter1.append((CharSequence) stringBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fast)rxml.jackson.core.json.JsonGeneratorImpl", false);
      int int0 = 15;
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("P~d<`D|~;x8<<`Nz/");
      stringWriter0.append((CharSequence) "P~d<`D|~;x8<<`Nz/");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "sgu97~", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 15, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("com.fast)rxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeNumber(0.0);
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      try { 
        writerBasedJsonGenerator1.writeString((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(1);
      StringWriter stringWriter1 = stringWriter0.append('[');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyValueWrite("R~A$e:hkY\"ZCD0;");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext0.allocNameCopyBuffer((-3993));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 85);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      iOContext0.allocTokenBuffer(3);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.constructTextBuffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Can not ", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("&]");
      System.setCurrentTimeMillis(9223372036854775807L);
      writerBasedJsonGenerator0.writeRaw("T:e%", 1, 2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocNameCopyBuffer((-3993));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((short)2667);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Q_%6Jsr\u0005Q9o&Z\"=E");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0._writeFieldName("-|6L|:=W'sh=1*+4 9!", true);
      stringWriter1.flush();
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeFieldName("x<noC&[sRUNL/8");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("-|6L|:=W'sh=1*+4 9!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocNameCopyBuffer((-3993));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber(3158.4622F);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      writerBasedJsonGenerator0.writeNumber((short)2705);
      writerBasedJsonGenerator0.close();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 1562, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumberField("Can not ", (-261.84));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      String string0 = "[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]";
      iOContext0.constructTextBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuilder stringBuilder0 = new StringBuilder("SE,wvLz%l");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 16, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter(127);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw("");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeNumber((-1.0F));
      writerBasedJsonGenerator0.writeFieldName("write a boolean value");
      writerBasedJsonGenerator0.writeNumber((long) 86);
      writerBasedJsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1282, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(1);
      writerBasedJsonGenerator0._writeFieldName("R~A$e:hkY\"ZCD0;", true);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("write a null");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      try { 
        writerBasedJsonGenerator0.writeNumber((-140.444591));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-4608), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an object");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("JM \" -=XO(", true);
      writerBasedJsonGenerator0.writeNumber(1974.7600809);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 54, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._writeFieldName("MbOAuU= ,;4*Q", false);
      writerBasedJsonGenerator1.writeFieldName("MbOAuU= ,;4*Q");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("%2V}We1=aHh(n9<=W^3", true);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeNumber(bigDecimal0);
      writerBasedJsonGenerator1.writeString(")v.FAAk]?y|Ms");
      writerBasedJsonGenerator0.writeString((char[]) null, 3, 0);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      int[] intArray0 = new int[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = (-1439);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 56320;
      intArray0[8] = 0;
      writerBasedJsonGenerator0.writeArray(intArray0, 3, (-1));
      writerBasedJsonGenerator0._writeFieldName("%2V}We1=aHh(n9<=W^3", true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("%2V}We1=aHh(n9<=W^3");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      int int0 = 15;
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      int int1 = 97;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2633, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1090, (ObjectCodec) null, stringWriter1);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("VALUE_TRUE");
      writerBasedJsonGenerator0.writeString((char[]) null, (-3327), (-1925));
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1090, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Unexpected problem: chain of filtered context broken");
      writerBasedJsonGenerator0.writeNumber((short) (-9217));
      BigDecimal bigDecimal0 = new BigDecimal(42);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber(1315);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("%2V}We1=aHh(n9<=W^3", true);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[4] = 'A';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-747), (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeUTF8String(byteArray0, 1, 2990);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber((double) 15);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("RKVY|1QI7{`G");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not RKVY|1QI7{`G, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)114;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 905, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1020, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("@-+`}pUvt0+?,L-,", false);
      writerBasedJsonGenerator0.writeNumber(2524.4985);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      iOContext2.constructTextBuffer();
      writerBasedJsonGenerator0._writeFieldName("nxt|BH^)d", false);
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Aq!Su_n~$TOD[F");
      writerBasedJsonGenerator0.writeNumber((float) 3);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      writerBasedJsonGenerator0.writeNumber((long) 31);
      writerBasedJsonGenerator0.writeNumber((-1566.646565906));
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 54, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber((short) (-4046));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      writerBasedJsonGenerator0.writeRawValue(" of 4-char base64 unit: can only used between units", 2, 16);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((short)2764);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("");
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("<1rpb D{4,~=N-g=QA");
      writerBasedJsonGenerator0.writeString((char[]) null, (-3176), 0);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumberField("Can not ", (-261.84));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0._writeFieldName("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", false);
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue("[tSt88hXZ.", 26, 2746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeNumber(1.0F);
      writerBasedJsonGenerator0.writeFieldName(", column: ");
      writerBasedJsonGenerator0.writeNumber((-988L));
      writerBasedJsonGenerator0.writeNumber((double) 1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber((double) 15);
      stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1604);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNull();
      String string0 = "{uyw69GUQ}^a:\"P$I;,";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("{uyw69GUQ}^a:\"P$I;,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1090, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("R~A$e:hkY\"ZCD0;", false);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("R~A$e:hkY\"ZCD0;");
      writerBasedJsonGenerator0.writeNumber(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1090);
      BigDecimal bigDecimal1 = new BigDecimal(1222);
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3770, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((short) (-2907));
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber((short) (-2907));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber((double) 15);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("Q_%6Jsr\u0005Q9o&Z\"=E");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeFieldName("x<noC&[sRUNL/8");
      writerBasedJsonGenerator0.writeNumber((-324L));
      writerBasedJsonGenerator0.writeNumber((double) 189);
      int int0 = 2391;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2391, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1090, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("R~A$e:hkY\"ZCD0;", false);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Unexpected problem: chain of filtered context broken");
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeFieldName(") out of range of int");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3869, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("<1rpb D{4,~=N-g=QA");
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("w.11N#H~^:E");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 3, 611);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[4] = (byte)48;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 123, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Y[Y0 ,?Op)(d");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'i';
      charArray0[2] = 'n';
      charArray0[3] = 'y';
      charArray0[4] = 'D';
      charArray0[5] = '4';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3992, (-902));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("UTF-32BE", 3, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-674), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("write a number");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString(", column: ");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeFieldName("$Q2%|t~U;-J!1");
      writerBasedJsonGenerator0.writeNumber((-5L));
      writerBasedJsonGenerator0.writeNumber((double) 3);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1604), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeString("YAcg~GXhIi/");
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1620), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[2] = (byte) (-1);
      writerBasedJsonGenerator0._flushBuffer();
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)48;
      writerBasedJsonGenerator0.writeBinaryField("Y[Y0 ,?Op)(d", byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._writeFieldName("Y[Y0 ,?Op)(d", false);
      try { 
        writerBasedJsonGenerator0.writeFieldName("Y[Y0 ,?Op)(d");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      stringWriter0.write(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-674), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-674), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
      System.setCurrentTimeMillis(1);
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 0);
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OfEwr");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.allocWriteEncodingBuffer();
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1890, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 127, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      stringBuilder0.append(114);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1293, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      stringWriter0.write(780);
      stringWriter0.append('[');
      writerBasedJsonGenerator0._writeFieldName("R~A$e:hkY\"ZCD0;", true);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      stringWriter1.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.JsonGeneratorImpl", false);
      writerBasedJsonGenerator0.writeNumber((double) 15);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("<1rpb D{4,~=N-g=QA");
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("w.11N#H~^:E");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.io.NumberOutput");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(22);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("Can not ", 3993.894181773292);
      writerBasedJsonGenerator0._writeFieldName("y", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      writerBasedJsonGenerator0._verifyValueWrite("write a boolean value");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[1] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[4] = (byte)48;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 123, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Y[Y0 ,?Op)(d");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)114;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 359, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[6] = (byte)48;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2595), (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Y[Y0 ,?Op)(d";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1620), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[2] = (byte) (-1);
      writerBasedJsonGenerator0._flushBuffer();
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)48;
      writerBasedJsonGenerator0.writeBinaryField("Y[Y0 ,?Op)(d", byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 77, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)121;
      writerBasedJsonGenerator0.writeBinaryField("x<noC&[sRUNL/8", byteArray0);
      writerBasedJsonGenerator0.writeNumber((long) (byte)121);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 0, 116);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[1] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[4] = (byte)48;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 123, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Y[Y0 ,?Op)(d");
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString(", column: ");
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeFieldName("$Q2%|t~U;-J!1");
      writerBasedJsonGenerator0.writeNumber((-5L));
      writerBasedJsonGenerator0.writeNumber((double) 3);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString("w.11N#H~^:E");
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.io.NumberOutput");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1090, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("R~A$e:hkY\"ZCD0;", false);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Unexpected problem: chain of filtered context broken");
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '.';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = new BigDecimal(3016.1);
      String string0 = null;
      int int0 = 11;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 11, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 189, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      writerBasedJsonGenerator0.writeBinaryField("x<noC&[sRUNL/8", byteArray0);
      writerBasedJsonGenerator0.writeNumber((long) (byte)121);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 0, 116);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)48;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 123, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Y[Y0 ,?Op)(d");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-2058), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("{uyw69GUQ}^a:\"P$I;,");
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber(419L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(22);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1890, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('1');
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Y[Y0 ,?Op)(d";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)48;
      writerBasedJsonGenerator0.writeBinaryField("Y[Y0 ,?Op)(d", byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 77, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeBinaryField("U~M.['&NNN&*", byteArray0);
      writerBasedJsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 45, (-541));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Y[Y0 ,?Op)(d";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      byte byte0 = (byte) (-103);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)126;
      writerBasedJsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)126);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1106), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-643.1398F));
      writerBasedJsonGenerator0.writeFieldName("x<noC&[sRUNL/8");
      writerBasedJsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("start an array");
      writerBasedJsonGenerator0.writeNumber((float) (byte)126);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      byte byte0 = (byte) (-103);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)126;
      writerBasedJsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)126);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-986), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("x<noC&[sRUNL/8", false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Wg0my", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 771, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("Wg0my");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-440);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[7];
      charArray0[1] = 'h';
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      char char0 = '?';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber((-9.223372036854776E18));
      String string0 = "";
      writerBasedJsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      byte byte0 = (byte)126;
      writerBasedJsonGenerator0.writeNull();
      String string0 = "";
      writerBasedJsonGenerator0.writeString("start an array");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 131, 1220);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-96), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Wg0my", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 771, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("Wg0my", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Spill-over slots in symbol table with ");
      sequenceInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 93, 0, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(']');
      StringWriter stringWriter1 = stringWriter0.append('#');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      String string0 = "";
      writerBasedJsonGenerator0.writeNullField("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'h';
      charArray0[4] = 'Q';
      char char0 = 'g';
      charArray0[5] = 'g';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      writerBasedJsonGenerator0._writeFieldName("CQ_sdi3MB$", false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      byte byte0 = (byte) (-103);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)126;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)126);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-440), (ObjectCodec) null, stringWriter0);
      iOContext1.allocReadIOBuffer(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = '*';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      charArray0[6] = '?';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeFieldName("");
      assertEquals("xh* bg?", stringWriter0.toString());
      assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3176), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(92);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1020, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1983.0232);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString("{uyw69GUQ}^a:\"P$I;,");
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber(419L);
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber((short)2667);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      sequenceInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 93, 0, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(']');
      StringWriter stringWriter1 = stringWriter0.append('#');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      String string0 = "";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'a';
      StringWriter stringWriter1 = stringWriter0.append('a');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 489, (ObjectCodec) null, stringWriter1);
      String string0 = "nwcnC~~VmB!=S!~!";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("nwcnC~~VmB!=S!~!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 2, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x<noC&[sRUNL/8", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-986), (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "R~A$e:hkY\"ZCD0;";
      StringBuilder stringBuilder0 = new StringBuilder("R~A$e:hkY\"ZCD0;");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "R~A$e:hkY\"ZCD0;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1293, (ObjectCodec) null, stringWriter1);
      iOContext1.allocWriteEncodingBuffer(1590);
      stringWriter0.append('[');
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y[Y0 ,?Op)(d", false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1623), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      stringWriter0.close();
      byteArray0[0] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byte byte3 = (byte)15;
      byteArray0[3] = (byte)15;
      byte byte4 = (byte)126;
      byteArray0[4] = (byte)126;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, (byte)126, (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = (-1333);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = ' ';
      StringWriter stringWriter1 = stringWriter0.append(' ');
      StringBuilder stringBuilder0 = new StringBuilder("@rS,gA*V^rLj");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, (-1333), (ObjectCodec) null, stringWriter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 123, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("", true);
      assertEquals("a", stringWriter0.toString());
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-986), (ObjectCodec) null, (OutputStream) null, byteArray0, 908, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-928), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RaZEQ/j{;Q3'!^");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = '7';
      charArray0[2] = 'p';
      charArray0[3] = 'q';
      charArray0[4] = 'n';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 50, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1409), 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(894);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("FCP0D", "kPG..cf,OO7", false, 'n', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 11)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
