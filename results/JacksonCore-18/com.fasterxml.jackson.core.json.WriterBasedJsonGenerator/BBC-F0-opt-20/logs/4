* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 5217
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 3408974880
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 589 / 2629
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 604s and 224 generations, 179021 statements, best individual has fitness: 705.0
* Minimizing test suite
[MASTER] 07:32:38.570 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 967
* Number of covered goals: 762
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 508
* Number of covered goals: 395
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 81
* Number of covered goals: 81
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 66%
* Total number of goals: 544
* Number of covered goals: 360
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 44
* Number of covered goals: 43
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 44
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 508
* Number of covered goals: 395
* Generated 246 tests with total length 4121
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:33:25.961 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6861166666666667% of time used, but only 45/246 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 07:34:11.577 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:12.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:12.473 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:12.830 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:13.456 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:13.987 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:14.420 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:15.589 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:15.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:16.340 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:16.669 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:16.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:17.237 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:17.637 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:18.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:18.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:18.652 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:18.895 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:19.183 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:19.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:19.784 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:20.033 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:20.256 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:20.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:20.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:21.048 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:21.260 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:21.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:21.708 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:22.293 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:22.459 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:22.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:23.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:23.731 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:24.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:24.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:24.635 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:24.892 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:25.096 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:25.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:25.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:25.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:26.132 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:26.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:26.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:26.825 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:27.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:27.405 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:28.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:29.253 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:29.438 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:29.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:30.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:30.352 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:30.651 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:30.830 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:31.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:31.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:31.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:32.268 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:32.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:32.970 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:33.271 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:33.610 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:34.056 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:34.329 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:34.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:34.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:35.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:35.260 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:35.520 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:35.760 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:36.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:36.326 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:36.668 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:36.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:37.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:37.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:38.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:38.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:38.994 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:39.168 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:39.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:39.538 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:39.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<|"\u00[30\u001z]> but was:<|"\u00[2D\u0039]>
[MASTER] 07:34:39.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(iOContext0);

StringReader stringReader0 = new StringReader("-9");
assertNotNull(stringReader0);

StringWriter stringWriter0 = new StringWriter(0);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1139), (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator0);

writerBasedJsonGenerator0.writeRaw('|');
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(1, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals((-1139), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeString("-9");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("|\"\\u0030\\u001z", stringWriter0.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeRaw('V');
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("|\"\\u0030\\u001z", stringWriter0.toString());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeNumber(115);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("|\"\\u0030\\u001z", stringWriter0.toString());
assertEquals((-1139), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeRaw("P6>|hBih>sM4h/_", (-1014), 115);

[MASTER] 07:34:39.760 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:40.072 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:40.269 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:40.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-opt-20/tests/4
* Done!

* Computation finished
