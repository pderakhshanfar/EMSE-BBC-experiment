/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:49:10 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(3);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 121);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2315);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2010, (-3420));
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeFieldName("write a boolean value");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((-88L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(60);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2555);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeString(charArray0, 60, 60);
      iOContext0.allocReadIOBuffer(56320);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2678, 46);
      writerBasedJsonGenerator0.writeRaw("fLz/Te*aPzT-#rV");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an object but ");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber(1012L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(60);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2555);
      writerBasedJsonGenerator0.writeString(charArray0, 60, 60);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2678, 46);
      writerBasedJsonGenerator0.writeNumber((short)5829);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0._writeFieldName("SNjGcty<N %", false);
      writerBasedJsonGenerator0._writeFieldName("QUy_J^mFEn#/#Tte", true);
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("N/$j~:Vesp[*.0Ao:Rb");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(0);
      System.setCurrentTimeMillis(3);
      Base64Variant base64Variant0 = new Base64Variant("N/$j~:Vesp[*.0Ao:Rb", "com.fasterxml.jackson.core.util.DefaultPre=tyPrinter$NopIndenter", false, '3', (-2562));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 45, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)114;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary(base64Variant0, byteArray0, (-290), 248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -290
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(60);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2546);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeString(charArray0, 60, 60);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._rootValueSeparator = null;
      writerBasedJsonGenerator0.writeString(charArray0, 2665, 46);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.Base64Variant");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 125;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 125;
      doubleArray0[3] = (double) 56319;
      doubleArray0[4] = 38.52322472837247;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 55296;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3, charArray0, (-4021), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 1;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      writerBasedJsonGenerator0.writeString("expected padding character '");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[10];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      writerBasedJsonGenerator0.writeNumber((-1.0F));
      writerBasedJsonGenerator0.writeNumber("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(60);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2551);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeString(charArray0, 60, 60);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2678, 46);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, (SerializableString) null);
      writerBasedJsonGenerator0.writeRaw("S!GfOoWQ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      SerializedString serializedString0 = new SerializedString("");
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter("write a binary value");
      DefaultPrettyPrinter defaultPrettyPrinter3 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter4 = new DefaultPrettyPrinter(defaultPrettyPrinter3);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter4);
      writerBasedJsonGenerator0.writeFieldName("write a binary value");
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "4Cd9[-O',fZO";
      try { 
        writerBasedJsonGenerator0.writeString("4Cd9[-O',fZO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("Can not write a field name, expecting a value");
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString("M+;94JljR");
      writerBasedJsonGenerator0._verifyValueWrite("M+;94JljR");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      writerBasedJsonGenerator0.writeString("M+;94JljR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3766);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)3232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeNumber((float) 48);
      writerBasedJsonGenerator0.writeNumber("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("PK1O");
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = ']';
      charArray0[2] = '}';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("@j");
      writerBasedJsonGenerator0.writeFieldName("(ymn~wt[9.-bQJ%pe");
      char[] charArray0 = iOContext0.allocTokenBuffer(57343);
      writerBasedJsonGenerator0.writeNumber((float) 57343);
      writerBasedJsonGenerator0.writeNumber("(ymn~wt[9.-bQJ%pe");
      writerBasedJsonGenerator0._verifyValueWrite("(ymn~wt[9.-bQJ%pe");
      writerBasedJsonGenerator0.writeString(charArray0, 3, 377);
      iOContext0.releaseConcatBuffer(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 2251, 2434);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, (-2438), (-2438));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-759), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("@j");
      char[] charArray0 = iOContext0.allocTokenBuffer((-743));
      writerBasedJsonGenerator0.writeNumber(2613.1F);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0._verifyValueWrite("RV7)zlVI(P&h");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 377, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 19, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("dig{#");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Generator of type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(60);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '';
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2546);
      writerBasedJsonGenerator0.writeString(charArray0, 2406, 1);
      writerBasedJsonGenerator0.writeString(charArray0, 60, 60);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2678, 46);
      int int0 = 3913;
      writerBasedJsonGenerator0.writeString(charArray0, 23, 3913);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'f', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("EBp(Tb\"1R");
      char[] charArray0 = iOContext0.allocTokenBuffer(54);
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("expected padding character '");
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      writerBasedJsonGenerator0.writeString("expected padding character '");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 55, 54);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("@j");
      writerBasedJsonGenerator0.writeFieldName("(ymn~wt[9.-bQJ%pe");
      char[] charArray0 = iOContext0.allocTokenBuffer(47);
      writerBasedJsonGenerator0.writeNumber((float) 57343);
      writerBasedJsonGenerator0.writeNumber("(ymn~wt[9.-bQJ%pe");
      writerBasedJsonGenerator0._verifyValueWrite("(ymn~wt[9.-bQJ%pe");
      writerBasedJsonGenerator0.writeString(charArray0, 3, 377);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2251, 2434);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("EBp(Tb\"1R");
      iOContext0.allocTokenBuffer(47);
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("expected padding character '");
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      writerBasedJsonGenerator0.writeString("expected padding character '");
      System.setCurrentTimeMillis(1000L);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("N/$j~:Vesp[*.0Ao:Rb");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(255);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2562), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("N/$j~:Vesp[*.0Ao:Rb");
      writerBasedJsonGenerator0._verifyValueWrite(".#J#79f_pi(BJ(?$|7;");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPre=tyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber(1885.7266111572021);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0._writeFieldName(".#J#79f_pi(BJ(?$|7;", true);
      writerBasedJsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis(4078L);
      Base64Variant base64Variant0 = new Base64Variant("N/$j~:Vesp[*.0Ao:Rb", "com.fasterxml.jackson.core.util.DefaultPre=tyPrinter$NopIndenter", false, '3', 10);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        writerBasedJsonGenerator0._writeBinary(base64Variant0, pipedInputStream0, byteArray0, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 19, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setCurrentValue((Object) null);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "dig{#";
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext1.allocBase64Buffer();
      stringWriter0.append(' ');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("lNzQF0WgzMw\"xz^]");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber("Too few bytes available: missing ");
      writerBasedJsonGenerator0._verifyValueWrite("lNzQF0WgzMw\"xz^]");
      writerBasedJsonGenerator0.writeFieldName("write a number");
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("write a number");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocBase64Buffer();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw('d');
      writerBasedJsonGenerator0._verifyValueWrite("U@CBlD^aZpf+Z");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonGenerator0.writeNumber((-1.0F));
      iOContext0.allocReadIOBuffer(847);
      jsonGenerator0.writeNumber("was expecting comma to separate ");
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.Base64Variant");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      jsonGenerator0.writeNumber((short) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "N/$j~:Vesp[*.0Ao:R";
      StringReader stringReader0 = new StringReader("N/$j~:Vesp[*.0Ao:R");
      CharsToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('d');
      stringWriter0.flush();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-932), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(474.47F);
      String string1 = "Current context not an ARRAY but ";
      iOContext1.releaseTokenBuffer((char[]) null);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Bn1::]F");
      stringWriter1.flush();
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-23));
      writerBasedJsonGenerator0.writeRaw('_');
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      StringWriter stringWriter0 = new StringWriter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('}');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 65, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-229), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator1.writeRaw("Rv.-aB");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      Base64Variant base64Variant0 = null;
      byte[] byteArray0 = null;
      double[] doubleArray0 = new double[5];
      iOContext0.allocBase64Buffer();
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3;
      iOContext1.allocWriteEncodingBuffer(2);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 57343;
      writerBasedJsonGenerator0.writeArray(doubleArray0, 3, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 0, 193);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-11.205112F));
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[5] = 'P';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      iOContext0.releaseTokenBuffer((char[]) null);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O6rQVf.!4y[(&");
      SerializedString serializedString0 = new SerializedString("O6rQVf.!4y[(&");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-23));
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 19, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      iOContext0.releaseTokenBuffer((char[]) null);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("");
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocNameCopyBuffer(2);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      String string0 = "C#7L)~^c}*M ^9";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("C#7L)~^c}*M ^9", 4001, 4001);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", false);
      iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0._checkStdFeatureChanges(43, 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      defaultPrettyPrinter1.writeEndArray(writerBasedJsonGenerator1, 0);
      writerBasedJsonGenerator1._writePPFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      defaultPrettyPrinter0.writeObjectEntrySeparator(writerBasedJsonGenerator1);
      writerBasedJsonGenerator1.writeNumber((short)2000);
      writerBasedJsonGenerator0.writeString("write a number");
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator1.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      SerializedString serializedString0 = new SerializedString("EBp(Tb\"1R");
      iOContext0.allocNameCopyBuffer(2);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[22];
      charArray0[3] = 'h';
      charArray0[4] = '<';
      charArray0[5] = 'z';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("C#7L)~^c}*M ^9", 4000, 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-11.205112F));
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocBase64Buffer();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw('d');
      writerBasedJsonGenerator0._verifyValueWrite("U@CBlD^aZpf+Z");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonGenerator0.writeNumber((-1.0F));
      iOContext0.allocReadIOBuffer(847);
      jsonGenerator0.writeNumber("was expecting comma to separate ");
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      jsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.Base64Variant");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      jsonGenerator0.writeNumber((short) (byte) (-23));
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('#');
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.base.ParserBase");
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('o');
      writerBasedJsonGenerator0.writeRaw('o');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber(57343);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumber("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = '9';
      charArray0[5] = 'o';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", false);
      iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      jsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)42;
      writerBasedJsonGenerator0.writeStartObject();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 79, (-1849));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 4381);
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write("H]GkCeX");
      stringWriter0.append('<');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1128, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber((-1074.0F));
      writerBasedJsonGenerator0.writeNumber("KT8h");
      writerBasedJsonGenerator0._verifyValueWrite("KT8h");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      writerBasedJsonGenerator0._checkStdFeatureChanges(4288, 615);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      defaultPrettyPrinter0.writeEndArray(jsonGenerator0, 0);
      writerBasedJsonGenerator0._writePPFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, true);
      writerBasedJsonGenerator0.writeNumber((short) (-3));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter", (int) (short)2000, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 10, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeNumber("*8Y6_h&9>UvL");
      writerBasedJsonGenerator0._verifyValueWrite(" ");
      writerBasedJsonGenerator0.writeFieldName("SCN,xeAaU`1lM%E");
      writerBasedJsonGenerator0._checkStdFeatureChanges(0, (-972));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writePPFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, true);
      writerBasedJsonGenerator0.writeNumber((short)2000);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("'-tBAHQ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("N/$j~:Vesp[*.0Ao:Rb");
      writerBasedJsonGenerator0.writeNumber(1504.4949);
      writerBasedJsonGenerator0.writeNumber(2554.3982F);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 57343);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1076);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pipedInputStream0);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2226, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      StringWriter stringWriter1 = new StringWriter(2);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 102, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeFieldName("file");
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 50);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      writerBasedJsonGenerator0.writeString(charArray0, 32, (-675));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("N/$j~:Vesp[*.0Ao:Rb");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 224, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 224, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.base.ParserBase");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("Invalid input: JSON Pointer expression must start with '/': \"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('X');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.base.ParserBase");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      stringWriter0.write((-2587));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      iOContext1.allocWriteEncodingBuffer(2);
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-9216));
      writerBasedJsonGenerator0.writeNumber((-2907.0F));
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 107, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('o');
      writerBasedJsonGenerator0.writeRaw('o');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber(107);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumber((-1146.9935F));
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString1 = writerBasedJsonGenerator0._currentEscape;
      PipedInputStream pipedInputStream0 = new PipedInputStream(536870884);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, (-1771));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      StringWriter stringWriter1 = new StringWriter(2);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 102, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeFieldName("file");
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, 50);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-782));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Operation not supported by generator of type ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeNumber((short) (-3276));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      writerBasedJsonGenerator0.writeRaw('e');
      iOContext0.allocWriteEncodingBuffer(117);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite(") not numeric, can not use numeric value accessors");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not ) not numeric, can not use numeric value accessors, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Current context not an object but ");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('&');
      stringWriter2.append((CharSequence) "U76R?l.,D2=u<6*tl*");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)34, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((short) (-952));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", (int) (short) (-952), 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("lNzQF0WgzMw\"xz^]");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeNumber(2749.46711);
      writerBasedJsonGenerator0.writeNumber((float) 763);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator1._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator0.writeNumber((-1914.0F));
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 107);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 107);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext1.allocReadIOBuffer(4620);
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeNumber(474.6);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 58);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 58 bytes (out of 58)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(2622.773974);
      writerBasedJsonGenerator0.writeNumber((-1.0F));
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0._checkStdFeatureChanges(43, 0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writePPFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator1.writeNumber((short)2000);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeRaw("write a number", (-1360), (int) (short)2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "=I&EFj~#Y";
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("=I&EFj~#Y");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-11.205112F));
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[5] = 'P';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      writerBasedJsonGenerator0.writeRaw('e');
      iOContext0.allocWriteEncodingBuffer(117);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("lNzQF0WgzMw\"xz^]");
      writerBasedJsonGenerator0.writeNumber((float) 3);
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitLength();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2850, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator0._verifyValueWrite("79");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1._verifyPrettyValueWrite("write a number");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)42;
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("O6rQVf.!4y[(&");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writePPFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l2d-`y~j<FZia", true);
      iOContext0.allocTokenBuffer(34);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l2d-`y~j<FZia");
      StringReader stringReader0 = new StringReader("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(757);
      stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1966), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-3.5099669F));
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jactson.core.JsonGenerationException", true);
      try { 
        writerBasedJsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("A");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "A");
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32768, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(61);
      writerBasedJsonGenerator0._writeFieldName("U76R?l.,D2=u<6*tl*", true);
      writerBasedJsonGenerator0._writeFieldName("Qf['=KJ9vS~j37}\"P~!", true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 61);
      bigDecimal0.scale();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[2];
      writerBasedJsonGenerator0._maximumNonEscapedChar = 3927;
      charArray0[0] = 'd';
      charArray0[1] = '4';
      writerBasedJsonGenerator0.writeString(charArray0, 59, (-3719));
      writerBasedJsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(ymn~wt[9-bQJ%pe");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("@j");
      writerBasedJsonGenerator0.writeFieldName("(ymn~wt[9-bQJ%pe");
      char[] charArray0 = iOContext0.allocTokenBuffer(47);
      writerBasedJsonGenerator0.writeString("(ymn~wt[9-bQJ%pe");
      writerBasedJsonGenerator0.writeNumber(1068.68F);
      writerBasedJsonGenerator0.writeNumber("(ymn~wt[9-bQJ%pe");
      writerBasedJsonGenerator0._verifyValueWrite("(ymn~wt[9-bQJ%pe");
      writerBasedJsonGenerator0.writeString(charArray0, 3, 377);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.append((CharSequence) "Qf['=KJ9vS~j37}\"P~!");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y8MvpbOL/(ecFa#:r:j", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 100, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      writerBasedJsonGenerator0._verifyValueWrite(") not numeric, can not use numeric value accessors");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber((double) 639L);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)92;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-2014), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("N/$j~:Vesp[*.0Ao:Rb");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 224, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(255);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2562), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((float) 33);
      writerBasedJsonGenerator0.writeNumber("N/$j~:Vesp[*.0Ao:Rb");
      writerBasedJsonGenerator0._verifyValueWrite(".#J#79f_pi(BJ(?$|7;");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber(1904.9233);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0._writeFieldName(".#J#79f_pi(BJ(?$|7;", true);
      SerializedString serializedString0 = new SerializedString("Q>_/Hn}6~0i>O<");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = new SerializedString("EBp(Tb\"1R");
      char[] charArray0 = iOContext0.allocNameCopyBuffer((-5266));
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 98, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeString(charArray0, (-43), 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(85);
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)5;
      byteArray0[0] = (byte) (-47);
      byteArray0[4] = (byte)116;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "=I&FjN#Y");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 63, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString0 = new SerializedString("=I&FjN#Y");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(33);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32768, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'V';
      charArray0[2] = ':';
      charArray0[3] = 'K';
      charArray0[4] = 'n';
      charArray0[5] = 'O';
      charArray0[6] = 'H';
      charArray0[7] = '=';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      int int0 = 61;
      writerBasedJsonGenerator0.writeNumber(61);
      String string0 = "Qf['=KJ9vS~j37}\"P~!";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("U76R?l.,D2=u<6*tl*", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      writerBasedJsonGenerator0.writeString(charArray0, 3358, (-1309));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw('C');
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      String string0 = ", NC_wS'@R$O}qF)";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(", NC_wS'@R$O}qF)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext1.allocReadIOBuffer(4620);
      StringWriter stringWriter1 = new StringWriter(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 26);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 26, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '\"';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("EBp(Tb\"1R");
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("EBp(Tb\"1R");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 200, 200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 56319;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("EBp(Tb\"1R");
      char[] charArray0 = iOContext0.allocTokenBuffer(47);
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("expected padding character '");
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      writerBasedJsonGenerator0.writeString("expected padding character '");
      writerBasedJsonGenerator0.writeString(charArray0, 55, 47);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("EBp(Tb\"1R");
      iOContext0.allocTokenBuffer(47);
      writerBasedJsonGenerator0.writeString("EBp(Tb\"1R");
      writerBasedJsonGenerator0.writeNumber(1068.68F);
      writerBasedJsonGenerator0.writeNumber("EBp(Tb\"1R");
      writerBasedJsonGenerator0._verifyValueWrite("EBp(Tb\"1R");
      String string0 = "";
      try { 
        writerBasedJsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber((long) 57343);
      writerBasedJsonGenerator0.writeRaw('2');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)73);
      writerBasedJsonGenerator0.writeRaw('@');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString1 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)3988);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = new SerializedString("EBp(Tb\"1R");
      char[] charArray0 = iOContext0.allocNameCopyBuffer((-5266));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('V');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3930);
      writerBasedJsonGenerator0.writeString(charArray0, 2, 21);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("=I&EFj~#Y");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("=I&EFj~#Y", false);
      try { 
        writerBasedJsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 57343;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = null;
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      char char0 = 'k';
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = ") not numeric, can not use numeric value accessors";
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an object but ");
      try { 
        writerBasedJsonGenerator0.writeFieldName(") not numeric, can not use numeric value accessors");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      iOContext0.allocNameCopyBuffer(3115);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 114);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)2;
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 2125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "EBp@Tb?1R";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp@Tb?1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("EBp@Tb?1R");
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("EBp@Tb?1R");
      writerBasedJsonGenerator0.writeNumber("EBp@Tb?1R");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      int int0 = 1378;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1378, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "U76R?l.,D2=u<6*tl*");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 939, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString0 = new SerializedString("Qf['=KJ9vS~j37}\"P~!");
      serializedString0.asQuotedChars();
      writerBasedJsonGenerator0.writeArrayFieldStart("Qf['=KJ9vS~j37}\"P~!");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      writerBasedJsonGenerator0.writeString(charArray0, 3358, (-1309));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw('C');
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 114);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('2');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-123);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeRaw('6');
      writerBasedJsonGenerator0.writeString("|P{o");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('X');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-181), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("Invalid input: JSON Pointer expression must start with '/': \"");
      writerBasedJsonGenerator0._verifyValueWrite("Invalid input: JSON Pointer expression must start with '/': \"");
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeNumber((double) 757);
      writerBasedJsonGenerator0.writeRaw("Invalid input: JSON Pointer expression must start with '/': \"");
      writerBasedJsonGenerator0.writeRaw("Invalid input: JSON Pointer expression must start with '/': \"", 1, 2);
      writerBasedJsonGenerator0._flushBuffer();
      System.setCurrentTimeMillis(0);
      BigDecimal bigDecimal0 = new BigDecimal(1521.948106);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 748, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(748);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber((-257.04679));
      writerBasedJsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 2379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('2');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-123);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeRaw('6');
      writerBasedJsonGenerator0.writeString("|P{o");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((-131));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x", true);
      StringWriter stringWriter0 = new StringWriter(126);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      writerBasedJsonGenerator0.writeRaw('e');
      writerBasedJsonGenerator0.writeRaw('e');
      SerializedString serializedString0 = new SerializedString("");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4000, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56319);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeString((char[]) null, (-1442), (int) (short) (-9216));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF16_LE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("EBp(Tb\"1R");
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2721, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("EBp(Tb\"1R");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)36;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeRaw('}');
      writerBasedJsonGenerator0.writeString("|P{o");
      writerBasedJsonGenerator0._verifyValueWrite("|P{o");
      writerBasedJsonGenerator0.writeNumber(2721);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("U76R?l.,D2=u<6*tl*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(757);
      writerBasedJsonGenerator0.writeRaw('<');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 57343;
      doubleArray0[1] = (double) (byte)49;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 757;
      doubleArray0[4] = 1151.719688;
      doubleArray0[5] = (double) 33;
      doubleArray0[6] = (double) (byte)49;
      doubleArray0[7] = (double) 3;
      writerBasedJsonGenerator0.writeArray(doubleArray0, (-4009), (-596));
      writerBasedJsonGenerator0._writeFieldName("", true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeFieldName("6v|E_");
      SerializedString serializedString0 = new SerializedString("6v|E_");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      String string0 = "Current context not an ARRAY but ";
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-23);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "=I&EFj~#Y";
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 33);
      writerBasedJsonGenerator0.writeNumber("=I&EFj~#Y");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("=I&EFj~#Y", false);
      try { 
        writerBasedJsonGenerator0.writeString("null");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 33);
      writerBasedJsonGenerator0.writeNumber("=I&EFj~#Y");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("=I&EFj~#Y", false);
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-2));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((-3719));
      writerBasedJsonGenerator0.writeRaw('<');
      writerBasedJsonGenerator0._writeFieldName("Qf['=KJ9vS~j37}\"P~!", true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
      iOContext0.allocReadIOBuffer(2668);
      StringWriter stringWriter2 = new StringWriter(3102);
      StringWriter stringWriter3 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter2, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1346), (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeNumberField("", (double) 3102);
      writerBasedJsonGenerator0.writeRaw('^');
      SerializedString serializedString0 = new SerializedString("");
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext1.allocReadIOBuffer(4620);
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter();
      boolean boolean0 = false;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumberField("", 2147.343240405944);
      writerBasedJsonGenerator0.writeRaw('e');
      String string0 = "p$2CJx34yrn!T3:.)";
      SerializedString serializedString0 = new SerializedString("p$2CJx34yrn!T3:.)");
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      stringWriter0.write("W@L-");
      writerBasedJsonGenerator0.writeNumber(639L);
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw('k');
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)73);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocTokenBuffer(2130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U76R?l.,D2=u<6*tl*");
      StringReader stringReader0 = new StringReader("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(757);
      stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("U76R?l.,D2=u<6*tl*");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("EBp(Tb\"1R");
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("EBp(Tb\"1R");
      writerBasedJsonGenerator0.writeRaw('}');
      writerBasedJsonGenerator0.writeString("|P{o");
      writerBasedJsonGenerator0._verifyValueWrite("|P{o");
      writerBasedJsonGenerator0.writeNumber(2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("|P{o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-2919), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1, 0, 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2919), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("Can not write a field name, expecting a value", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((-3719));
      writerBasedJsonGenerator0.writeRaw('<');
      writerBasedJsonGenerator0._writeFieldName("Qf['=KJ9vS~j37}\"P~!", true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter0.write("write a boolean value");
      writerBasedJsonGenerator0.writeNumber(0L);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeRaw('k');
      writerBasedJsonGenerator0.writeRaw(':');
      SerializedString serializedString0 = new SerializedString("p$2CJx34yrn!T3:.)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)123);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "=I&FjN#Y";
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      StringWriter stringWriter0 = new StringWriter(33);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "=I&FjN#Y", 2, 3);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "=I&FjN#Y");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('Y');
      writerBasedJsonGenerator0._verifyValueWrite("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 0, 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      iOContext0.allocWriteEncodingBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber((-257.04679));
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('2');
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((long) 57343);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String((byte[]) null, 2, (-1382));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000000, (byte) (-92));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      StringReader stringReader0 = new StringReader(" of 4-char base64 unit: padding only legal as 3rd or 4th character");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-92), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('2');
      writerBasedJsonGenerator0.writeBoolean(true);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '2';
      writerBasedJsonGenerator0.writeNumber("write a string");
      writerBasedJsonGenerator0._verifyValueWrite("write a string");
      writerBasedJsonGenerator0.writeFieldName("write a string");
      writerBasedJsonGenerator0.writeNumber(3268.682044013403);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('X');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-181), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'I';
      charArray0[4] = 'X';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      stringWriter0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-23);
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter0.write("Current context not an ARRAY but ");
      char[] charArray0 = null;
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 2295, (int) (byte) (-23));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2721, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber("");
      String string0 = "|P{o";
      writerBasedJsonGenerator0.writeRaw('}');
      writerBasedJsonGenerator0.writeString("|P{o");
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      iOContext2.allocWriteEncodingBuffer(8000);
      iOContext2.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((short)5802);
      writerBasedJsonGenerator0.writeNumber((float) (short)5802);
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, (short)5802, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw('o');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("IGNORE_UNDEFINED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("=I&EFj~#Y");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-93);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)51, 2000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter0.write("write a boolean value");
      writerBasedJsonGenerator0.writeNumber(0L);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1577, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = ',';
      charArray0[2] = '*';
      charArray0[3] = 'J';
      charArray0[4] = 'T';
      charArray0[6] = '|';
      charArray0[7] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2721, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1984, 50, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 101, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.getOutputBuffered();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeNumber("U76R?l.,D2=u<6*tl*");
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
      writerBasedJsonGenerator0.writeNumber((-257.04679));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'k';
      charArray0[2] = '6';
      charArray0[3] = 'M';
      charArray0[4] = '|';
      charArray0[5] = '1';
      charArray0[6] = '&';
      charArray0[7] = '\\';
      charArray0[8] = ',';
      StringReader stringReader0 = new StringReader("X*gaiz|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, (-433), true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 108, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("g6)|Vk%4jdFPb", true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      iOContext1.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 61, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = '\"';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("");
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '8';
      charArray0[2] = '0';
      charArray0[3] = ':';
      charArray0[4] = 'j';
      charArray0[5] = '/';
      charArray0[6] = 'a';
      charArray0[7] = '.';
      charArray0[8] = 'q';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4072, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1);
      char char0 = '{';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(" bytes (out of ", (-585), (-585));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "U76R?l.,D2=u<6*tl*";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(757);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 13, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-966), 1716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -966
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 13, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&EFj~#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 335, (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((-1216));
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw('U');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-410), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('2');
      writerBasedJsonGenerator0._verifyValueWrite("");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (-3644), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '&';
      charArray0[2] = 'o';
      charArray0[3] = '#';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      charArray0[4] = 'e';
      charArray0[5] = ']';
      charArray0[6] = '5';
      charArray0[7] = 'u';
      charArray0[8] = '\"';
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("");
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocWriteEncodingBuffer(0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("VZX");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("VZX", "VZX", true, '$', (-1829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(11);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer(2568);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      stringWriter0.write(21);
      stringWriter0.close();
      int int0 = 0;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      String string0 = "";
      writerBasedJsonGenerator0.writeStringField("", "Duplicate field '");
      writerBasedJsonGenerator0.writeNumber(5);
      char char0 = '{';
      String string1 = " bytes (out of ";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(" bytes (out of ", 21, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 663, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 33);
      writerBasedJsonGenerator0.writeNumber("=I&FjN#Y");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      iOContext1.allocReadIOBuffer(4620);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 46, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EBp(Tb\"1R");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2721, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeString("|P{o");
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocWriteEncodingBuffer(0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("VZX");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("VZX", "VZX", false, '$', (-1829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(1427);
      writerBasedJsonGenerator0.writeNumber((short) (-9216));
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      iOContext1.allocWriteEncodingBuffer(2);
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-9216));
      writerBasedJsonGenerator0.writeNumber((-2907.0F));
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 3618, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '&';
      charArray0[2] = 'o';
      charArray0[3] = '#';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      charArray0[4] = 'e';
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '&';
      charArray0[2] = 'o';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      writerBasedJsonGenerator0.close();
      charArray0[3] = '#';
      charArray0[4] = 'e';
      charArray0[5] = ']';
      charArray0[6] = '5';
      charArray0[7] = 'u';
      charArray0[8] = '\"';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      iOContext1.allocReadIOBuffer(4620);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 46, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(21);
      stringWriter0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter1 = new StringWriter(3030);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 21, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      System.setCurrentTimeMillis((-1106));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-509), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'o';
      charArray0[2] = '?';
      int int0 = (-1503);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 4259, (-1503));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = ',';
      charArray0[2] = '*';
      charArray0[3] = 'J';
      charArray0[4] = 'T';
      charArray0[5] = '7';
      charArray0[6] = '|';
      char char0 = 'j';
      charArray0[7] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2721, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1984, 50, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 101, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.getOutputBuffered();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      int int0 = 1934;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1934, 2721);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(1);
      filteringParserDelegate0.isClosed();
      char[] charArray0 = null;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "=I&FjN#Y");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 2, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 251, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter0 = new StringWriter(1492);
      StringWriter stringWriter1 = stringWriter0.append('M');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2357, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString((char[]) null, 2040, (-64));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 0, 3993);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = ',';
      charArray0[2] = '*';
      charArray0[3] = 'J';
      charArray0[4] = 'T';
      charArray0[5] = '7';
      charArray0[6] = '|';
      charArray0[7] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2721, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1984, 50, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 101, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.getOutputBuffered();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '&';
      charArray0[2] = 'o';
      charArray0[3] = '#';
      charArray0[4] = 'e';
      charArray0[5] = ']';
      charArray0[6] = '5';
      charArray0[7] = 'u';
      charArray0[8] = '\"';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=I&FjN#Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(6);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(1);
      filteringParserDelegate0.isClosed();
      stringWriter0.append('Q');
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1539), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 3);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'j';
      charArray0[2] = ',';
      charArray0[3] = 'T';
      charArray0[4] = '7';
      charArray0[5] = '\'';
      charArray0[6] = 'T';
      charArray0[7] = '7';
      charArray0[8] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 757, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 50, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("P");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      stringWriter0.write(21);
      stringWriter0.close();
      int int0 = 0;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber(5);
      char char0 = '{';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(" bytes (out of ", 21, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer((int) (short) (-9216));
      writerBasedJsonGenerator0.writeNumber((short)598);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2469, (ObjectCodec) null, stringWriter0);
      short short0 = (short) (-9216);
      iOContext0.allocWriteEncodingBuffer(1427);
      writerBasedJsonGenerator0.writeNumber((short) (-9216));
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W5Ltv");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1492, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString((char[]) null, 2040, (-1421));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, (-2), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("Can not writ~ 4 field name, expecting a value");
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString("M+;94JljR");
      stringWriter0.append((CharSequence) "M+;94JljR");
      writerBasedJsonGenerator0._verifyValueWrite("M+;94JljR");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      writerBasedJsonGenerator0.writeString("M+;94JljR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3766);
      int int0 = GeneratorBase.SURR1_FIRST;
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(3364, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U76R?l.,D2=u<6*tl*", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 757, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString(71);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((-3699));
      writerBasedJsonGenerator0._writeFieldName("U76R?l.,D2=u<6*tl*", true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 4201);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 56320);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, 71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 93, 0, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 475, (ObjectCodec) null, stringWriter0);
      iOContext1.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      writerBasedJsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "o2 R,T}zlz", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o2 R,T}zlz");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-301), (ObjectCodec) null, mockPrintStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 6000, (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2469, (ObjectCodec) null, stringWriter0);
      short short0 = (short) (-9216);
      iOContext0.allocWriteEncodingBuffer(1427);
      writerBasedJsonGenerator0.writeNumber((short) (-9216));
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      StringBuilder stringBuilder0 = new StringBuilder("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0, 0, 6);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 380, (ObjectCodec) null, stringWriter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }
}
