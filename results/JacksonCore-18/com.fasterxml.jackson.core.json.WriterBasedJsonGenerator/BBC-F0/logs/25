* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 11048
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 1005217408
* Starting evolution
* Initial Number of Goals in DynaMOSA = 589 / 2629
* Search finished after 304s and 55 generations, 48627 statements, best individual has fitness: 1509.0
* Minimizing test suite
[MASTER] 12:17:24.882 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 47%
* Total number of goals: 967
* Number of covered goals: 455
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 508
* Number of covered goals: 228
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 33%
* Total number of goals: 544
* Number of covered goals: 180
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 44
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 77%
* Total number of goals: 44
* Number of covered goals: 34
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 508
* Number of covered goals: 224
* Generated 133 tests with total length 2498
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:18:10.656 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6760833333333334% of time used, but only 29/133 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 12:19:18.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 12:19:18.928 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(iOContext0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());

JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertNotNull(iOContext1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());

ObjectCodec objectCodec0 = null;
StringWriter stringWriter0 = new StringWriter();
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

char char0 = '';
StringWriter stringWriter1 = stringWriter0.append('');
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("", stringWriter0.toString());
assertEquals("", stringWriter1.toString());

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5, (ObjectCodec) null, stringWriter0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(5, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
assertNotNull(serializedString0);
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(5, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(5, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(5, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());

writerBasedJsonGenerator0.writeBoolean(false);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(5, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());

byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertNotNull(byteArray0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(8000, byteArray0.length);

writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 1220);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertSame(stringWriter0, stringWriter1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(5, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(1637, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(8000, byteArray0.length);

char[] charArray0 = iOContext1.allocNameCopyBuffer(536870549);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertNotNull(charArray0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(536870549, charArray0.length);

byte[] byteArray1 = iOContext1.allocBase64Buffer();
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotSame(byteArray1, byteArray0);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertNotNull(byteArray1);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(2000, byteArray1.length);

String string0 = "CANONICALIZE_FIELD_NAMES";
SerializedString serializedString1 = new SerializedString(string0);
assertFalse(serializedString1.equals((Object)serializedString0));
assertNotNull(serializedString1);
assertEquals(24, serializedString1.charLength());
assertEquals("CANONICALIZE_FIELD_NAMES", serializedString1.toString());
assertEquals("CANONICALIZE_FIELD_NAMES", serializedString1.getValue());

int int0 = (-1241);
WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, int0, objectCodec0, stringWriter0);

[MASTER] 12:19:19.163 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0/tests/25
* Done!

* Computation finished
