* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-100
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 14942
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 3085583442
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 589 / 2629
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 605s and 565 generations, 449110 statements, best individual has fitness: 670.0
* Minimizing test suite
[MASTER] 07:32:39.156 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 967
* Number of covered goals: 773
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 508
* Number of covered goals: 405
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 92
* Number of covered goals: 92
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 70%
* Total number of goals: 544
* Number of covered goals: 379
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 82%
* Total number of goals: 44
* Number of covered goals: 36
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 508
* Number of covered goals: 405
* Generated 296 tests with total length 5391
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:33:29.886 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6990166666666666% of time used, but only 55/296 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 07:33:51.406 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 07:33:51.406 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_35_1633678431406
[MASTER] 07:33:52.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:52.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:53.104 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:53.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:53.879 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:54.206 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:54.468 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:54.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:55.147 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:55.499 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:55.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:56.107 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:56.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:56.798 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:57.027 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:57.423 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:57.707 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:57.955 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:59.644 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:59.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:00.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:00.596 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:00.831 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:01.095 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:01.359 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:01.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:01.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:02.359 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:02.651 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:02.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:03.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:03.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:03.628 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:04.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:04.246 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:34:29.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 07:34:29.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

String string0 = "#ej*/";
IOContext iOContext0 = new IOContext(bufferRecycler0, "#ej*/", false);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(iOContext0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());

ObjectCodec objectCodec0 = null;
StringWriter stringWriter0 = new StringWriter(1);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

int int0 = 1000000000;
StringWriter stringWriter1 = new StringWriter(1000000000);

[MASTER] 07:34:43.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...adsCanonicalizer\u00["4\u001u\u002"\u001-\u00"2\u0044]> but was:<...adsCanonicalizer\u00[3C\u0061\u007A\u0065\u002D\u004C]>
[MASTER] 07:34:43.474 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

BufferRecycler bufferRecycler1 = new BufferRecycler();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler1);
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));

IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext0);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());

StringWriter stringWriter0 = new StringWriter(0);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator0);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());

writerBasedJsonGenerator0.writeStartObject();
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());

writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(54, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());

writerBasedJsonGenerator0.writeEndObject();
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(55, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());

writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(109, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());

char[] charArray0 = new char[17];
charArray0[0] = 'C';
charArray0[2] = 'o';
charArray0[2] = 'g';
charArray0[4] = 'a';
charArray0[5] = 'g';
WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(16);
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator1);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(109, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(109, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());

writerBasedJsonGenerator0._writeFieldName("<aze-L1", false);
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(bufferRecycler1, bufferRecycler0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("{com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer},com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer\\u00\"4\\u001u\\u002\"\\u001-\\u00\"2\\u0044", stringWriter0.toString());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());


[MASTER] 07:34:44.525 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<,\u00["4\u001u\u002"\u001-\u00"2\u0044]> but was:<,\u00[3C\u0061\u007A\u0065\u002D\u004C]>
[MASTER] 07:34:44.530 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter(0);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append('d');
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());

IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext0);
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertNotNull(tokenFilter0);
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());

StringWriter stringWriter2 = new StringWriter();
assertNotNull(stringWriter2);
assertFalse(stringWriter2.equals((Object)stringWriter0));
assertFalse(stringWriter2.equals((Object)stringWriter1));
assertEquals("", stringWriter2.toString());

JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertNotSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertNotSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext1);
assertFalse(stringWriter0.equals((Object)stringWriter2));
assertFalse(stringWriter1.equals((Object)stringWriter2));
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-6505), (ObjectCodec) null, stringWriter2);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator0);
assertFalse(stringWriter0.equals((Object)stringWriter2));
assertFalse(stringWriter1.equals((Object)stringWriter2));
assertFalse(stringWriter2.equals((Object)stringWriter0));
assertFalse(stringWriter2.equals((Object)stringWriter1));
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter2.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-6505), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(16);
assertNotSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertNotSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(iOContext0, iOContext1);
assertNotSame(stringWriter2, stringWriter0);
assertNotSame(stringWriter2, stringWriter1);
assertSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);
assertFalse(stringWriter0.equals((Object)stringWriter2));
assertFalse(stringWriter1.equals((Object)stringWriter2));
assertFalse(stringWriter2.equals((Object)stringWriter0));
assertFalse(stringWriter2.equals((Object)stringWriter1));
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter2.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-6505), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(16, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-6505), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());

writerBasedJsonGenerator0._writeFieldName("<aze-L1", true);
assertNotSame(stringWriter0, stringWriter2);
assertSame(stringWriter0, stringWriter1);
assertNotSame(stringWriter1, stringWriter2);
assertSame(stringWriter1, stringWriter0);
assertSame(iOContext0, iOContext1);
assertNotSame(stringWriter2, stringWriter0);
assertNotSame(stringWriter2, stringWriter1);
assertSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(stringWriter0.equals((Object)stringWriter2));
assertFalse(stringWriter1.equals((Object)stringWriter2));
assertFalse(stringWriter2.equals((Object)stringWriter0));
assertFalse(stringWriter2.equals((Object)stringWriter1));
assertEquals("d", stringWriter0.toString());
assertEquals("d", stringWriter1.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(",\\u00\"4\\u001u\\u002\"\\u001-\\u00\"2\\u0044", stringWriter2.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(16, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-6505), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());


* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-opt-100/tests/3
* Done!

* Computation finished
