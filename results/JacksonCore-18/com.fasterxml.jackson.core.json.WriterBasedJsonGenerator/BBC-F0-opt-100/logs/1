* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-100
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 20487
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 542963141
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 589 / 2629
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 603s and 137 generations, 139937 statements, best individual has fitness: 1248.0
* Minimizing test suite
[MASTER] 07:32:08.458 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 967
* Number of covered goals: 586
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 508
* Number of covered goals: 277
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 40%
* Total number of goals: 544
* Number of covered goals: 220
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 44
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 54%
* Total number of goals: 508
* Number of covered goals: 275
* Generated 169 tests with total length 3528
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:32:54.859 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6902% of time used, but only 45/169 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 07:33:01.667 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 07:33:01.667 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_3_1633678381667
[MASTER] 07:33:02.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:02.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:03.299 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:03.747 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:04.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:04.614 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:05.199 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:05.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:05.932 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:06.208 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:07.276 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:07.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:08.038 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:08.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:08.803 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:09.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:09.493 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:09.716 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:09.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:10.128 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:10.452 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:10.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:10.986 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:11.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:11.408 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:11.831 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:12.036 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:12.298 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:12.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:12.691 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:12.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:13.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:13.420 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:13.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:14.036 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:14.461 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:14.703 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:15.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:15.296 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:15.907 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:16.251 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:16.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:16.585 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:16.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:17.069 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:17.317 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:17.675 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:17.886 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:18.274 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:18.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:18.725 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:20.149 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:20.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:20.814 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:21.118 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:21.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:21.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:21.960 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:22.458 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:22.751 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:23.047 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:23.287 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:23.607 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:23.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:24.252 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:24.548 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:24.962 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:25.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:25.479 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:25.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:26.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:26.309 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:26.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:26.870 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 07:33:32.793 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"%\u00[257?\u00ls<.\u002"]U(> but was:<"%\u00[657?\u007C<.\u0064]U(>
[MASTER] 07:33:32.806 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertFalse(iOContext1.equals((Object)iOContext0));

BufferRecycler bufferRecycler1 = new BufferRecycler();
assertNotNull(bufferRecycler1);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));

IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, true);
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotNull(iOContext2);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(iOContext2.equals((Object)iOContext1));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

BigDecimal bigDecimal0 = BigDecimal.ONE;
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals((short)1, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

BigDecimal bigDecimal1 = new BigDecimal(1072);
assertEquals((byte)48, bigDecimal1.byteValue());
assertEquals((short)1072, bigDecimal1.shortValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(97);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext1, iOContext2);
assertNotSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.includeElement(0);
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter1, false, false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(97, filteringGeneratorDelegate0.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertNotNull(filteringGeneratorDelegate0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));

ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(97, filteringGeneratorDelegate0.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext1, iOContext2);
assertNotSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNull(objectCodec0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));

WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 79, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator2.getOutputBuffered());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(79, writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator2.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertNotNull(writerBasedJsonGenerator2);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator0));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator1));

writerBasedJsonGenerator0.writeString("%e7?|<.dU(\"2");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("\"%\\u00257?\\u00ls<.\\u002\"U(", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext1, iOContext2);
assertNotSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator2));

ObjectCodec objectCodec1 = filteringGeneratorDelegate0.getCodec();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("\"%\\u00257?\\u00ls<.\\u002\"U(", stringWriter0.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertEquals(4, filteringGeneratorDelegate0.getOutputBuffered());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(97, filteringGeneratorDelegate0.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext1, iOContext2);
assertNotSame(iOContext1, iOContext0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNull(objectCodec1);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext2));
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator2));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator2));

WriterBasedJsonGenerator writerBasedJsonGenerator3 = new WriterBasedJsonGenerator(iOContext2, 57343, (ObjectCodec) null, stringWriter0);
assertEquals(0, writerBasedJsonGenerator3.getFormatFeatures());
assertTrue(writerBasedJsonGenerator3.canOmitFields());
assertFalse(writerBasedJsonGenerator3.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator3.canWriteTypeId());
assertFalse(writerBasedJsonGenerator3.isClosed());
assertEquals(57343, writerBasedJsonGenerator3.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator3.getOutputBuffered());
assertEquals(127, writerBasedJsonGenerator3.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator3.canWriteObjectId());
assertFalse(writerBasedJsonGenerator3.canWriteBinaryNatively());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals("\"%\\u00257?\\u00ls<.\\u002\"U(", stringWriter0.toString());
assertNotNull(writerBasedJsonGenerator3);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator2));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator1));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator0));
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(iOContext2.equals((Object)iOContext1));

SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
assertNull(serializableString0);


[MASTER] 07:33:34.998 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"\u00[p5\u0025\u00nl\u00nF\u00ls\u00ns\u00p \u002"\u0055\u00p \u00pp]> but was:<"\u00[25\u0065\u0037\u003F\u007C\u003C\u002E\u0064\u0055\u0028\u0022]>
[MASTER] 07:33:35.007 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertFalse(iOContext1.equals((Object)iOContext0));

IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertTrue(iOContext2.isResourceManaged());
assertNull(iOContext2.getEncoding());
assertNotNull(iOContext2);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(iOContext2.equals((Object)iOContext1));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

BigDecimal bigDecimal0 = BigDecimal.ONE;
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals((byte)1, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-575), (ObjectCodec) null, stringWriter0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals((-575), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.includeElement(79);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter0, false, true);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals((-575), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertNotNull(filteringGeneratorDelegate0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals((-575), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertNull(objectCodec0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

writerBasedJsonGenerator0.writeString("%e7?|<.dU(\"2");
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"\\u00p5\\u0025\\u00nl\\u00nF\\u00ls\\u00ns\\u00p \\u002\"\\u0055\\u00p \\u00pp", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

ObjectCodec objectCodec1 = filteringGeneratorDelegate0.getCodec();
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"\\u00p5\\u0025\\u00nl\\u00nF\\u00ls\\u00ns\\u00p \\u002\"\\u0055\\u00p \\u00pp", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-575), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(7, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals((-575), writerBasedJsonGenerator1.getFeatureMask());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(7, filteringGeneratorDelegate0.getOutputBuffered());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext2);
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertNull(objectCodec1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext2));
assertFalse(iOContext0.equals((Object)iOContext1));

WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, 3995, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext2.isResourceManaged());
assertNull(iOContext2.getEncoding());
assertEquals("\"\\u00p5\\u0025\\u00nl\\u00nF\\u00ls\\u00ns\\u00p \\u002\"\\u0055\\u00p \\u00pp", stringWriter0.toString());
assertEquals(127, writerBasedJsonGenerator2.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertEquals(3995, writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator2.getOutputBuffered());
assertNotNull(writerBasedJsonGenerator2);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator1));
assertFalse(writerBasedJsonGenerator2.equals((Object)writerBasedJsonGenerator0));

SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
assertNull(serializableString0);


[MASTER] 07:33:37.290 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...4xAaR>J,gX "Z=F>\u00[l2\u00l2O\u00ls;N\u002 _<<\u002p]_> but was:<...4xAaR>J,gX "Z=F>\u00[76\u007BO\u007C;N\u0068_<<\u0062]_>
[MASTER] 07:33:37.297 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeString("");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializedString serializedString0 = new SerializedString("I]rjcVsf4xAaR>J,gX");
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(22, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

BigDecimal bigDecimal0 = new BigDecimal(1518.52074121);
assertEquals((short)1518, bigDecimal0.shortValue());
assertEquals((byte) (-18), bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(70, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((short)1518, bigDecimal0.shortValue());
assertEquals((byte) (-18), bigDecimal0.byteValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(90, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber((-2806L));
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(96, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(115, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(97);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(115, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(115, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator0.writeString("Z=F>v{O|;Nh_<<b_k");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\"\",I]rjcVsf4xAaR>J,gX 1518.520741210000096543808467686176300048828125,I]rjcVsf4xAaR>J,gX -2806I]rjcVsf4xAaR>J,gX \"Z=F>\\u00l2\\u00l2O\\u00ls;N\\u002 _<<\\u002p_", stringWriter0.toString());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
assertNull(serializableString0);


[MASTER] 07:33:39.096 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...,gX "" 56319.0I]\u00[lp\u002 \u002n\u00lFV\u00ln\u00224\u00l ]AaR>J,> but was:<...,gX "" 56319.0I]\u00[72\u006A\u0063\u007FV\u0073\u00664\u0078]AaR>J,>
[MASTER] 07:33:39.107 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeString("");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

SerializedString serializedString0 = new SerializedString("I]rjcVsf4xAaR>J,gX");
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(22, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

BigDecimal bigDecimal0 = new BigDecimal(1518.52074121);
assertEquals((byte) (-18), bigDecimal0.byteValue());
assertEquals((short)1518, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(70, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((byte) (-18), bigDecimal0.byteValue());
assertEquals((short)1518, bigDecimal0.shortValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(90, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(109, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(97);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(109, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(109, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

byte[] byteArray0 = new byte[1];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 55296, 2);
assertEquals((-55295), byteArrayInputStream0.available());
assertEquals(1, byteArray0.length);
assertNotNull(byteArrayInputStream0);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);

int int0 = writerBasedJsonGenerator1.writeBinary((InputStream) byteArrayInputStream0, 0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(112, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(112, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-55295), byteArrayInputStream0.available());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, byteArray0.length);
assertEquals(0, int0);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator1.writeNumber((float) 56319);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(120, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(120, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0._writeFieldName("I]rjcVsf4xAaR>J,gX", false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"\",I]rjcVsf4xAaR>J,gX 1518.520741210000096543808467686176300048828125,I]rjcVsf4xAaR>J,gXI]rjcVsf4xAaR>J,gX \"\" 56319.0I]\\u00lp\\u002 \\u002n\\u00lFV\\u00ln\\u00224\\u00l AaR>J,", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator1.writeNumber(0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"\",I]rjcVsf4xAaR>J,gX 1518.520741210000096543808467686176300048828125,I]rjcVsf4xAaR>J,gXI]rjcVsf4xAaR>J,gX \"\" 56319.0I]\\u00lp\\u002 \\u002n\\u00lFV\\u00ln\\u00224\\u00l AaR>J,", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(9, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString1.getValue());
assertEquals(" ", serializedString1.toString());
assertEquals(1, serializedString1.charLength());
assertNotSame(serializedString1, serializedString0);
assertNotNull(serializedString1);
assertFalse(serializedString1.equals((Object)serializedString0));

writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"\",I]rjcVsf4xAaR>J,gX 1518.520741210000096543808467686176300048828125,I]rjcVsf4xAaR>J,gXI]rjcVsf4xAaR>J,gX \"\" 56319.0I]\\u00lp\\u002 \\u002n\\u00lFV\\u00ln\\u00224\\u00l AaR>J,", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(29, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(97, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(19, serializedString0.charLength());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.toString());
assertEquals("I]rjcVsf4xAaR>J,gX", serializedString0.getValue());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(97, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(2, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(29, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(serializedString0, serializedString1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(serializedString0.equals((Object)serializedString1));


[MASTER] 07:33:56.356 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[2 \u00" \u00l \u005 \u00"s\u002"\u00" \u00n1\u00n2\u00p2\u00l \u00n2]> but was:<\u00[6A\u004E\u007E\u005E\u004C\u0064\u004E\u003D\u003B\u002B\u0078\u003B]>
[MASTER] 07:33:56.364 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertFalse(iOContext1.equals((Object)iOContext0));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter0, false, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertNotNull(filteringGeneratorDelegate0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter2.includeNull());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter2, tokenFilter1);
assertNotNull(tokenFilter2);

TokenFilter tokenFilter3 = tokenFilter1.includeProperty("'nall', 'trNe', 'falsf' o@ NaN");
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter0);
assertNotNull(tokenFilter3);

TokenFilter tokenFilter4 = tokenFilter3.includeElement(1);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter4.toString());
assertTrue(tokenFilter4.includeNull());
assertTrue(tokenFilter4.includeBinary());
assertTrue(tokenFilter4.includeRawValue());
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter1, tokenFilter4);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter3, tokenFilter4);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter4, tokenFilter0);
assertSame(tokenFilter4, tokenFilter1);
assertSame(tokenFilter4, tokenFilter3);
assertSame(tokenFilter4, tokenFilter2);
assertNotNull(tokenFilter4);

FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertEquals(0, filteringGeneratorDelegate1.getMatchCount());
assertFalse(filteringGeneratorDelegate1.canWriteTypeId());
assertFalse(filteringGeneratorDelegate1.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate1.getFormatFeatures());
assertFalse(filteringGeneratorDelegate1.canWriteObjectId());
assertTrue(filteringGeneratorDelegate1.canOmitFields());
assertFalse(filteringGeneratorDelegate1.canWriteBinaryNatively());
assertEquals(3, filteringGeneratorDelegate1.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate1.getOutputBuffered());
assertNotNull(filteringGeneratorDelegate1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate1.equals((Object)filteringGeneratorDelegate0));

filteringGeneratorDelegate0.writeObjectFieldStart("jN~^LdN=;+x;y");
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(7, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(7, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter3);
assertNotSame(filteringGeneratorDelegate0, filteringGeneratorDelegate1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate0.equals((Object)filteringGeneratorDelegate1));

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._writeFieldName("jN~^LdN=;+x;y", false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2\\u00l0{\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

writerBasedJsonGenerator1.writeBinary((Base64Variant) null, (InputStream) null, 57343);

[MASTER] 07:33:56.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[2 \u00" \u00l \u005 \u00"s\u002"\u00" \u00n1\u00n2\u00p2\u00l \u00n2]> but was:<\u00[6A\u004E\u007E\u005E\u004C\u0064\u004E\u003D\u003B\u002B\u0078\u003B]>
[MASTER] 07:33:56.582 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(iOContext1.isResourceManaged());
assertNull(iOContext1.getEncoding());
assertNotNull(iOContext1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertFalse(iOContext1.equals((Object)iOContext0));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter0, false, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertNotNull(filteringGeneratorDelegate0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter2 = tokenFilter1.includeProperty("'nall', 'trNe', 'falsf' o@ NaN");
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertTrue(tokenFilter2.includeBinary());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter2, tokenFilter1);
assertNotNull(tokenFilter2);

TokenFilter tokenFilter3 = tokenFilter2.includeElement(1);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertTrue(tokenFilter2.includeRawValue());
assertTrue(tokenFilter2.includeNull());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter2, tokenFilter0);
assertSame(tokenFilter2, tokenFilter3);
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter3, tokenFilter1);
assertNotNull(tokenFilter3);

boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter1.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeBinary());
assertTrue(tokenFilter1.includeRawValue());
assertFalse(filteringGeneratorDelegate1.canWriteBinaryNatively());
assertEquals(0, filteringGeneratorDelegate1.getMatchCount());
assertTrue(filteringGeneratorDelegate1.canOmitFields());
assertEquals(0, filteringGeneratorDelegate1.getOutputBuffered());
assertFalse(filteringGeneratorDelegate1.canWriteTypeId());
assertEquals(3, filteringGeneratorDelegate1.getHighestEscapedChar());
assertEquals(0, filteringGeneratorDelegate1.getFormatFeatures());
assertFalse(filteringGeneratorDelegate1.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate1.canWriteObjectId());
assertNotNull(filteringGeneratorDelegate1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate1.equals((Object)filteringGeneratorDelegate0));

filteringGeneratorDelegate0.writeObjectFieldStart("jN~^LdN=;+x;y");
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertEquals(7, filteringGeneratorDelegate0.getOutputBuffered());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter0, tokenFilter3);
assertNotSame(filteringGeneratorDelegate0, filteringGeneratorDelegate1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate0.equals((Object)filteringGeneratorDelegate1));

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._writeFieldName("jN~^LdN=;+x;y", false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2\\u00l0{\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

writerBasedJsonGenerator0.writeStartObject();

[MASTER] 07:33:57.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[2 \u00" \u00l \u005 \u00"s\u002"\u00" \u00n1\u00n2\u00p2\u00l \u00n2]> but was:<\u00[6A\u004E\u007E\u005E\u004C\u0064\u004E\u003D\u003B\u002B\u0078\u003B]>
[MASTER] 07:33:57.312 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(iOContext1.isResourceManaged());
assertNull(iOContext1.getEncoding());
assertNotNull(iOContext1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertFalse(iOContext1.equals((Object)iOContext0));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotNull(writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter1, tokenFilter0);
assertNotNull(tokenFilter1);

FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator1, tokenFilter0, false, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertNotNull(filteringGeneratorDelegate0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter2.includeNull());
assertTrue(tokenFilter2.includeBinary());
assertTrue(tokenFilter2.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter2.toString());
assertSame(tokenFilter2, tokenFilter1);
assertSame(tokenFilter2, tokenFilter0);
assertNotNull(tokenFilter2);

TokenFilter tokenFilter3 = tokenFilter1.includeProperty("'nall', 'trNe', 'falsf' o@ NaN");
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter0);
assertNotNull(tokenFilter3);

TokenFilter tokenFilter4 = tokenFilter3.includeElement(1);
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertTrue(tokenFilter3.includeNull());
assertTrue(tokenFilter3.includeBinary());
assertTrue(tokenFilter3.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter3.toString());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter4.toString());
assertTrue(tokenFilter4.includeBinary());
assertTrue(tokenFilter4.includeRawValue());
assertTrue(tokenFilter4.includeNull());
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter2);
assertSame(tokenFilter1, tokenFilter2);
assertSame(tokenFilter1, tokenFilter3);
assertSame(tokenFilter1, tokenFilter0);
assertSame(tokenFilter1, tokenFilter4);
assertSame(tokenFilter3, tokenFilter2);
assertSame(tokenFilter3, tokenFilter4);
assertSame(tokenFilter3, tokenFilter1);
assertSame(tokenFilter3, tokenFilter0);
assertSame(tokenFilter4, tokenFilter0);
assertSame(tokenFilter4, tokenFilter3);
assertSame(tokenFilter4, tokenFilter1);
assertSame(tokenFilter4, tokenFilter2);
assertNotNull(tokenFilter4);

FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter1.includeNull());
assertTrue(tokenFilter1.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter1.toString());
assertTrue(tokenFilter1.includeRawValue());
assertEquals(0, filteringGeneratorDelegate1.getMatchCount());
assertEquals(0, filteringGeneratorDelegate1.getOutputBuffered());
assertFalse(filteringGeneratorDelegate1.canWriteFormattedNumbers());
assertTrue(filteringGeneratorDelegate1.canOmitFields());
assertFalse(filteringGeneratorDelegate1.canWriteTypeId());
assertEquals(0, filteringGeneratorDelegate1.getFormatFeatures());
assertFalse(filteringGeneratorDelegate1.canWriteObjectId());
assertEquals(3, filteringGeneratorDelegate1.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate1.canWriteBinaryNatively());
assertNotNull(filteringGeneratorDelegate1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate1.equals((Object)filteringGeneratorDelegate0));

filteringGeneratorDelegate0.writeObjectFieldStart("jN~^LdN=;+x;y");
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
assertEquals(3, filteringGeneratorDelegate0.getHighestEscapedChar());
assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
assertEquals(7, filteringGeneratorDelegate0.getOutputBuffered());
assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
assertTrue(filteringGeneratorDelegate0.canOmitFields());
assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(tokenFilter0, tokenFilter3);
assertSame(tokenFilter0, tokenFilter1);
assertSame(tokenFilter0, tokenFilter4);
assertSame(tokenFilter0, tokenFilter2);
assertNotSame(filteringGeneratorDelegate0, filteringGeneratorDelegate1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(filteringGeneratorDelegate0.equals((Object)filteringGeneratorDelegate1));

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._writeFieldName("jN~^LdN=;+x;y", false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2\\u00l0{\\u002 \\u00\" \\u00l \\u005 \\u00\"s\\u002\"\\u00\" \\u00n1\\u00n2\\u00p2\\u00l \\u00n2", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertFalse(iOContext0.equals((Object)iOContext1));

writerBasedJsonGenerator1.writeNumber((short) (-6290));

* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-opt-100/tests/1
* Done!

* Computation finished
