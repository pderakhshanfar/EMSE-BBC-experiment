/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:46:56 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      writerBasedJsonGenerator0.writeStartArray();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 64);
      writerBasedJsonGenerator0.writeString(charArray0, (int) (byte)0, 3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) (-582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)80;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("<");
      writerBasedJsonGenerator0.writeNumber((-1.0));
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw('Y');
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer.allocate(3985);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("cg.0y1@I3n)O9");
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-711), 3, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      jsonParserDelegate0.clearCurrentToken();
      writerBasedJsonGenerator0.writeString("write a nuber");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("cg.0y1@I3n)O9", 0, 3985);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      bufferRecycler0.allocByteBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("w&=,");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(1565);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 126, (ObjectCodec) null, stringWriter0);
      Object object1 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, (Writer) null);
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.writeFieldName("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator1.flush();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0._checkStdFeatureChanges(3223, 3);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "WF#(p";
      writerBasedJsonGenerator0.writeBinaryField("WF#(p", byteArray0);
      try { 
        writerBasedJsonGenerator0.writeFieldName("WF#(p");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter(1541);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      StringWriter stringWriter1 = new StringWriter(0);
      SerializedString serializedString0 = new SerializedString("write ) boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeBoolean(false);
      writerBasedJsonGenerator1.writeString("write ) boolean value");
      writerBasedJsonGenerator1.writeNumber(1541);
      writerBasedJsonGenerator1.writeNumber("write ) boolean value");
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      iOContext0.allocNameCopyBuffer(1);
      writerBasedJsonGenerator1.writeBoolean(false);
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator1._writeFieldName("write a number", true);
      writerBasedJsonGenerator1.writeNumber(3338);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeFieldName("Longest collision chain in symbol table (of size ");
      writerBasedJsonGenerator0.writeNumber(13);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '!';
      charArray0[2] = 'A';
      charArray0[3] = 'k';
      charArray0[4] = 'u';
      writerBasedJsonGenerator0.writeString(charArray0, 2, (-3589));
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      stringWriter1.write(" k");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '2';
      charArray0[2] = '^';
      charArray0[3] = '=';
      stringWriter1.write(charArray0);
      charArray0[4] = '5';
      charArray0[5] = 'm';
      charArray0[6] = ';';
      charArray0[7] = 'g';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 2);
      writerBasedJsonGenerator0._outputEnd = 3;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString(" k");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      StringWriter stringWriter0 = new StringWriter();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeRaw("KEvxY):{mkIfEcR");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(0);
      int int0 = (-582);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      StringWriter stringWriter3 = new StringWriter();
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("t<{?=jD;yu_)d`b$r");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-594), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber((double) 133);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(248);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 248);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 248);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeNumber(2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-1));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeString("$WnKa1m7/9Fz");
      writerBasedJsonGenerator0.writeNumber(1999);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      stringWriter1.write(" k");
      writerBasedJsonGenerator0._outputEnd = 3;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString(" k");
      writerBasedJsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber(0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 3);
      iOContext0.allocReadIOBuffer(3);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      writerBasedJsonGenerator0.writeNumber(1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, 1);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.getCharacterEscapes();
      StringWriter stringWriter3 = new StringWriter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-13);
      writerBasedJsonGenerator0.writeBinaryField("write a number", byteArray0);
      writerBasedJsonGenerator0.writeNumber((short) (byte)64);
      writerBasedJsonGenerator0._verifyValueWrite("fxxa>KQ1o@y u");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 9, (-1725));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2048, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 3, 495);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      StringWriter stringWriter3 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) (-582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      CharBuffer.allocate(1739);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3232, (-2024));
      writerBasedJsonGenerator0.writeArrayFieldStart(", expecting field name");
      writerBasedJsonGenerator0.writeString(charArray0, 2112, 32);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      iOContext0.allocReadIOBuffer(0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("_%7");
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-524), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 1, 0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      iOContext0.allocReadIOBuffer(56320);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeString("w.yn >Z3NNl");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      System.setCurrentTimeMillis(0L);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)18;
      writerBasedJsonGenerator0.writeBinaryField("write a number", byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-322), (int) (byte)50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -322
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      CharBuffer.allocate(1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber("write a number");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      stringWriter1.write("");
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.getCharacterEscapes();
      StringWriter stringWriter3 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("~540O\"oDQw6~c");
      writerBasedJsonGenerator0.writeArrayFieldStart("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.writeArrayFieldStart("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.writeNumber((-2391L));
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-110));
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-524), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("<");
      writerBasedJsonGenerator0.writeNumber((-2));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeNumber((short) (-493));
      jsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.writeFieldName("`");
      SerializedString serializedString0 = new SerializedString("bDw2GW8~/?isb#");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0.writeNumber((double) 0);
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(" at ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeRawValue("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.writeNumber("/Eb$\"n@0&igv");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBoolean(true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      int int0 = 116;
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      StringWriter stringWriter3 = new StringWriter();
      writerBasedJsonGenerator0.writeArrayFieldStart("t<{?=jD;yu_)d`b$r");
      char[] charArray0 = new char[1];
      char char0 = 'j';
      charArray0[0] = 'j';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1872, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._outputEnd = 2;
      StringWriter stringWriter3 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) (-582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeFieldName("SmTeH!\">eH`~f-[7");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeNumberField("", (BigDecimal) null);
      writerBasedJsonGenerator0.writeRaw('}');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("mHBnqaGeFa@h_y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      stringWriter1.write("");
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.getCharacterEscapes();
      String string0 = "`";
      writerBasedJsonGenerator0.writeFieldName("`");
      writerBasedJsonGenerator0.writeRaw("");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-2), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      StringWriter stringWriter3 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("t<{?=jD;yu_)d`b$r");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = "";
      writerBasedJsonGenerator0._writeFieldName("", false);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "t<{?=jD;yu_)d`b$r", 113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0.writeNumber(0.0);
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      writerBasedJsonGenerator0.writeNumberField("", bigDecimal0);
      writerBasedJsonGenerator0.writeRaw('}');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("mHBnqaGeFa@h_y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber("Unexpected end-of-input within/between ");
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3831);
      pushbackInputStream0.markSupported();
      writerBasedJsonGenerator0.writeArrayFieldStart("XH_z>$5`j|AV-8(X");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      writerBasedJsonGenerator0.canOmitFields();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber("Unexpected end-of-input within/between ");
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeArrayFieldStart("!\"aYr{MM");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("we\" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber("Unexpected end-of-input within/between ");
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write9 a number", true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2622, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write9 a number");
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1952);
      writerBasedJsonGenerator0.writeNumber("write9 a number");
      StringWriter stringWriter1 = new StringWriter(2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write9 a number");
      tokenFilter1.includeProperty("");
      SerializedString serializedString0 = new SerializedString("Uneqpected end-of-inpu! within/b8tween ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber(3103);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2379, 1949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 248);
      pushbackInputStream0.markSupported();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("(tTHz:i$JP(@=%", 9, 248);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber("Unexpected end-of-input within/between ");
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 823, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 823
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(36);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 36);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 248);
      pushbackInputStream0.markSupported();
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeFieldName("a%<+<P");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 1046);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      tokenFilter2.includeProperty("Unexpected end-of-input within/between ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "a%<+<P";
      String string1 = "";
      writerBasedJsonGenerator0.writeFieldName("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((-422));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-791));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-524), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNull();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unespected end-of-input within/between ");
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      tokenFilter2.includeProperty("Unespected end-of-input within/between ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(3999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 248);
      pushbackInputStream0.markSupported();
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeNumber(2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream1, (-1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeNumber((-2));
      writerBasedJsonGenerator0.writeRaw('f');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-90);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 116, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeNumber((-2));
      writerBasedJsonGenerator0.writeRaw('f');
      System.setCurrentTimeMillis(20L);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0.writeNumber("Unexpected end-of-input within/between ");
      StringWriter stringWriter1 = new StringWriter();
      String string0 = "Current context not an object but ";
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 116, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      stringWriter1.write("");
      writerBasedJsonGenerator0._outputEnd = 3;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("`");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      stringWriter1.write("");
      writerBasedJsonGenerator0._outputEnd = 3;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("`");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeNumber((-2));
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer.allocate(4005);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("cg.0y1@I3n)O9");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1065, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-711), 35, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      jsonParserDelegate0.clearCurrentToken();
      writerBasedJsonGenerator0.writeString("write a number");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 0, 4005);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      // Undeclared exception!
      writerBasedJsonGenerator0.writeArrayFieldStart("?/l?{frz");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.writeNumber("");
      StringWriter stringWriter1 = new StringWriter();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      tokenFilter0.includeProperty("x_MdK55");
      SerializedString serializedString0 = new SerializedString("x_MdK55");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Unexpected end-of-input within/between ";
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      tokenFilter2.includeProperty("Unexpected end-of-input within/between ");
      SerializedString serializedString0 = new SerializedString("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      int int0 = 3999;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(3999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)12;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      stringWriter0.flush();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)12);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 2);
      writerBasedJsonGenerator0.writeFieldName("[q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-5467));
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("`");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString((char[]) null, (-900), (-2));
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      writerBasedJsonGenerator0.writeNumber(3104);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeArrayFieldStart("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("-INF");
      writerBasedJsonGenerator0.writeNumber(1901L);
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      try { 
        writerBasedJsonGenerator0.writeNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeNumber((-2));
      System.setCurrentTimeMillis(20L);
      writerBasedJsonGenerator0._writeFieldName("Too few bytes available: missing ", false);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}el`e0h");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 70;
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "we\" ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      iOContext0.allocReadIOBuffer(57343);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      iOContext0.allocTokenBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      writerBasedJsonGenerator0.writeNumber(3104);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeArrayFieldStart("Unexpected end-of-input within/between ");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("-INF");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Unexpected end-of-input within/between ");
      tokenFilter1.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 248);
      pushbackInputStream0.markSupported();
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeFieldName("a%<+<P");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 1046);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 248;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "";
      stringWriter0.write("");
      StringWriter stringWriter1 = new StringWriter();
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 186, 78);
      stringWriter1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeNumber(255);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "knd50:uo?50k/7", true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0096';
      charArray0[1] = '\u0096';
      charArray0[2] = 'B';
      charArray0[3] = '\u0096';
      charArray0[4] = '\u0096';
      charArray0[5] = 'B';
      charArray0[6] = '\u0096';
      charArray0[7] = 'B';
      writerBasedJsonGenerator0.writeString(charArray0, 226, (int) (byte) (-100));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write9 a number", true);
      StringWriter stringWriter0 = new StringWriter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      tokenFilter1.filterStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 44, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0._outputEnd = 248;
      writerBasedJsonGenerator0.writeNumber(1161);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 102);
      pushbackInputStream0.markSupported();
      writerBasedJsonGenerator0.writeString(charArray0, 718, 171);
      writerBasedJsonGenerator0.writeString("|nKi# uHxZ");
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'X';
      charArray0[5] = '&';
      stringWriter0.write(charArray0, 3, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "[q");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeArrayFieldStart("[q");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      stringWriter0.write("Z");
      StringWriter stringWriter1 = new StringWriter();
      writerBasedJsonGenerator0.getCurrentValue();
      writerBasedJsonGenerator0.writeStartObject((Object) "Z");
      stringWriter1.write("vAfR{[nt{ R");
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "we\" ";
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      iOContext0.allocReadIOBuffer(57343);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 42);
      int int0 = GeneratorBase.SURR2_LAST;
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (int) (byte) (-99));
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0.writeString("q}YOFVi");
      writerBasedJsonGenerator0.flush();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'X';
      charArray0[5] = '&';
      stringWriter0.write(charArray0, 3, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "[q");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeArrayFieldStart("[q");
      char[] charArray1 = new char[3];
      charArray1[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray1, 1, 1);
      writerBasedJsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-301), (ObjectCodec) null, stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1558);
      writerBasedJsonGenerator0.writeNumber(114);
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeArrayFieldStart("@`]5oA\"oh2qf)lz");
      writerBasedJsonGenerator0.writeRaw('1');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1558, 3987);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)12);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 2);
      writerBasedJsonGenerator0.writeFieldName("[q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-5467));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2250.612887312523);
      writerBasedJsonGenerator0._outputTail = 56319;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      charArray0[0] = 'K';
      charArray0[1] = 't';
      charArray0[2] = '$';
      charArray0[3] = '3';
      charArray0[4] = '7';
      charArray0[5] = '`';
      writerBasedJsonGenerator0.writeString(charArray0, 789, (-269));
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      StringWriter stringWriter3 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1910L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-310), (ObjectCodec) null, stringWriter0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1558);
      writerBasedJsonGenerator0.writeNumber(114);
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("OBJECT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 0, 1558);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter(1541);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      StringWriter stringWriter1 = new StringWriter(0);
      SerializedString serializedString0 = new SerializedString("write ) boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeBoolean(false);
      writerBasedJsonGenerator1.writeNumber(1541);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      iOContext0.allocNameCopyBuffer(1);
      writerBasedJsonGenerator1.writeBoolean(false);
      writerBasedJsonGenerator1.writeRaw('T');
      writerBasedJsonGenerator1.writeStartArray();
      writerBasedJsonGenerator1._writeFieldName("write a number", true);
      writerBasedJsonGenerator1.writeNumber(3338);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(11);
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = stringWriter1.append('>');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter3);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 1558, 0);
      writerBasedJsonGenerator0.writeNumber((-1915));
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeString(charArray0, 30, 224);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) dataInputStream0, (-1125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 761, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Q9\"IK4wi");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0._writePPFieldName("Current token (", false);
      BigDecimal bigDecimal0 = new BigDecimal(170);
      writerBasedJsonGenerator0.writeNumberField("", bigDecimal0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("9bOMKmo~n>slq^");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      stringWriter0.append((CharSequence) "write a binary value");
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(11);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 91, (ObjectCodec) null, stringWriter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(2133);
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2497);
      StringWriter stringWriter2 = stringWriter1.append('@');
      writerBasedJsonGenerator0.writeNumber((-3975));
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2497);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      StringWriter stringWriter3 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)94;
      iOContext0.allocTokenBuffer((int) (byte)94);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 105);
      pushbackInputStream0.read();
      pushbackInputStream0.read();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (int) (byte) (-49));
      writerBasedJsonGenerator0.writeString("AV=720qP");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "qWy`@*Cp";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qWy`@*Cp");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('b');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2048, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1084);
      pushbackInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 6 bytes (out of 12)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      StringWriter stringWriter3 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 105);
      pushbackInputStream0.read();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (int) (byte) (-49));
      writerBasedJsonGenerator0.writeString("AV=720qP");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'h';
      charArray0[5] = '&';
      stringWriter0.write(charArray0, 3, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "[q");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeArrayFieldStart("[q");
      char[] charArray1 = new char[3];
      charArray1[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray1, 1, 1);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "[q");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-301), (ObjectCodec) null, stringWriter0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1558);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2443, 2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(19);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter2);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 2020, 1365);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 19);
      writerBasedJsonGenerator0.writeString("[q");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 9, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator1.writeRaw("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeNumber(2250.612887312523);
      iOContext0.allocTokenBuffer(0);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      writerBasedJsonGenerator1.writeRaw('u');
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator1._writePPFieldName(serializedString0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 6, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-99);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)12);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1850));
      writerBasedJsonGenerator0.writeNumber((long) (byte)12);
      writerBasedJsonGenerator0.writeString("[q");
      writerBasedJsonGenerator0.flush();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("q", "[q", false, 'c', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 2)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qWy`@*Cp");
      StringWriter stringWriter0 = new StringWriter(1726);
      stringWriter0.append('b');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1461, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3);
      pushbackInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 31);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 24 bytes (out of 31)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 42);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (int) (byte) (-99));
      writerBasedJsonGenerator0.writeNumber(0L);
      writerBasedJsonGenerator0.writeString("q}\"YOFVi");
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "k:W+$ML@A0g7*[~";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "k:W+$ML@A0g7*[~", false);
      iOContext0.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      String string1 = "}>>.hmqVb";
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumberField("}>>.hmqVb", (long) 0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeNumber(965.7157F);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter(1541);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      StringWriter stringWriter1 = new StringWriter(0);
      SerializedString serializedString0 = new SerializedString("write ) boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeNumber(1541);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      iOContext0.allocNameCopyBuffer(1);
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeRaw('T');
      jsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 910, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)12);
      pushbackInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 2);
      writerBasedJsonGenerator0.writeNumber(1L);
      writerBasedJsonGenerator0.writeString("[q");
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      ObjectCodec objectCodec0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2115, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2115, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator1._writePPFieldName("write a binary value", true);
      BigDecimal bigDecimal0 = new BigDecimal(1390);
      writerBasedJsonGenerator0.writeNumberField("write a binary value", bigDecimal0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator1._writeFieldName("write a binary value", true);
      writerBasedJsonGenerator1.writeNumber((long) 56320);
      stringWriter0.append((CharSequence) "write a binary value");
      char[] charArray0 = new char[1];
      char char0 = 'i';
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2250.612887312523);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      jsonGenerator0.writeNumber((long) 56320);
      jsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      jsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2138, (ObjectCodec) null, stringWriter2);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 906);
      iOContext0.allocReadIOBuffer(2);
      char[] charArray1 = new char[8];
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      charArray1[2] = 'e';
      charArray1[3] = 'e';
      charArray1[4] = 'e';
      charArray1[5] = 'e';
      charArray1[6] = 'e';
      charArray1[7] = 'e';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray1, 0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('K');
      StringWriter stringWriter1 = new StringWriter(4);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4, (ObjectCodec) null, stringWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-2623));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('\u0018');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-25);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeRaw("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeNumber(2250.612887312523);
      iOContext0.allocTokenBuffer(0);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "");
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[3];
      char[] charArray1 = writerBasedJsonGenerator0._outputBuffer;
      charArray0[0] = 'e';
      writerBasedJsonGenerator0.writeString(charArray1, 1, 8);
      iOContext0.allocReadIOBuffer(92);
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      System.setCurrentTimeMillis(10000000000L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeRaw("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeNumber(2251.59);
      iOContext0.allocTokenBuffer(0);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1625);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream1.read();
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      try { 
        writerBasedJsonGenerator0.writeNumber(2050L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 116, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-1L));
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = '.';
      charArray0[3] = '7';
      charArray0[4] = 'd';
      charArray0[5] = '{';
      writerBasedJsonGenerator0.setHighestNonEscapedChar((-421));
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 2);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qWy`@*Cp");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 32767);
      pushbackInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1023);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1018 bytes (out of 1023)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "");
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
      writerBasedJsonGenerator0.close();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      stringWriter0.append('l');
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '\u008D';
      charArray0[2] = 'a';
      charArray0[3] = 't';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 123, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter(877);
      stringWriter0.append('-');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2);
      pushbackInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 102);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 99 bytes (out of 102)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 114);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      byte byte0 = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2158);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 200);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 200 bytes (out of 200)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2261);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread(55296);
      System.setCurrentTimeMillis(732L);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringWriter stringWriter0 = new StringWriter(877);
      stringWriter0.append('-');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 102);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 98 bytes (out of 102)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter(1541);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      StringWriter stringWriter1 = new StringWriter(0);
      SerializedString serializedString0 = new SerializedString("write ) boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeNumber(1541);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeRaw('T');
      jsonGenerator0.writeStartArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)22;
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator1._writePPFieldName("write a binary value", true);
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator1._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      try { 
        writerBasedJsonGenerator1.writeNumber((short) (-1108));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      iOContext0.allocTokenBuffer(0);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(1459);
      CharBuffer.allocate(3);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1132), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'p';
      charArray0[3] = 'B';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      writerBasedJsonGenerator0.writeNumber(0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2296.2197319274237);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      jsonGenerator0.writeNumberField("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", (BigDecimal) null);
      jsonGenerator0.writeRaw('&');
      try { 
        writerBasedJsonGenerator0.writeString("b_aEj+CPu[? ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2048, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      writerBasedJsonGenerator0.writeNumberField("mHBnqaGeFa@h_y", bigDecimal0);
      writerBasedJsonGenerator0.writeRaw('w');
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter(4169);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1139), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("!,O+[n2!&");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeNumber("!,O+[n2!&");
      jsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRawValue("B|&{L,~R.qA)6");
      jsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-3115));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "g6I&K=tJLtc";
      writerBasedJsonGenerator0.writeFieldName("g6I&K=tJLtc");
      writerBasedJsonGenerator0._writeFieldName("[r9r:c", true);
      int int0 = (-220);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeArray((double[]) null, (-220), 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer.allocate(0);
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 26, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(")BL=1\"=2<0tLiS5d:<");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(2);
      BigDecimal bigDecimal0 = new BigDecimal((double) 56319);
      char[] charArray0 = new char[3];
      charArray0[2] = '`';
      charArray0[2] = '`';
      stringWriter0.write(")BL=1\"=2<0tLiS5d:<");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      BigDecimal bigDecimal1 = new BigDecimal((long) 56320);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.util.BufferRecycler");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.BufferRecycler");
      writerBasedJsonGenerator0._writeFieldName("Ji~^DerR", false);
      writerBasedJsonGenerator0.writeNumber(64);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2296.2197319274237);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      jsonGenerator0.writeNumberField("", (BigDecimal) null);
      jsonGenerator0.writeRaw('&');
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('n');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 'n', (ObjectCodec) null, stringWriter1);
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("[r9r:c");
      writerBasedJsonGenerator0.writeString("Ji~^DerR");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter(4169);
      int int0 = (-1139);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1139), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("!,O+[n2!&");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._writePPFieldName("!,O+[n2!&", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 43, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 28);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread((-167));
      byte[] byteArray1 = new byte[6];
      System.setCurrentTimeMillis((-644));
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray1, (byte)44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2296.2197319274237);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      jsonGenerator0.writeNumberField("", (BigDecimal) null);
      jsonGenerator0.writeRaw('&');
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(2);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRawValue("write a number");
      writerBasedJsonGenerator0.writeNumber("write a number");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-493));
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "");
      writerBasedJsonGenerator0.getOutputBuffered();
      char char0 = '7';
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1012));
      int int0 = 7;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 871, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 7, 5, false);
      readerBasedJsonParser0.getText();
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 240, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1132), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\u008A';
      charArray0[3] = 'B';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      writerBasedJsonGenerator0.writeNumber(0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((-774));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'e';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 3978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char char0 = '~';
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      stringWriter0.flush();
      String string0 = "Lh0=;/";
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      StringWriter stringWriter1 = new StringWriter(0);
      String string1 = "write ) boolean value";
      SerializedString serializedString0 = new SerializedString("write ) boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(3);
      String string2 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1650, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = '\u008A';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[3];
      iOContext0.allocTokenBuffer();
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      iOContext1.allocReadIOBuffer(0);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 3);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)2410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[3];
      iOContext0.allocTokenBuffer(0);
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      iOContext1.allocReadIOBuffer(0);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-8.8F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(2251.59);
      writerBasedJsonGenerator0._writePPFieldName("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", false);
      writerBasedJsonGenerator0.writeStartObject();
      jsonGenerator0.writeNumberField("", (BigDecimal) null);
      jsonGenerator0.writeRaw('&');
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((short)1023);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'p';
      charArray0[2] = 'W';
      charArray0[3] = 'J';
      charArray0[4] = ')';
      charArray0[5] = 'E';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-301), (ObjectCodec) null, stringWriter0);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, true);
      writerBasedJsonGenerator0.writeFieldName("=\f%s5e+.X/");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-2948), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((short)1023);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'p';
      charArray0[2] = 'W';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F,]Dr");
      charArray0[3] = 'J';
      charArray0[4] = ')';
      charArray0[5] = 'E';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = false;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((short)1023);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'p';
      charArray0[2] = 'W';
      charArray0[3] = 'J';
      charArray0[4] = ')';
      charArray0[5] = 'E';
      writerBasedJsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-518), 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("Q", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2353), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "[r9r:c";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer.allocate(0);
      StringWriter stringWriter2 = new StringWriter(116);
      StringWriter stringWriter3 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 26, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeString(")BL=1\"=2<0tLiS5d:<");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(2);
      BigDecimal bigDecimal0 = new BigDecimal((double) 56319);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-25);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 91, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(565);
      stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2353), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, true);
      writerBasedJsonGenerator0.writeFieldName("=\f%s5e+.X/");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = '\u008A';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)14);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 193, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(charArray0, 97, 9);
      iOContext0.allocReadIOBuffer(2);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1682L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext2.allocTokenBuffer(2);
      writerBasedJsonGenerator0.writeString(charArray0, 21, 1);
      iOContext3.allocReadIOBuffer(3);
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 1549);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, (-3657), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString2);
      writerBasedJsonGenerator0.writeNumber("-Ialx+f1.;nQ");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 0, (-2191));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1541);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5464, (ObjectCodec) null, stringWriter1);
      String string0 = "BU.";
      writerBasedJsonGenerator0.writeNumberField("BU.", (float) (-340));
      stringWriter2.write("BU.");
      writerBasedJsonGenerator0.writeNumber(0L);
      try { 
        writerBasedJsonGenerator0.writeFieldName("BU.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append('z');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'N';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(3952);
      StringWriter stringWriter1 = new StringWriter(3952);
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeString(")BL=1\"=2<0tLiS5d:<");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber(33);
      BigDecimal bigDecimal0 = new BigDecimal(3480.09733860727);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 114, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeString(")BL=1\"=2<0tLiS5d:<");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber(33);
      BigDecimal bigDecimal0 = new BigDecimal(3480.09733860727);
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      writerBasedJsonGenerator0.writeRaw(charArray0, 3, 2);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      charArray0[3] = '$';
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('`');
      stringWriter0.append('y');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append('z');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter1);
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'N';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      writerBasedJsonGenerator0.writeNumber((double) 0);
      charArray0[7] = 'z';
      charArray0[8] = 'z';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuilder stringBuilder0 = new StringBuilder("Too few bytes available: missing ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0, 1, 3);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "Too few bytes available: missing ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter3);
      stringWriter0.append('y');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      BigDecimal bigDecimal1 = new BigDecimal((long) 3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeRaw('~');
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((-1216.817F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      charArray0[3] = '$';
      charArray0[4] = '\\';
      charArray0[5] = 'B';
      charArray0[6] = 'e';
      charArray0[7] = 'z';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.getOutputTarget();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 277, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator1._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber("write a boolean value");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-128);
      writerBasedJsonGenerator0.writeNumberField("write a number", (-293L));
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("#s/F2wG^2K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuilder stringBuilder0 = new StringBuilder("Too few bytes available: missing ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0, 1, 3);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "Too few bytes available: missing ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter3);
      stringWriter0.append('y');
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-1851));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 277, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append('z');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter1);
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'N';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      charArray0[8] = 'z';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      BigDecimal bigDecimal1 = new BigDecimal((long) 3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeRaw('~');
      writerBasedJsonGenerator0.writeRaw("Lh0=;/", 3, 1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 53, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-624L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-163));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 945, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter();
      char char0 = '$';
      StringWriter stringWriter2 = stringWriter1.append('$');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      String string0 = "VALUE_FALSE";
      writerBasedJsonGenerator0.writeNumberField("VALUE_FALSE", 981.7F);
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeNumberField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", 0L);
      writerBasedJsonGenerator0.writeString("xe,n~rTJ-");
      writerBasedJsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      String string0 = "";
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "");
      writerBasedJsonGenerator0.getOutputBuffered();
      try { 
        writerBasedJsonGenerator0.writeNumber((-2319L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      int int0 = 78;
      StringWriter stringWriter0 = new StringWriter(78);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      String string0 = "BU.";
      writerBasedJsonGenerator0.writeNumberField("BU.", (-1.0F));
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 53, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-624L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((short)42);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 744, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(961L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '2';
      writerBasedJsonGenerator0.writeString(charArray0, 2, (-1925));
      writerBasedJsonGenerator0.writeNumber(9);
      String string0 = "7myQKOeW,>~";
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 53, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      CharBuffer.allocate(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((long) 12);
      writerBasedJsonGenerator0.writeFieldName("-{fWy4vRM<b");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, 860);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 11, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumberField("BU.", (-1.0F));
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      stringWriter1.write("BU.");
      writerBasedJsonGenerator0.writeNumber(210L);
      try { 
        writerBasedJsonGenerator0.writeFieldName("BU.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(2);
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      stringWriter0.write("Current context not an ARRAY but ");
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber((int) (byte)15);
      BigDecimal bigDecimal0 = new BigDecimal(2.147483647E9);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 23, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('h');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber(33);
      BigDecimal bigDecimal0 = new BigDecimal((-3899.05));
      BigDecimal bigDecimal1 = new BigDecimal((long) 57343);
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      String string0 = "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName(", expecting field name", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-19), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      readerBasedJsonParser0.getText();
      charArray0[1] = '#';
      charArray0[3] = ' ';
      writerBasedJsonGenerator0.writeNumber(8000);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuilder stringBuilder0 = new StringBuilder("Too few bytes available: missing ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0, 1, 3);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "Too few bytes available: missing ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter3);
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 833);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 53, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-624L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber("a?A6|");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("9");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not 9, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      stringWriter0.write("Current context not an ARRAY but ");
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString("xe,n~rTJ-");
      writerBasedJsonGenerator0.getOutputBuffered();
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("xe,n~rTJ-", "xe,n~rTJ-", false, '3', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 9)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "$xW";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      charArray0[4] = 'l';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$xW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeFieldName("[rr:cN");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('`');
      StringBuilder stringBuilder0 = new StringBuilder("Too few bytes available: missing ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0, 1, 3);
      stringWriter2.append((CharSequence) "Too few bytes available: missing ");
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1916), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(1017.45159);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      charArray0[4] = 'l';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)56;
      byte byte0 = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)13;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      String string0 = "";
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      String string1 = "com.fasterxml.jackson.core.base.ParserBase";
      char char0 = 'q';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "com.fasterxml.jackson.core.base.ParserBase", false, 'q', (byte)50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 42)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ", 0, 17);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '`';
      StringWriter stringWriter1 = stringWriter0.append('`');
      String string0 = "Too few bytes available: missing ";
      StringBuilder stringBuilder0 = new StringBuilder("Too few bytes available: missing ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder0, 1, 3);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "Too few bytes available: missing ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter3);
      byte[] byteArray0 = new byte[0];
      char char1 = '}';
      stringWriter0.append('}');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 35, (-784));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(51);
      StringWriter stringWriter1 = stringWriter0.append('~');
      stringWriter1.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber("Can no]t ");
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "write a number";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '\\';
      iOContext0.releaseConcatBuffer((char[]) null);
      CharBuffer.allocate(2);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRawValue("write a number");
      writerBasedJsonGenerator0.writeNumber("write a number");
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeFieldName("[rr:cN");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocNameCopyBuffer(2);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((long) 33);
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
      try { 
        writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      String string0 = "BU.";
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      writerBasedJsonGenerator0.writeNumber(210L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((-1526));
      String string1 = "&w3cY\"z'";
      try { 
        writerBasedJsonGenerator0.writeFieldName("&w3cY\"z'");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      CharBuffer.allocate(2);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 5, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '|';
      charArray0[2] = 'm';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-883), (-1620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeRaw('m');
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber(12000);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", true, 'm', 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 95)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'X';
      charArray0[5] = '&';
      stringWriter0.write(charArray0, 3, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "[q");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeArrayFieldStart("[q");
      char[] charArray1 = new char[3];
      charArray1[0] = '\u0000';
      writerBasedJsonGenerator0.writeRaw(charArray1, 1, 1);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)100;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 59, 57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 59, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject((Object) "");
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = ':';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(2499.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      CharBuffer.allocate(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 7, (ObjectCodec) null, stringWriter2);
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '_';
      charArray0[5] = 'A';
      charArray0[6] = '_';
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 2);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.releaseConcatBuffer((char[]) null);
      CharBuffer.allocate(2);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRawValue("write a number");
      writerBasedJsonGenerator0.writeNumber("write a number");
      writerBasedJsonGenerator0.writeString("write a number");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("write a number", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("TGd{^SdzC22hRJ");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.releaseConcatBuffer((char[]) null);
      CharBuffer.allocate(2);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 3, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(116);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-582), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0._outputEnd = 2;
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.writeNumber(1);
      CharacterEscapes characterEscapes1 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Lh0=;/");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((-1043L));
      writerBasedJsonGenerator0.writeFieldName("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)101;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 12000, 127);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      writerBasedJsonGenerator0.writeFieldName("D9");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      writerBasedJsonGenerator0.writeNumber("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((long) 33);
      writerBasedJsonGenerator0.writeFieldName("Current context not an ARRAY but ");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\\');
      StringBuilder stringBuilder0 = new StringBuilder(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 8, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber(3707L);
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "write a number";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '\'';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 2048);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d'vfC2C4");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      StringWriter stringWriter1 = stringWriter0.append('~');
      stringWriter1.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber("Can no]t ");
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Can no]t ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 24, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = ' ';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = '0';
      charArray0[5] = 'W';
      charArray0[6] = '#';
      writerBasedJsonGenerator0.writeString(charArray0, 0, (-1140));
      writerBasedJsonGenerator0.writeNumber(3);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.core.util.BufferRecycler", "rOu.u6_OvdtY-901&G", true, 'e', 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 18)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      writerBasedJsonGenerator0.writeNumber(210L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":8 k0$m{<o!:3(f]Hg%");
      CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-644), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(" / 0x");
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-19), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '#';
      charArray0[2] = ' ';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber(8000);
      String string1 = "com.fasterxml.jackson.core.util.BufferRecycler";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Unexpected problem: chain of filtered context broken", "com.fasterxml.jackson.core.util.BufferRecycler", true, '#', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 46)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-340), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      writerBasedJsonGenerator0.writeNumber(210L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'j';
      charArray0[2] = '!';
      charArray0[3] = 'h';
      charArray0[4] = 'E';
      charArray0[5] = 'V';
      stringWriter0.write(charArray0);
      CharBuffer.allocate(23);
      stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2324), (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("CANONICALIZE_FIELD_NAMES", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = (-1390);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, (-1390), (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      StringBuilder stringBuilder0 = new StringBuilder(2955);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '#';
      charArray0[2] = ' ';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber((-361));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Unexpected problem: chain of filtered context broken", "com.fasterxml.jackson.core.util.BufferRecycler", true, '#', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 46)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-644), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(" / 0x");
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('2');
      CharBuffer.allocate(0);
      StringWriter stringWriter2 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber(" / 0x");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString("");
      int int0 = (-728);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Can not ", "Illegal character (code 0x", false, '0', (-728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 26)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-638), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._verifyValueWrite("BU.");
      writerBasedJsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(".\"RO<(v", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('2');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-644), (ObjectCodec) null, stringWriter2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 23);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('F');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter2, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-207), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(70);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeArrayFieldStart("");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%33B");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "Db5TxqoaejJL8\"Hb8", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('e');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeString("Db5TxqoaejJL8\"Hb8");
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString("I/'pu&");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("9QZL", "", true, '0', 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeString("9-{}s");
      PipedInputStream pipedInputStream0 = new PipedInputStream(525);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      try { 
        dataInputStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("");
      writerBasedJsonGenerator0.writeString((String) null);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "CtwjxzQkAcJgf+j", true, '0', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 15)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      System.setCurrentTimeMillis(1707L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(12);
      CharBuffer.allocate(70);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('~');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      StringBuilder stringBuilder0 = new StringBuilder(1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuilder0.append(stringBuffer1);
      stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1929), (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Current context not an ARRAY but ";
      StringReader stringReader0 = new StringReader("Current context not an ARRAY but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'g';
      charArray0[3] = '7';
      charArray0[4] = 'l';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 3);
      String string1 = "";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Current context not an ARRAY but ", "", true, '7', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '#';
      charArray0[2] = ' ';
      charArray0[3] = '?';
      charArray0[4] = '/';
      charArray0[5] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 18, 0);
      writerBasedJsonGenerator0.writeNumber(0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Unexpected problem: chain of filtered context broken", " / 0x", false, 'H', 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 5)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "nE9bpZ4ja+";
      File file0 = MockFile.createTempFile("nE9bpZ4ja+", "|<U+?'FNf:VwM6!_G$D", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(110);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonLocation");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.JsonLocation");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1342, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-644), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber(" / 0x");
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F", stringWriter1.toString());
      assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
  }
}
