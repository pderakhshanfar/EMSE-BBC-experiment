/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:44:07 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3244, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)24;
      writerBasedJsonGenerator0.writeNullField("p%5R%~B@3Wh<\"U");
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-68));
      writerBasedJsonGenerator0._writeFieldName(" bytes (out of ", false);
      writerBasedJsonGenerator0._verifyValueWrite(" bytes (out of ");
      writerBasedJsonGenerator0.writeNumber(" bytes (out of ");
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3244, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNullField("p%5R%~B@3Wh<\"U");
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeNumber("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeString("p%5R%~B@3Wh<\"U");
      writerBasedJsonGenerator1._verifyValueWrite("XFo7t/m~_GC-I#^");
      char[] charArray0 = writerBasedJsonGenerator1._entityBuffer;
      writerBasedJsonGenerator1.writeStartArray();
      pipedInputStream0.close();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator1.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRICT_DUPLICATE_DETECTION");
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      int int0 = GeneratorBase.SURR1_LAST;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3451), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (int) (byte) (-55));
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = '\u0080';
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = '\u0080';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3244, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNullField("p%5R%~B@3Wh<\"U");
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeNumber("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeString("p%5R%~B@3Wh<\"U");
      String string0 = "*na|^8^;U;ii>";
      writerBasedJsonGenerator1._writeFieldName("", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(6);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3102);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 965, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      String string0 = "start an array";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("start an array");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-4406));
      writerBasedJsonGenerator0.writeNumber((-1048));
      writerBasedJsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      int int0 = 1047;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1047, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (int) (byte) (-2));
      StringReader stringReader0 = new StringReader("C)0if");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '';
      charArray0[2] = '?';
      charArray0[3] = ',';
      charArray0[4] = 'm';
      charArray0[5] = '@';
      charArray0[6] = 'x';
      charArray0[7] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56320, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (byte) (-102), (byte)40, true);
      try { 
        writerBasedJsonGenerator0.copyCurrentStructure(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current event to copy
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Current context not an object but ", false);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 1, 2648);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1799, (ObjectCodec) null, stringWriter0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-318));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      int int0 = 1452;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(1452);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3102, (ObjectCodec) null, stringWriter0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-2232), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((long) 55296);
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeRaw('l');
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      String string0 = "ws@KFLUM~^";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 116, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream1, 0);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter((byte)5);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)5, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 56320;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocWriteEncodingBuffer((-2511));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)5;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-46));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogateRpair: first char 0x");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('q');
      SerializedString serializedString0 = new SerializedString("Incomplete surrogateRpair: first char 0x");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter(1);
      pipedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1799, (ObjectCodec) null, stringWriter0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((short)110);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)115;
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 117, (int) (byte)115);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((short)110);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)115;
      writerBasedJsonGenerator0.writeString("ws@KFLUM~^");
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)15;
      writerBasedJsonGenerator0.writeBinary(byteArray0, (int) (byte)115, (-4913));
      int int0 = GeneratorBase.SURR1_FIRST;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 35, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("VALUE_EMBEDDED_OBJECT", true);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 1, 2412);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2352, 2645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)17;
      longArray0[7] = (long) 0;
      writerBasedJsonGenerator0.writeBooleanField("GJFLgi`EbdoTz&:h89", true);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 0, 0);
      int int0 = GeneratorBase.SURR1_FIRST;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-28), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeNumber(1);
      writerBasedJsonGenerator0.writeNumber((-1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "ws@KFLUM~^";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 138, (ObjectCodec) null, stringWriter0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0._writeFieldName("ws@KFLUM~^", false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'Y';
      charArray0[2] = '2';
      charArray0[3] = 'R';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '^';
      charArray0[7] = ']';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("VALUE_EMBEDED_OBJECT", false);
      char[] charArray0 = writerBasedJsonGenerator0._outputBuffer;
      writerBasedJsonGenerator0.writeString(charArray0, 539, 1776);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("VALUE_EMBEDED_OBJECT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray1 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("Alz8F 0G5xfEY_Z");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
      writerBasedJsonGenerator0.writeNumber((short)39);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      pipedInputStream0.close();
      String string0 = "";
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._verifyValueWrite("");
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      writerBasedJsonGenerator0.writeBoolean(true);
      tokenFilter0.includeElement(0);
      writerBasedJsonGenerator2.writeStartObject();
      try { 
        writerBasedJsonGenerator1._verifyPrettyValueWrite("s'jH>kp'=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not s'jH>kp'=, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(4439);
      char char0 = 'j';
      StringWriter stringWriter1 = stringWriter0.append('j');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('j');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      String string0 = "G&b\\dgi%#";
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeBooleanField(string0, boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-11));
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("*na|^8^;U;ii>");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 116, (ObjectCodec) null, stringWriter0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      writerBasedJsonGenerator0.writeObjectFieldStart("ws@KFLUM~^");
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0._writeFieldName("ws@KFLUM~^", false);
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber(1219L);
      writerBasedJsonGenerator0.writeBooleanField("[.Dgb)UCM(0Jd\"-x-\"p", false);
      writerBasedJsonGenerator0.getOutputTarget();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 102, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream2, 0);
      char[] charArray0 = new char[5];
      writerBasedJsonGenerator0._writeFieldName("ws@KFLUM~^", false);
      writerBasedJsonGenerator0._writeFieldName("l", false);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      iOContext3.allocTokenBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 1818);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 116, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream2, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)5, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 56320;
      String string0 = "Incomplete surrogateRpair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)5;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-46));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogateRpair: first char 0x");
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 116, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream2, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'd';
      charArray0[2] = '8';
      charArray0[3] = 'v';
      charArray0[4] = '0';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeFieldName("ws@KFLUM~^");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)5, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 56320;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)5;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-46));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogateRpair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('q');
      SerializedString serializedString0 = new SerializedString("Incomplete surrogateRpair: first char 0x");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      byteArray0[0] = (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 56319;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)17;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)17;
      longArray0[7] = (long) 0;
      writerBasedJsonGenerator0.writeArray(longArray0, (-5721), (-1909));
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeNumber("azPObmx");
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 425, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0099';
      charArray0[2] = '\u0099';
      writerBasedJsonGenerator0.writeNumber((short)0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.writeNumber(123);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("Current context not an object but ", 1.0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      PipedInputStream pipedInputStream1 = new PipedInputStream(5810);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream1, (-6442));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      int int0 = 66;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 66, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 4 bytes (out of 13)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "LN|9", true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      File file0 = MockFile.createTempFile("WRITE_NUMBERS_AS_STRINGS", "a%M");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-780), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 1446);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1446);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1442 bytes (out of 1446)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 664, (ObjectCodec) null, stringWriter1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 4043);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 4043 bytes (out of 4043)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yy+8FBnZM");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber((short)37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "T\"/9";
      writerBasedJsonGenerator0._verifyValueWrite("T\"/9");
      writerBasedJsonGenerator0.close();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)17;
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0._writeFieldName("T(C*G,+~9;aa0np:S", false);
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ws@KFLUM~^", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 116, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream2, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'd';
      charArray0[2] = '8';
      charArray0[3] = 'u';
      charArray0[4] = '0';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeFieldName("ws@KFLUM~^");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = ']';
      charArray0[2] = 'C';
      charArray0[3] = 'L';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 5270, 1000000000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, (-3410));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = true;
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1195, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(47);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '<';
      char char0 = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '\"';
      charArray0[4] = 'J';
      charArray0[5] = 'N';
      charArray0[6] = 'v';
      charArray0[7] = 'z';
      int int0 = 2756;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 1, 2756);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 20, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocReadIOBuffer();
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x", 1, 20);
      writerBasedJsonGenerator0.writeNumber((short)15);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeRaw("Internal error: total len assumed to be ");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber("Internal error: total len assumed to be ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(95);
      writerBasedJsonGenerator0.writeObjectFieldStart("lBs.");
      writerBasedJsonGenerator0.writeBooleanField("[.Dgb)UCM(0Jd\"-x-\"p", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.getCurrentValue();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "Incomplete surrogateRpair: first char 0x";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) dataInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("Current context not an object but ", 1.0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(1219L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      iOContext0.allocNameCopyBuffer(32767);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte) (-34);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)17, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 56320;
      String string0 = "Incomplete surrogateRpair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, (int) (byte)17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(10);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 26;
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeBinary(byteArray1, 113, 0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      int int0 = (-2426);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = ")";
      writerBasedJsonGenerator0.writeFieldName(string0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeString(serializableString0);
      writerBasedJsonGenerator0.writeNumber((float) int0);
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      stringWriter0.flush();
      long[] longArray0 = new long[13];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<`IPIJ<+WWtOn}");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[0] = (byte)22;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 26;
      stringWriter0.close();
      longArray0[1] = (long) (byte)22;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)22;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte)22);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("5&H'5z(C~O*", true);
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0._verifyValueWrite("5&H'5z(C~O*");
      writerBasedJsonGenerator0.writeNumber(12000);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      writerBasedJsonGenerator0.writeArrayFieldStart("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("4X3cj[H:^).mg?V*");
      serializedString0.asQuotedUTF8();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(1142);
      writerBasedJsonGenerator0.writeNumber((short)19);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      iOContext0.allocTokenBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 85, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      writerBasedJsonGenerator0.writeArrayFieldStart("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(2);
      String string0 = "]@~u<}P2";
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1195, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0.writeNumber((short)27);
      writerBasedJsonGenerator1.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", true);
      writerBasedJsonGenerator1._verifyValueWrite("*na|^8^;U;ii>");
      iOContext0.allocTokenBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 1377, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      pipedInputStream0.markSupported();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      bufferRecycler0.allocCharBuffer(1);
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.getOutputBuffered();
      String string0 = "sX2Cf+K%j]X]Z%6";
      boolean boolean0 = false;
      // Undeclared exception!
      writerBasedJsonGenerator0._writeFieldName(string0, boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      writerBasedJsonGenerator0.writeArrayFieldStart("Incomplete surrogate pair: first char 0x");
      bufferRecycler0.allocCharBuffer(1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-8), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("tQ$CR3v");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) (byte)16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-48);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      String string0 = "Incomplete surrogate pair: first char 0x";
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      writerBasedJsonGenerator0._outputTail = (int) (byte)17;
      longArray0[0] = (long) 48;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2466));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(2741);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipedInputStream0.skip(0);
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(39);
      jsonGenerator0.writeObjectFieldStart("");
      jsonGenerator0.writeBooleanField("lBs.", false);
      jsonGenerator0.getOutputTarget();
      jsonGenerator0.close();
      try { 
        jsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      byte[] byteArray0 = new byte[11];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 31;
      byteArray0[6] = (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0._writeFieldName(",fj^Z.v5~+.s:lbAcM", false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 65535, 0);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("eIbQ[Qg0RSNX@N4.tqM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      byte[] byteArray0 = new byte[11];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 31, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 31;
      byteArray0[6] = (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '5';
      charArray0[2] = 'S';
      charArray0[3] = '.';
      charArray0[4] = '%';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0._outputHead = 500;
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray1 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray1, 1, 0);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[27];
      charArray0[0] = '}';
      charArray0[1] = '\"';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[6] = 'B';
      charArray0[7] = 'w';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("5&H'5z(C~O*", false);
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)14;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1917);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[13];
      stringWriter0.close();
      longArray0[1] = (long) (byte)14;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)14;
      writerBasedJsonGenerator0.writeNumber((short) (byte)14);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("Parser of type ", false);
      writerBasedJsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = new SerializedString("Parser of type ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler2, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 116, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray((-848));
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      stringWriter0.close();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0.writeStartObject((Object) textBuffer0);
      try { 
        writerBasedJsonGenerator0.writeString("=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 20, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumber((short)15);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeBooleanField("bQbQB5E9I", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 224, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputTail = (-254);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -254
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      iOContext0.constructTextBuffer();
      stringWriter0.close();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, 0);
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", true);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((int) (byte)17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumberField("", (float) (byte)17);
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x", 1, 0);
      writerBasedJsonGenerator0.writeRaw("Z2E0}");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, dataInputStream0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 11, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(1123);
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-360), (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      jsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (-2297));
      writerBasedJsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-360), (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
      writerBasedJsonGenerator0.writeBooleanField("ev2}B+PW+fT>(M", false);
      writerBasedJsonGenerator1.getOutputTarget();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((-1939));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      String string0 = "Incomplete surrogate pair: first char 0x";
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)17;
      intArray0[1] = 0;
      intArray0[2] = 55296;
      intArray0[3] = (int) (byte)17;
      intArray0[4] = 56320;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((-2147483662L));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'A';
      charArray0[2] = 'Y';
      charArray0[3] = 'D';
      charArray0[4] = 'U';
      charArray0[5] = 'j';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-1133), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      iOContext0.constructTextBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.close();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeString("T61=");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String((byte[]) null, 7, 2080);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      StringWriter stringWriter1 = new StringWriter(510);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(39);
      jsonGenerator0.setRootValueSeparator((SerializableString) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      writerBasedJsonGenerator0.writeBooleanField(".*mV,8*oT(V", false);
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("K,2Wt{I}K+w>'\r");
      writerBasedJsonGenerator0.writeNumber((short)1682);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      stringWriter0.flush();
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      int int1 = 884;
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("tQ$+}3v");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x", 1, 28);
      writerBasedJsonGenerator0.writeBinary(byteArray1, 2, 209);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializedString serializedString0 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 'y';
      charArray0[4] = '_';
      charArray0[5] = ')';
      charArray0[6] = 'y';
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 2);
      writerBasedJsonGenerator0.writeFieldName("p Nq>rL2oQlum:=v$");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 0);
      writerBasedJsonGenerator0.writeNumber((-1225.93042908669));
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 98, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0086';
      charArray0[1] = '\u0086';
      charArray0[2] = '\u0086';
      charArray0[3] = '\u0086';
      charArray0[4] = '\u0086';
      charArray0[5] = '\u0086';
      charArray0[6] = '\u0086';
      charArray0[7] = '\u0086';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, 0);
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", true);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'l';
      charArray0[2] = '!';
      charArray0[3] = 'F';
      stringWriter0.write(charArray0);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Incomplete surrogate pair: first char 0x, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte) (-26);
      writerBasedJsonGenerator0._outputEnd = (int) (byte) (-26);
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      stringWriter0.close();
      writerBasedJsonGenerator0.canWriteFormattedNumbers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      String string0 = "Incomplete surrogate pair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((-2147483648L));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      writerBasedJsonGenerator0.writeNumber((short)15);
      writerBasedJsonGenerator0.writeNumber("}Qs;-J{tG<NHz");
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((-1891));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      String string0 = "";
      writerBasedJsonGenerator0._maximumNonEscapedChar = 17;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName("Can not write a field namew expecting a value", true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1251);
      writerBasedJsonGenerator0.writeNumber((double) 1251);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("tQ$+}3v");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber((-2963));
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)24;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)24;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, 0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 20, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumber((short)15);
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeBooleanField("bQbQB5E9I", false);
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("bQbQB5E9I");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 794, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("tQ$+}3v");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("m?xcF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      iOContext0.allocWriteEncodingBuffer(785);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No current event to copy", true);
      writerBasedJsonGenerator0.writeRaw("No current event to copy");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "No current event to copy", true);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      stringWriter0.append((CharSequence) "No current event to copy");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3198, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeString(charArray0, 3, 247);
      stringWriter1.write(charArray0);
      SerializedString serializedString1 = new SerializedString("No current event to copy");
      writerBasedJsonGenerator1.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("write a number", true);
      long[] longArray0 = new long[2];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      longArray0[0] = (long) (-3);
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeArray(longArray0, (int) (byte) (-48), (-2816));
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("Can not write a field name, expecting a value", (-1334), 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.write((-3692));
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, 0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogateRpair: first char 0x");
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('v');
      SerializedString serializedString0 = new SerializedString("Incomplete surrogateRpair: first char 0x");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 28;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-62));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 966, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(224);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 45, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._checkStdFeatureChanges(0, 1);
      writerBasedJsonGenerator1._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      stringWriter1.close();
      iOContext0.allocTokenBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-5159));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeBooleanField("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.getOutputTarget();
      stringWriter0.flush();
      writerBasedJsonGenerator0._verifyValueWrite("P<&|");
      writerBasedJsonGenerator0.writeNumber(711L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1666, 91);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3);
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      iOContext0.allocTokenBuffer();
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3);
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      stringWriter0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeArray(longArray0, (int) (byte) (-48), (-2778));
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("Can not write a field name, expecting a value", (-1334), 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('v');
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      pipedInputStream0.markSupported();
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 0;
      String string0 = "Incomplete surrogate pair: first char 0x";
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      writerBasedJsonGenerator0.writeArrayFieldStart("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      stringWriter0.write(14);
      writerBasedJsonGenerator0.writeNumberField("Incomplete surrogate pair: first char 0x", (float) 2);
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 55296;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, (-2426));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeRaw('o');
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      pipedInputStream0.markSupported();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      writerBasedJsonGenerator0.writeArrayFieldStart("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      writerBasedJsonGenerator0.writeNumberField("Incomplete surrogate pair: first char 0x", (float) 2);
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeBinary(byteArray1, 97, (int) (byte)17);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeNumber(44);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 2994, (byte)17);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte)14;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1195, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(91);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = '|';
      charArray0[2] = ':';
      charArray0[3] = 'd';
      charArray0[4] = 't';
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, false);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, (int) (byte)0, 2102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-62));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      StringWriter stringWriter1 = new StringWriter(510);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(39);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      writerBasedJsonGenerator0.writeBooleanField(".*mV,8*oT(V", false);
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("K,2Wt{I}K+w>'\r");
      writerBasedJsonGenerator0.writeNumber((short)1682);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringWriter stringWriter0 = new StringWriter(14);
      pipedInputStream0.markSupported();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      iOContext0.allocTokenBuffer();
      longArray0[1] = (long) (byte)8;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)8;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumber((short) (byte)8);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 23, 248);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3);
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, (-2426));
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(false);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("+?PfRF'kz", "*na|^8^;U;ii>", false, '8', 57343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(65535);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)14;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)14;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 65535, (-2426));
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-1217));
      writerBasedJsonGenerator0.writeRaw("TB2HS ICgz2j@`", 3, 2);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n:'6K='H!");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "Failed rehash(): old count=";
      SerializedString serializedString0 = new SerializedString("Failed rehash(): old count=");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeRaw('v');
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x", 1, 28);
      writerBasedJsonGenerator0.writeRaw("Z2E0}");
      writerBasedJsonGenerator0.writeString("Z2E0}");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 61, (byte)17);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56332, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("AUTO_CLOSE_JSON_CONTENT", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        writerBasedJsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('v');
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x", 1, 28);
      writerBasedJsonGenerator0.writeRaw("*na|^8^;U;ii>");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      pipedInputStream0.markSupported();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumber((short) (byte)17);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 23, 248);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      int int0 = 65535;
      StringWriter stringWriter0 = new StringWriter(65535);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      String string0 = "Incomplete surrogate pair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      int int1 = (-2426);
      writerBasedJsonGenerator0._outputEnd = (int) (byte) (-48);
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializedString serializedString0 = new SerializedString("Failed rehash(): old count=");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeBooleanField("Failed rehash(): old count=", true);
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString1 = new SerializedString("");
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(65535);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("*na|^8^;U;ii>", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 65535, (-2426));
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((short) (-1217));
      writerBasedJsonGenerator0.writeRaw("TB2HS ICgz2j@`", 3, 2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)15;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)15;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 581, (int) (byte)17);
      writerBasedJsonGenerator0._flushBuffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      pipedInputStream0.skip((-1318L));
      stringWriter0.close();
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeBooleanField("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.close();
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)0;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.not();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(248);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 884, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(1240);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      iOContext0.allocWriteEncodingBuffer(785);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("No current event to copy", false);
      writerBasedJsonGenerator0.writeRaw("No current event to copy");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocTokenBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[4] = '=';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 5);
      writerBasedJsonGenerator0._flushBuffer();
      SerializedString serializedString1 = new SerializedString("No current event to copy");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("Parser of type ", false);
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeString(charArray0, 14, (-2426));
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      iOContext0.allocWriteEncodingBuffer(785);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("No current event to copy", false);
      writerBasedJsonGenerator0.writeRaw("No current event to copy");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 46);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      stringWriter0.close();
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeNumber((short)29);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 14, (ObjectCodec) null, stringWriter0);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer(65);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, (-1907));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeNumber((long) 28);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Incomplete surrogate pair: first char 0x, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      stringWriter0.append((CharSequence) "Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeString("Incomplete surrogate pair: first char 0x");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 64, (-2907));
      writerBasedJsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 28, 1251);
      writerBasedJsonGenerator0._flushBuffer();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("write a string", "write a string", false, 'M', (-2436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = new StringWriter(3);
      iOContext0.allocWriteEncodingBuffer(102);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-452), (ObjectCodec) null, stringWriter1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 1802, 1412);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 28, 1251);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      int int1 = 28;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[0];
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = ']';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, (-2555), (-3540));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString(charArray0, 28, 1251);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter(34);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer(2);
      ObjectCodec objectCodec0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 579, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      String string0 = "Incomplete surrogate pair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeStartObject();
      String string1 = "=Cj8H,\"_G";
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._maximumNonEscapedChar = (-1891);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
      writerBasedJsonGenerator0.writeRaw('v');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 1, 28);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 884);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      String string0 = "Incomplete surrogate pair: first char 0x";
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'Z';
      charArray0[2] = '#';
      charArray0[3] = 'h';
      charArray0[4] = 'p';
      charArray0[5] = 'x';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0._outputHead = 0;
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      String string0 = "tti?Pmm}y~V)~[qq/";
      short short0 = (short)115;
      writerBasedJsonGenerator0.writeNumber((short)115);
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("tti?Pmm}y~V)~[qq/", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 18, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("z/0=d:08q^z\"J<");
      writerBasedJsonGenerator0.writeNumberField("z/0=d:08q^z\"J<", (double) 1);
      int int0 = 419;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 125, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(14);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      stringWriter0.close();
      longArray0[1] = (long) (byte)17;
      writerBasedJsonGenerator0._outputEnd = (int) (byte)17;
      writerBasedJsonGenerator0.writeArray(longArray0, 3, (-2426));
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-48));
      writerBasedJsonGenerator0.writeNumber("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._verifyValueWrite("*na|^8^;U;ii>");
      writerBasedJsonGenerator0.writeRaw('q');
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56332, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0._writeFieldName("AUTO_CLOSE_JSON_CONTENT", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((-1L));
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 222, 222);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
      writerBasedJsonGenerator0.writeNumber((float) 884);
      writerBasedJsonGenerator0.writeNumber(34);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
      try { 
        writerBasedJsonGenerator1.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      writerBasedJsonGenerator0._outputHead = 0;
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      serializedString0.asQuotedUTF8();
      SerializedString serializedString1 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Incomplete surrogate pair: first char 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Incomplete surrogate pair: first char 0x, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
      writerBasedJsonGenerator0.writeNumber((float) 884);
      writerBasedJsonGenerator0.writeNumber(34);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._outputBuffer = charArray0;
      writerBasedJsonGenerator1.writeStartObject();
      try { 
        writerBasedJsonGenerator1.writeNumber((float) 56319);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 21, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = ']';
      charArray0[6] = ']';
      charArray0[7] = 'q';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 869, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short) (-27));
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1._writeFieldName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      char[] charArray0 = new char[5];
      stringWriter0.write(charArray0);
      charArray0[2] = '=';
      charArray0[3] = '=';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-177), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer();
      StringWriter stringWriter0 = new StringWriter(110);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("A;rqc9<^");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((short)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      byte[] byteArray0 = null;
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 14, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setRootValueSeparator((SerializableString) null);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)2414);
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.getOutputBuffered();
      String string0 = "";
      boolean boolean0 = false;
      char char0 = '@';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, '@', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1696, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("ZxC)aD-Y9s", true);
      writerBasedJsonGenerator0.writeRaw("ZxC)aD-Y9s");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)92;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 884, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 884
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendQuotedUTF8(byteArray0, 56);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      int int1 = 884;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0._writeFieldName("ZxC)aD-Y9s", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeBoolean(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 34;
      intArray0[2] = 1;
      intArray0[3] = 34;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeArray(intArray0, 0, 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter(34);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer(3);
      ObjectCodec objectCodec0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 579, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\"hqi";
      writerBasedJsonGenerator0._writeFieldName("\"hqi", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(26);
      iOContext0.allocWriteEncodingBuffer(22);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 34, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeStartArray();
      iOContext0.allocTokenBuffer();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 363, 1391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 363
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = ']';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\"hqi";
      writerBasedJsonGenerator0._writeFieldName("\"hqi", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 18, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("write a number");
      writerBasedJsonGenerator0.writeNumberField("write a number", (double) 1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Z2WMO2OBb[5548w", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      iOContext1.allocTokenBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(69);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding2);
      iOContext3.allocTokenBuffer();
      StringWriter stringWriter0 = new StringWriter(240);
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext2, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext4, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("*N4CuX,B;BJ1[ PjD");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 3, 83);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializedString serializedString0 = new SerializedString("Failed rehash(): old count=");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'F';
      try { 
        writerBasedJsonGenerator0.writeFieldName(")o+Nw~njY~yM-W_T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, (-2014));
      writerBasedJsonGenerator0.writeNumber((short)5741);
      SerializedString serializedString0 = new SerializedString("tti?Pmm}y~V)~[qq/");
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream1, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext1.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      int int0 = 2620;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 2620, (ObjectCodec) null, (Writer) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler1, iOContext1, true);
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext5 = iOContext0.withEncoding(jsonEncoding2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext5, (byte)126, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString("YAlmfdpT|*@T-1%9O");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, byteArray0[0], int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(785);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("t05B],]M;", true);
      SerializedString serializedString0 = new SerializedString("H-_0p");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 44, 3958);
      writerBasedJsonGenerator0.writeNumber(1774.3232F);
      writerBasedJsonGenerator0.writeNumber(785);
      writerBasedJsonGenerator0.writeNumber((short)29);
      writerBasedJsonGenerator0.writeNumber((long) 44);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeRaw("/&t?W4sywqm<KL_e");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 3, 28);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 4263, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      String string0 = "Incomplete surrogate pair: first char 0x";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      int int0 = 884;
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, 884);
      writerBasedJsonGenerator0.writeNumber((float) 884);
      writerBasedJsonGenerator0.writeNumber(34);
      short short0 = (short)29;
      writerBasedJsonGenerator0.writeNumber((short)29);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)61;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 1, (int) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 478);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 224, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("T61=");
      BigDecimal bigDecimal0 = new BigDecimal(680);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      writerBasedJsonGenerator0.writeRaw("Incomplete surrogate pair: first char 0x");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = 'V';
      charArray0[4] = 'd';
      charArray0[5] = 'g';
      charArray0[6] = '`';
      iOContext0.allocTokenBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = null;
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding2);
      iOContext0.allocTokenBuffer();
      StringWriter stringWriter0 = new StringWriter(123);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 766, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Iw-|3%,`y9.S9orpe~", false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 766, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, (-2014));
      writerBasedJsonGenerator0.writeNumber((float) (-2014));
      writerBasedJsonGenerator0.writeNumber(2134);
      writerBasedJsonGenerator0.writeNumber((short)29);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("') as character #");
      writerBasedJsonGenerator0.writeNumberField("90%I,((r3{+", 1048.06565519802);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, (-2014));
      writerBasedJsonGenerator0.writeBooleanField("tti?Pmm}y~V)~[qq/", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeObject("tti?Pmm}y~V)~[qq/");
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)104);
      SerializedString serializedString0 = new SerializedString("UTF-16LE");
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("o,0GjrR7%");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 806, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)115);
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      boolean boolean0 = true;
      writerBasedJsonGenerator1._writeFieldName("tti?Pmm}y~V)~[qq/", true);
      SerializedString serializedString0 = new SerializedString("Zj]bf$%_07oA");
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, (-1429), 4349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1429
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("') as character #");
      writerBasedJsonGenerator0.writeNumberField("90%I,((r3{+", 1048.06565519802);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 57343;
      longArray0[1] = (long) 56319;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 57343;
      longArray0[6] = (long) 57343;
      writerBasedJsonGenerator0.writeStartArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator1.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBooleanField("G&bdgi%#", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-3713));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.util.TextBuffer");
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 18, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("write a number");
      writerBasedJsonGenerator0.writeNumberField("write a number", (double) 1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 96, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      writerBasedJsonGenerator0.writeString((String) null);
      byte[] byteArray0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter((byte)0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3169), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      writerBasedJsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-3169), (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(39);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<x`Lrh5_nFu{.");
      writerBasedJsonGenerator0.writeNumberField("<x`Lrh5_nFu{.", (-791.79299));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      try { 
        writerBasedJsonGenerator0.writeBooleanField("<x`Lrh5_nFu{.", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      iOContext0.allocWriteEncodingBuffer(785);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "])}8!`IS?-8";
      String string1 = ",#zA\"\"}5ui/hb~";
      writerBasedJsonGenerator0._writeFieldName(",#zA\"\"}5ui/hb~", true);
      writerBasedJsonGenerator0.writeRaw("PEM");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 247, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2, 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 200, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("sA]=1e?ys0ad0vYO", 0.0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext2.withEncoding(jsonEncoding2);
      try { 
        writerBasedJsonGenerator0.writeBooleanField("Too few bytes available: missing ", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0, 2, (-2014));
      writerBasedJsonGenerator0.writeBooleanField("tti?Pmm}y~V)~[qq/", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)909);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._verifyValueWrite("Can not ");
      writerBasedJsonGenerator0.writeNumber((short) (-1));
      writerBasedJsonGenerator0.writeRaw('G');
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 26, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBooleanField("tti?Pmm}y~V)~[qq/", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)909);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._verifyValueWrite("Can not ");
      writerBasedJsonGenerator0.writeNumber((short) (-1));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("write a null");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2774, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._verifyValueWrite("p W.x{CdQvw&e");
      writerBasedJsonGenerator0.writeString((char[]) null, 2774, (-1699));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      iOContext2.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding2);
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding0);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext4, 0, (ObjectCodec) null, (Writer) null);
      iOContext4.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString((char[]) null, 41, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3986, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBooleanField("", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._verifyValueWrite("G&bdgi%#");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2620, (ObjectCodec) null, (Writer) null);
      iOContext1.allocTokenBuffer((-1823));
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, (byte)126, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator1.writeFieldName("}^_|");
      writerBasedJsonGenerator1.writeString("}^_|");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)22, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 96, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 1967);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      iOContext0.allocWriteEncodingBuffer(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext2.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(18);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3986, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding2);
      writerBasedJsonGenerator0.writeBooleanField("Current context not an object but ", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3169), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      SerializedString serializedString0 = new SerializedString("5");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      charArray0[1] = 'T';
      charArray0[2] = '3';
      charArray0[3] = 'k';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter((byte)0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3169), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'T';
      charArray0[2] = '3';
      charArray0[3] = 'k';
      writerBasedJsonGenerator0.writeNull();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)19;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray1, (byte)19, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 3621, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeRaw("Iw-|3%,`y9.S9orpe~", 3, 9);
      writerBasedJsonGenerator0.writeBooleanField("", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)255);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._verifyValueWrite("Iw-|3%,`y9.S9orpe~");
      iOContext2.withEncoding(jsonEncoding0);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 96, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, (-1988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(18);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3986, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeArray((long[]) null, 2, (-778));
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2620, (ObjectCodec) null, (Writer) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, (byte)126, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator1.writeRaw('\'');
      writerBasedJsonGenerator1.writeString("}^_|");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)22, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 96, (ObjectCodec) null, (Writer) null);
      String string0 = "Current context not an object but ";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("Current context not an object but ", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(2);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("5Eg>'B%}ec5YK|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'c';
      charArray0[2] = 'd';
      charArray0[3] = '(';
      charArray0[4] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 527, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 527, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 847, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("5Eg>'B%}ec5YK|", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 869, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(17.32804F);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      boolean boolean1 = true;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(544);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      assertEquals(41, writerBasedJsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = new SerializedString("Incomplete surrogate pair: first char 0x");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString0 = new SerializedString("@C@DmJmdQ||6 ");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      assertNull(object0);
      
      writerBasedJsonGenerator0.writeNumber("rw>rZHtAeg");
      writerBasedJsonGenerator0._verifyValueWrite("<DN$O}G6v4o~");
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 57, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(34);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 869, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(17.32804F);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      boolean boolean1 = true;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(1183);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = 58;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      String string0 = "Can not write a field name, expecting a value";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("?Q|sjr[NvE,aHXY", true);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(544);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(544);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString("");
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      String string0 = "90%I,((r3{+";
      writerBasedJsonGenerator0.writeNumberField("90%I,((r3{+", 1048.06565519802);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      try { 
        writerBasedJsonGenerator0.writeBooleanField("90%I,((r3{+", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      serializedString0.asUnquotedUTF8();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      serializedString0.asUnquotedUTF8();
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber((long) 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3348, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBooleanField("G&bdgi%#", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._verifyValueWrite("Can not ");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4373, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBooleanField("G&bdgi%#", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)441);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 27, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, (-439), (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((double) 544);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        serializedString0.putQuotedUTF8((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeBooleanField("G&bdgi%#", false);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, (-577), (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(13, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1324, (ObjectCodec) null, stringWriter0);
      int int0 = (-1019);
      writerBasedJsonGenerator0.writeNumber((-1019));
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 55296;
      longArray0[2] = (long) 57343;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 57343;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeArray(longArray0, 57, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2467);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '7';
      charArray0[2] = ';';
      charArray0[3] = '1';
      charArray0[4] = 'A';
      writerBasedJsonGenerator0.writeRaw(charArray0, 0, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 98, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)126, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString("}^_|");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (-505), (-505));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(544);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(544);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber(0.0);
      assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      String string0 = "G&b\\dgi%#";
      boolean boolean0 = true;
      writerBasedJsonGenerator0.writeBooleanField("d#km}SK", true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short)441);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      serializedString0.asUnquotedUTF8();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber((long) 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber("rw>rZHtAPg");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (short) (-143), (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      String string0 = "Lg:~+{He/}I";
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber("j%rcNZL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      String string0 = "Lg:~+{He/}I";
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'W';
      charArray0[2] = '+';
      charArray0[3] = 'B';
      charArray0[4] = 'o';
      charArray0[5] = 'B';
      charArray0[6] = 'Q';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("!!Xp/r#", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("SRVevI[c", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      char[] charArray0 = new char[9];
      charArray0[7] = 'f';
      charArray0[1] = 'W';
      charArray0[2] = '+';
      charArray0[3] = 'B';
      charArray0[4] = 'o';
      charArray0[5] = '+';
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString1 = new SerializedString("YZz6}DU.iYrI/");
      writerBasedJsonGenerator0.setRootValueSeparator(serializedString1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-689), (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBooleanField("G&bdgi%#", false);
      writerBasedJsonGenerator0.getOutputTarget();
      short short0 = (short) (-143);
      writerBasedJsonGenerator0.writeNumber(short0);
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeBoolean(boolean0);
      String string0 = "Can not ";
      writerBasedJsonGenerator0._verifyValueWrite(string0);
      assertEquals(26, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2716, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(18);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null, 2, 3);
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'N';
      charArray0[2] = 'y';
      charArray0[3] = 'R';
      charArray0[4] = '[';
      stringWriter0.append('O');
      charArray0[5] = '.';
      charArray0[6] = 'B';
      StringWriter stringWriter1 = stringWriter0.append('H');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-186), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("Incomplete surrogate pair: first char 0x", false);
      assertEquals("lOH", stringWriter0.toString());
      assertEquals(40, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-4002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString((char[]) null, (int) (byte)8, (-389));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(50);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-720));
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(5);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      stringWriter0.write("");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      assertEquals("\u0005", stringWriter0.toString());
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-143));
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeBoolean(false);
      assertEquals(10, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)49;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      StringWriter stringWriter0 = new StringWriter((byte)0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 438, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (byte)0);
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)93;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append('}');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter2);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Lg:~+{He/}I");
      writerBasedJsonGenerator0.setRootValueSeparator(serializedString0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Current context not an object but ");
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 35, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'y';
      charArray0[2] = '2';
      charArray0[3] = ':';
      charArray0[4] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2372, 0, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-963), 1350);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2165, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-1128), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 0, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)93;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1745, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3169), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'T';
      charArray0[2] = '$';
      charArray0[3] = 'k';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }
}
