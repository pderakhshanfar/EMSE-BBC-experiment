* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 16191
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 3512704306
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 589 / 2629
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 763 generations, 589479 statements, best individual has fitness: 610.0
* Minimizing test suite
[MASTER] 16:05:49.994 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 81%
* Total number of goals: 967
* Number of covered goals: 784
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 508
* Number of covered goals: 412
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 97
* Number of covered goals: 97
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 544
* Number of covered goals: 407
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 14
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 44
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 508
* Number of covered goals: 411
* Generated 338 tests with total length 6514
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 16:06:34.289 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67145% of time used, but only 104/338 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 16:06:57.439 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:57.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:57.783 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:57.946 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:58.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:58.213 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:58.335 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:58.453 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:58.881 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.122 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.236 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.815 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:06:59.928 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.042 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.773 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:00.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.001 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.231 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.345 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.459 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.581 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.812 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:01.926 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.037 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.261 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.577 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.825 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:02.952 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.076 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.202 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.343 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.590 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.714 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.837 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:03.960 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:04.076 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:04.736 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:04.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:04.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.078 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.190 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.417 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.639 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.751 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:05.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.023 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.309 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.446 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.652 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.778 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:06.910 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.152 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.385 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.500 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.725 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:07.952 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.408 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.586 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.712 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.832 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:08.945 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.057 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.170 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.396 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.509 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.742 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.855 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:09.971 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.278 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.392 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.733 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.845 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:10.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.206 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.465 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:11.976 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.102 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.249 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...A^b" "2","""" ["\u00[0/\u00.u]> but was:<...A^b" "2","""" ["\u00[30\u002E]>
[MASTER] 16:07:12.256 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

stringWriter0.close();
assertEquals("", stringWriter0.toString());

IOContext iOContext0 = new IOContext(bufferRecycler0, "$/zmw 6vrL+5:A^b", true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3966, (ObjectCodec) null, stringWriter0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertNotNull(writerBasedJsonGenerator0);

writerBasedJsonGenerator0.writeNumber((double) 1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());

writerBasedJsonGenerator0.writeNumber(13.2185008295999);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(24, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());

SerializedString serializedString0 = new SerializedString("$/zmw 6vrL+5:A^b");
assertEquals(16, serializedString0.charLength());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.toString());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.getValue());
assertNotNull(serializedString0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertTrue(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertNotNull(iOContext1);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(43, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(16, serializedString0.charLength());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.toString());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.getValue());
assertSame(iOContext0, iOContext1);

writerBasedJsonGenerator0.writeNumber(2);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(47, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);

JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
iOContext1.setEncoding(jsonEncoding1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertTrue(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertSame(iOContext0, iOContext1);
assertSame(jsonEncoding0, jsonEncoding1);
assertSame(iOContext1, iOContext0);
assertSame(jsonEncoding1, jsonEncoding0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(42);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(42, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(47, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(47, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertNotNull(writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0._writeFieldName("", true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(50, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0._writeFieldName("", false);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(52, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeStartArray();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(54, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber((double) 0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\" \"2\",\"\"\"\" [\"\\u000/\\u00.u", stringWriter0.toString());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

IOContext iOContext2 = iOContext0.withEncoding((JsonEncoding) null);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNull(iOContext2.getEncoding());
assertNotNull(iOContext2);
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertSame(iOContext2, iOContext0);
assertSame(iOContext2, iOContext1);

writerBasedJsonGenerator0.writeBoolean(true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\" \"2\",\"\"\"\" [\"\\u000/\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber(0.0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\" \"2\",\"\"\"\" [\"\\u000/\\u00.u\\u000/\",true,\"\\u000/\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);

[MASTER] 16:07:12.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.554 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... an object but ,\u00[cl\u00E0\u0000\u00..\u00.5\u00E0]> but was:<... an object but ,\u00[4F\u0051\u003B\u002A\u0028\u0051]>
[MASTER] 16:07:12.559 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

BufferRecycler bufferRecycler1 = new BufferRecycler();
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(bufferRecycler1);
assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 51, (ObjectCodec) null, stringWriter0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertNotNull(writerBasedJsonGenerator0);
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));

writerBasedJsonGenerator0.writeNumber((double) 2);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

writerBasedJsonGenerator0.writeNumber(0.0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

SerializedString serializedString0 = new SerializedString("Current context not an object but ");
assertEquals("Current context not an object but ", serializedString0.getValue());
assertEquals(34, serializedString0.charLength());
assertEquals("Current context not an object but ", serializedString0.toString());
assertNotNull(serializedString0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but ", stringWriter0.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals("Current context not an object but ", serializedString0.getValue());
assertEquals(34, serializedString0.charLength());
assertEquals("Current context not an object but ", serializedString0.toString());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

writerBasedJsonGenerator0.writeNumber(1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

writerBasedJsonGenerator0.writeNumber((float) 1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

writerBasedJsonGenerator0._maximumNonEscapedChar = 2;
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());

SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString1.toString());
assertEquals(" ", serializedString1.getValue());
assertEquals(1, serializedString1.charLength());
assertNotNull(serializedString1);
assertFalse(serializedString1.equals((Object)serializedString0));
assertNotSame(serializedString1, serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but \" \"1\" \"1.0\",Current context not an object but ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals("Current context not an object but ", serializedString0.getValue());
assertEquals(34, serializedString0.charLength());
assertEquals("Current context not an object but ", serializedString0.toString());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertFalse(serializedString0.equals((Object)serializedString1));
assertNotSame(bufferRecycler0, bufferRecycler1);
assertNotSame(serializedString0, serializedString1);

writerBasedJsonGenerator0._writeFieldName("OQ;*(Q{", true);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but \" \"1\" \"1.0\",Current context not an object but ,\\u00cl\\u00E0\\u0000\\u00..\\u00.5\\u00E0", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);

writerBasedJsonGenerator0.writeBoolean(true);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"2.0\" \"0.0\" \"Current context not an object but \" \"1\" \"1.0\",Current context not an object but ,\\u00cl\\u00E0\\u0000\\u00..\\u00.5\\u00E0", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(51, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
assertNotSame(bufferRecycler0, bufferRecycler1);


[MASTER] 16:07:12.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:12.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.041 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.183 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:13.781 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:14.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:14.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:14.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:14.924 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.308 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.309 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"\u00[0.\u00.u\u0000\u000c\u0007\u000c\u0005\u0000\u000"\u000c\u0007\u00cE]> but was:<"\u00[32\u002E\u0031\u0034\u0037\u0034\u0038\u0033\u0036\u0034\u0037\u0045]>
[MASTER] 16:07:15.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1653, (ObjectCodec) null, stringWriter0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(1653, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(2, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertNotNull(writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);

writerBasedJsonGenerator0.writeNumber(2.147483647E9);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);

writerBasedJsonGenerator0.writeNumber(2608.471882);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

SerializedString serializedString0 = new SerializedString(" slots is now full (all ");
assertEquals(" slots is now full (all ", serializedString0.toString());
assertEquals(24, serializedString0.charLength());
assertEquals(" slots is now full (all ", serializedString0.getValue());
assertNotNull(serializedString0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(" slots is now full (all ", serializedString0.toString());
assertEquals(24, serializedString0.charLength());
assertEquals(" slots is now full (all ", serializedString0.getValue());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber(227);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(40, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber((double) 227);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber((double) 227);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(" slots is now full (all ", serializedString0.toString());
assertEquals(24, serializedString0.charLength());
assertEquals(" slots is now full (all ", serializedString0.getValue());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeBoolean(true);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(39, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(64, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(" slots is now full (all ", serializedString0.toString());
assertEquals(24, serializedString0.charLength());
assertEquals(" slots is now full (all ", serializedString0.getValue());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(89, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(" slots is now full (all ", serializedString0.toString());
assertEquals(24, serializedString0.charLength());
assertEquals(" slots is now full (all ", serializedString0.getValue());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

BigDecimal bigDecimal0 = new BigDecimal((long) 2);
assertEquals((short)2, bigDecimal0.shortValue());
assertEquals((byte)2, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertEquals((short)2, bigDecimal0.shortValue());
assertEquals((byte)2, bigDecimal0.byteValue());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(93, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertEquals((short)2, bigDecimal0.shortValue());
assertEquals((byte)2, bigDecimal0.byteValue());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(97, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeStartObject();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals("\"\\u000.\\u00.u\\u0000\\u000c\\u0007\\u000c\\u0005\\u0000\\u000\"\\u000c\\u0007\\u00cE\\u0005\" \"\\u000.\\u000\"\\u000/\\u0005\\u00.u\\u000c\\u0007\\u0000\\u0005\\u0005\\u000.\" \" slots is now full (all \" \"227\" \"\\u000.\\u000.\\u0007\\u00.u\\u000/\" \"\\u000.\\u000.\\u0007\\u00.u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(99, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1653, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(2, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

char[] charArray0 = new char[2];
charArray0[0] = 'C';
charArray0[1] = ' ';
writerBasedJsonGenerator0.writeString(charArray0, 1, 103);

[MASTER] 16:07:15.480 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.605 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.724 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.863 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:15.992 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.128 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.415 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...w 6vrL+5:A^b","$\u00[.l\u007.\u00"n\u0077 \u000"\u007"\u007.\u00ce\u00.0\u000E\u000.\u00c0\u00Eu]> but was:<...w 6vrL+5:A^b","$\u00[2F\u007A\u006D\u0077 \u0036\u0076\u0072\u004C\u002B\u0035\u003A\u0041\u005E]>
[MASTER] 16:07:16.421 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

stringWriter0.close();
assertEquals("", stringWriter0.toString());

IOContext iOContext0 = new IOContext(bufferRecycler0, "$/zmw 6vrL+5:A^b", true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3966, (ObjectCodec) null, stringWriter0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertNotNull(writerBasedJsonGenerator0);

writerBasedJsonGenerator0.writeNumber((double) 1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());

writerBasedJsonGenerator0.writeNumber(13.2185008295999);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(24, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());

SerializedString serializedString0 = new SerializedString("$/zmw 6vrL+5:A^b");
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.toString());
assertEquals(16, serializedString0.charLength());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.getValue());
assertNotNull(serializedString0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertNotNull(iOContext1);
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(43, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.toString());
assertEquals(16, serializedString0.charLength());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.getValue());
assertSame(iOContext0, iOContext1);

JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
iOContext1.setEncoding(jsonEncoding1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
assertSame(iOContext0, iOContext1);
assertSame(jsonEncoding0, jsonEncoding1);
assertSame(iOContext1, iOContext0);
assertSame(jsonEncoding1, jsonEncoding0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(42);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(43, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator1.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(42, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(43, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertNotNull(writerBasedJsonGenerator1);
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);

writerBasedJsonGenerator0._writeFieldName("$/zmw 6vrL+5:A^b", true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\",\"$\\u00.l\\u007.\\u00\"n\\u0077 \\u000\"\\u007\"\\u007.\\u00ce\\u00.0\\u000E\\u000.\\u00c0\\u00Eu", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator1.writeBoolean(false);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\",\"$\\u00.l\\u007.\\u00\"n\\u0077 \\u000\"\\u007\"\\u007.\\u00ce\\u00.0\\u000E\\u000.\\u00c0\\u00Eu", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(13, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator1.getFeatureMask());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(42, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(13, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);

SerializedString serializedString1 = new SerializedString("");
assertEquals(0, serializedString1.charLength());
assertEquals("", serializedString1.toString());
assertEquals("", serializedString1.getValue());
assertNotNull(serializedString1);
assertFalse(serializedString1.equals((Object)serializedString0));

writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\",\"$\\u00.l\\u007.\\u00\"n\\u0077 \\u000\"\\u007\"\\u007.\\u00ce\\u00.0\\u000E\\u000.\\u00c0\\u00Eu", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(32, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.toString());
assertEquals(16, serializedString0.charLength());
assertEquals("$/zmw 6vrL+5:A^b", serializedString0.getValue());
assertFalse(serializedString0.equals((Object)serializedString1));
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(serializedString0, serializedString1);

writerBasedJsonGenerator0.writeBoolean(true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("\"1.0\" \"13.2185008295999\" \"$/zmw 6vrL+5:A^b\",\"$\\u00.l\\u007.\\u00\"n\\u0077 \\u000\"\\u007\"\\u007.\\u00ce\\u00.0\\u000E\\u000.\\u00c0\\u00Eu", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(37, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(42, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertSame(iOContext0, iOContext1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);

[MASTER] 16:07:16.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.682 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:16.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.240 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.360 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.511 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.629 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.755 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:17.883 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.097 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.239 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.519 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.857 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:18.973 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.087 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.215 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.673 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.801 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:19.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.078 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.195 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.539 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.691 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:20.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:21.167 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 16:07:29.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...35.2167612 2.0"\u007[u]> but was:<...35.2167612 2.0"\u007[E]>
[MASTER] 16:07:29.838 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 93, (ObjectCodec) null, stringWriter0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());
assertNotNull(writerBasedJsonGenerator0);

writerBasedJsonGenerator0.writeNumber(2335.2167612);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());

writerBasedJsonGenerator0.writeNumber((double) 2);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(16, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(16, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(16, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(93, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotNull(writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);

writerBasedJsonGenerator0._writeFieldName("~E", false);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("2335.2167612 2.0\"\\u007u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

char[] charArray0 = new char[9];
charArray0[0] = 'z';
charArray0[1] = 'R';
charArray0[2] = '%';
charArray0[3] = 'H';
charArray0[4] = '?';
charArray0[5] = 'G';
charArray0[6] = ')';
charArray0[7] = 'K';
charArray0[8] = 'M';
writerBasedJsonGenerator1.writeString(charArray0, 0, 1);
assertEquals(9, charArray0.length);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("2335.2167612 2.0\"\\u007u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(16, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(93, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(16, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(93, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertArrayEquals(new char[] {'z', 'R', '%', 'H', '?', 'G', ')', 'K', 'M'}, charArray0);

writerBasedJsonGenerator1.writeRaw("~E", 1491, 10);

[MASTER] 16:07:33.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[,"""55296.0""\u007[E\u00E"\u000n\u00c.]> but was:<[,"""55296.0""\u007[5\u0056\u003D\u004A]>
[MASTER] 16:07:33.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "$/zmw 6vrL5:A^b", true);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3966, (ObjectCodec) null, stringWriter0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertNotNull(writerBasedJsonGenerator0);

SerializedString serializedString0 = new SerializedString("$/zmw 6vrL5:A^b");
assertEquals(15, serializedString0.charLength());
assertEquals("$/zmw 6vrL5:A^b", serializedString0.toString());
assertEquals("$/zmw 6vrL5:A^b", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeStartArray(56320);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());

writerBasedJsonGenerator0._outputEnd = 1;
assertEquals("", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());

writerBasedJsonGenerator0._writeFieldName("", true);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());

writerBasedJsonGenerator0.writeNumber((double) 55296);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());

SerializedString serializedString1 = new SerializedString("");
assertEquals("", serializedString1.getValue());
assertEquals(0, serializedString1.charLength());
assertEquals("", serializedString1.toString());
assertNotNull(serializedString1);
assertFalse(serializedString1.equals((Object)serializedString0));

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals("[,\"\"\"55296.0", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(1, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(3966, writerBasedJsonGenerator1.getFeatureMask());
assertNotNull(writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);

writerBasedJsonGenerator0._writeFieldName("uV=J", false);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber(0.0F);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.\",\"\\u000/\\u00.u\\u000/", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString2.getValue());
assertEquals(1, serializedString2.charLength());
assertEquals(" ", serializedString2.toString());
assertNotNull(serializedString2);
assertFalse(serializedString2.equals((Object)serializedString1));
assertFalse(serializedString2.equals((Object)serializedString0));
assertNotSame(serializedString2, serializedString1);
assertNotSame(serializedString2, serializedString0);

SerializedString serializedString3 = new SerializedString("");
assertEquals(0, serializedString3.charLength());
assertEquals("", serializedString3.toString());
assertEquals("", serializedString3.getValue());
assertNotNull(serializedString3);
assertFalse(serializedString3.equals((Object)serializedString2));
assertTrue(serializedString3.equals((Object)serializedString1));
assertFalse(serializedString3.equals((Object)serializedString0));

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString3);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(0, serializedString3.charLength());
assertEquals("", serializedString3.toString());
assertEquals("", serializedString3.getValue());
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.\",\"\\u000/\\u00.u\\u000/\",\"", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(serializedString3.equals((Object)serializedString2));
assertTrue(serializedString3.equals((Object)serializedString1));
assertFalse(serializedString3.equals((Object)serializedString0));
assertNotSame(serializedString3, serializedString1);
assertNotSame(serializedString3, serializedString2);
assertNotSame(serializedString3, serializedString0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

BigInteger bigInteger0 = BigInteger.TEN;
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(bigInteger0);

BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

writerBasedJsonGenerator0.writeNumber((float) 0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.\",\"\\u000/\\u00.u\\u000/\",\"\",\"\\u000/\\u00.u\\u000/", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.\",\"\\u000/\\u00.u\\u000/\",\"\",\"\\u000/\\u00.u\\u000/\",\"10", stringWriter0.toString());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);

writerBasedJsonGenerator0.flush();
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals("[,\"\"\"55296.0\"\"\\u007E\\u00E\"\\u000n\\u00c.\",\"\\u000/\\u00.u\\u000/\",\"\",\"\\u000/\\u00.u\\u000/\",\"10\"", stringWriter0.toString());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3966, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);


* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-opt-40/tests/5
* Done!

* Computation finished
