/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:16:16 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      iOContext0.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("Can not write a field name, expecting a value", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((-26.66531F));
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      writerBasedJsonGenerator0.writeStartArray();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("T");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, true);
      writerBasedJsonGenerator0.writeRaw("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('R');
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("jfE$@6z%tr", byteArray0);
      char[] charArray0 = iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2041, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      char[] charArray0 = iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator1.writeNumber((float) 0);
      writerBasedJsonGenerator1.writeString(charArray0, 1, 61);
      writerBasedJsonGenerator1._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator1._writePPFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator1._writePPFieldName("No ObjectCodec defined for parser, needed for deserialization", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-45), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setCurrentValue(iOContext0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("_+8M'L}p~2");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(7989);
      stringWriter0.append('K');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("NyO76V2;J", true);
      writerBasedJsonGenerator0.writeNumber((float) 0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[2] = '0';
      charArray0[3] = 'K';
      charArray0[3] = 'K';
      charArray0[5] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      iOContext0.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.DupDetector", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.DupDetector", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((-26.66531F));
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.DupDetector", true);
      writerBasedJsonGenerator0.writeStartArray();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("T");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, true);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.DupDetector");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('R');
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 255, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      StringWriter stringWriter1 = new StringWriter(7989);
      stringWriter0.append('K');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("NyO76V2;J", true);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((float) 0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'w';
      charArray0[2] = '0';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString1);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("hG}K<3K,m2TD_");
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber((-2637));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      jsonGenerator0.writeNumber(3554.12F);
      writerBasedJsonGenerator0.writeString(charArray0, 56320, (-84));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1);
      serializedString0.writeUnquotedUTF8(byteArrayBuilder0);
      serializedString0.asQuotedUTF8();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonEncoding", 1, 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(2728);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined for parser, needed for deserialization", byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0._writeFieldName("", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString2);
      writerBasedJsonGenerator0.writeNumber((short)4000);
      writerBasedJsonGenerator1.flush();
      writerBasedJsonGenerator0.writeRaw('K');
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 2728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1;
      writerBasedJsonGenerator0.writeArray(intArray0, 2379, 0);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      jsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      int int0 = 797;
      char[] charArray0 = iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2041, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 220, (ObjectCodec) null, stringWriter1);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString1);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("hG}K<3K,m2TD_");
      writerBasedJsonGenerator1._releaseBuffers();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext3, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator2.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(5);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      iOContext0.allocTokenBuffer(797);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeRaw("");
      IOContext iOContext2 = new IOContext(bufferRecycler0, writerBasedJsonGenerator0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeRaw("", 3, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("h210+|pSCI;vt", 3, 1);
      writerBasedJsonGenerator0.writeFieldName("start an object");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      jsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeRaw("No ObjectCodec defined for parser, needed for deserialization");
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("No ObjectCodec defined for parser, needed for deserialization");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      jsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      DefaultIndenter defaultIndenter1 = defaultIndenter0.withIndent("E`y@n$e");
      iOContext0.allocReadIOBuffer(2);
      defaultPrettyPrinter1.withArrayIndenter(defaultIndenter1);
      defaultPrettyPrinter0.writeStartArray(writerBasedJsonGenerator0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartArray(1);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator0.writeNumberField("", (float) 2);
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'U';
      charArray0[2] = 'e';
      charArray0[3] = 's';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 7977, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7977
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0, 29979);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      iOContext0.constructTextBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 15, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("zC0pq", 0, 1);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter1);
      stringWriter1.append('_');
      iOContext2.allocWriteEncodingBuffer(1);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      char[] charArray1 = iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw('-');
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeNumber((double) 2);
      writerBasedJsonGenerator1.writeRaw(charArray1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", true);
      iOContext2.allocWriteEncodingBuffer(55296);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw("): has to be escaped using backslash to be included in ");
      writerBasedJsonGenerator0.writeRaw('-');
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeStartObject();
      try { 
        writerBasedJsonGenerator1.writeString("): has to be escaped using backslash to be included in ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)117;
      writerBasedJsonGenerator0.writeBinaryField("_pi=V6", byteArray0);
      char[] charArray0 = iOContext1.allocTokenBuffer(7971);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRawValue(charArray0, (int) (byte)66, 3);
      SerializedString serializedString1 = new SerializedString(" does not support schema of type '");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocWriteEncodingBuffer(1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)66;
      iOContext0.allocTokenBuffer((int) (byte)66);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString1);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("hG}K<3K,m2TD_");
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, true);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber((-2637));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(0.0F);
      writerBasedJsonGenerator1.writeString(charArray0, 2, 23);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 255;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped <sing backslash to be included in ", true);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(55296);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw("): has to be escaped <sing backslash to be included in ");
      writerBasedJsonGenerator0.writeRaw('-');
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0._writeFieldName("INTERN_FIELD_NAMES", true);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      writerBasedJsonGenerator1.writeBinaryField("): has to be escaped <sing backslash to be included in ", byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1985), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)34;
      writerBasedJsonGenerator0.writeNumber((float) (byte)15);
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1309, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeObjectFieldStart("\"7ni");
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      try { 
        writerBasedJsonGenerator0.writeNumber((double) 922);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          BufferRecycler bufferRecycler0 = new BufferRecycler();
          Object object0 = new Object();
          IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
          StringWriter stringWriter0 = new StringWriter();
          byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
          WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
          String string0 = "gyDL{Qm}(;K\\mf";
          writerBasedJsonGenerator0.writeBinaryField("gyDL{Qm}(;Kmf", byteArray0);
          writerBasedJsonGenerator0.writeNull();
          writerBasedJsonGenerator0.writeStartArray();
          iOContext0.constructTextBuffer();
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          writerBasedJsonGenerator0.writeNumber(1.0F);
          writerBasedJsonGenerator0._writeFieldName("gyDL{Qm}(;Kmf", true);
          writerBasedJsonGenerator0.writeStartArray();
          TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
          TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
          FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, true);
          System.setCurrentTimeMillis(57343);
          writerBasedJsonGenerator0.writeEndArray();
          writerBasedJsonGenerator0.writeNumber(92L);
          writerBasedJsonGenerator0.close();
          // Undeclared exception!
          try { 
            writerBasedJsonGenerator0.writeFieldName("");
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint((byte)110);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 12000, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, (-95));
      iOContext0.allocTokenBuffer(2550);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(2880L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator1.writeNumber((float) 2);
      writerBasedJsonGenerator1._writePPFieldName("E`y@n$e", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      String string0 = "No ObjectCodec defined for parser, needed for deserialization";
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._rootValueSeparator = null;
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(10);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-573), (ObjectCodec) null, (Writer) null);
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("YtDz-drKn3B", (int) (short)1976, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byte byte0 = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byte byte1 = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 922, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeObjectFieldStart("\"7ni");
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) (byte) (-128));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartArray(1);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      jsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 5115);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(5115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1727));
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) (-1727));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1769), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined or parser, needed or deserialization", byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined or parser, needed or deserialization");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, (-1769));
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined or parser, needed or deserialization", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter1 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4096, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      iOContext0.allocNameCopyBuffer(3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 5115);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      stringWriter0.append((CharSequence) "=<T");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-77);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)64;
      intArray0[3] = 2365;
      intArray0[4] = (int) (byte) (-108);
      intArray0[5] = 2;
      intArray0[6] = 55296;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      stringWriter1.append('L');
      writerBasedJsonGenerator0.writeNumberField("=<T", 0);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2045));
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeBinaryField("): has to be escaped using backslash to be included in ", byteArray0);
      char[] charArray0 = iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", true);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1702);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("=i|vI$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(10);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("E`y@n$e");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1769), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined or parser, needed or deserialization", byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(serializedString1);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("");
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR, false);
      writerBasedJsonGenerator0.writeString((SerializableString) defaultPrettyPrinter2.DEFAULT_ROOT_VALUE_SEPARATOR);
      writerBasedJsonGenerator0.writeNumber((short)2039);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|=:Gp");
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 13, (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((-1673L));
      writerBasedJsonGenerator0._writeFieldName("{dx+7AH", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-479), (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ZHv}_", false);
      StringWriter stringWriter0 = new StringWriter(2378);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer((-1310));
      writerBasedJsonGenerator0.writeBinaryField("ZHv}_", byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer(1);
      String string0 = "2oB8NWmHRd!c5 $E7";
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(2921);
      byteArray0[0] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      iOContext2.allocWriteEncodingBuffer(1);
      String string0 = "): has to be escaped using backslash to be included in ";
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(9);
      writerBasedJsonGenerator0.writeBinaryField("6q/N+;3zX", byteArray0);
      iOContext1.allocTokenBuffer(3);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._releaseBuffers();
      StringWriter stringWriter2 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, (-117), (ObjectCodec) null, stringWriter1);
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      StringWriter stringWriter1 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 253, (ObjectCodec) null, stringWriter0);
      iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 5, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('-');
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (-2665));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 2440, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)106, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("gyDL{Qm}(;Kmf", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber(1.0F);
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, (-911));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      iOContext0.allocBase64Buffer();
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator1.writeNumber(bigDecimal0);
      writerBasedJsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName("No ObjectCodec defined for parser, needed for deserialization", false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(10);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      iOContext0.allocTokenBuffer(797);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._releaseBuffers();
      StringWriter stringWriter2 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 56319, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
      writerBasedJsonGenerator1.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator1._releaseBuffers();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("No ObjectCodec defined for parser, needed for deserialization");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not No ObjectCodec defined for parser, needed for deserialization, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw('-');
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)25);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 21 bytes (out of 25)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter1 = stringWriter0.append('6');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 628, (ObjectCodec) null, stringWriter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      writerBasedJsonGenerator0.writeNumberField("\n", 303L);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer((-487));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 7995, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeBinaryField("", byteArray0);
      char[] charArray0 = iOContext1.allocTokenBuffer(628);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeRawValue(charArray0, 3996, 55296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1393), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1013);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      stringWriter0.append('N');
      writerBasedJsonGenerator0.writeString(charArray0, 1, 128);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("zf&x^fZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter2 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw('u');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 5115);
      writerBasedJsonGenerator0.writeRaw('g');
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a null", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "write a null");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeObjectFieldStart("write a null");
      try { 
        writerBasedJsonGenerator0._verifyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Yl[sJ@E]yFh#=");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      stringWriter0.append((CharSequence) ";Yl[sJ@E]yFh#=");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString(";Yl[sJ@E]yFh#=");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)1;
      writerBasedJsonGenerator0.writeString((String) null);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 685);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 668 bytes (out of 685)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 5115);
      writerBasedJsonGenerator0.writeRaw('g');
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringWriter stringWriter2 = new StringWriter((byte)106);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Yl[sJ@E]yFh#=");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      stringWriter0.append((CharSequence) ";Yl[sJ@E]yFh#=");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString(";Yl[sJ@E]yFh#=");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = null;
      byte byte0 = (byte)64;
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)1;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) dataInputStream0, (int) (byte)64);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 64 bytes (out of 64)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "=<T");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(5);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 877, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 45 bytes (out of 48)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeBinaryField("): has to be escaped using backslash to be included in ", byteArray0);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._writeFieldName("): has to be escaped using backslash to be included in ", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw('-');
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter(44);
      StringBuffer stringBuffer0 = new StringBuffer(" does not suppo{t:schema ofstype '");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) " does not suppo{t:schema ofstype '");
      StringWriter stringWriter3 = stringWriter0.append('+');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 255, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.flush();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3314, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(536860920);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1053), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined or parser, needed or deserialization", byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined or parser, needed or deserialization");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      ObjectCodec objectCodec0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-2899), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) (-2899));
      writerBasedJsonGenerator0._writeFieldName("T8lZ|)8p7y.MN5QD|", false);
      writerBasedJsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 7983, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-54);
      writerBasedJsonGenerator0.writeBinaryField(" bytes (out of ", byteArray0);
      char[] charArray0 = iOContext1.allocTokenBuffer((int) (byte)76);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue(charArray0, 2374, (-930));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-749), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-1.0F));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte) (-2);
      writerBasedJsonGenerator0.writeBinaryField("\u0000SOxV|_l\")`senIm&", byteArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '!';
      charArray0[2] = '\\';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = 'j';
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-345), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName(" fiZ", false);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 255, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-1597), (ObjectCodec) null, stringWriter0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(2);
      writerBasedJsonGenerator1.writeBinaryField(")", byteArray0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      char[] charArray0 = iOContext3.allocTokenBuffer((-3268));
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
      writerBasedJsonGenerator1.writeRawValue(charArray0, 313, 1422);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " does not support schema of type '");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, false);
      stringWriter0.append((CharSequence) stringBuilder1);
      writerBasedJsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((short)1013);
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1._writePPFieldName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ";Yl[sJ@\\E]yFh#=";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Yl[sJ@E]yFh#=");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      stringWriter0.append((CharSequence) ";Yl[sJ@E]yFh#=");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = null;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 685);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 668 bytes (out of 685)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeBinaryField("write a string", byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
      String string0 = "gyDL{Qm}(\\mf";
      writerBasedJsonGenerator0.writeBinaryField("gyDL{Qm}(mf", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      try { 
        writerBasedJsonGenerator0.writeBinaryField((String) null, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("gyDL{Qm}(mf", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      stringWriter0.append((CharSequence) "gyDL{Qm}(mf");
      writerBasedJsonGenerator0.writeRaw('h');
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 1497;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1497);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2992), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 224, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1264, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString((char[]) null, (int) (byte) (-60), (-5693));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(") not numeric, can not use numeric value accessors", ") not numeric, can not use numeric value accessors", true, 'z', 691);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 50)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(536860920);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1053), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined or parser, needed or deserialization", byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeBinaryField("): has to be escaped using backslash to be included in ", byteArray0);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw(']');
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Yl[sJ@E]yFh#=");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      stringWriter0.append((CharSequence) ";Yl[sJ@E]yFh#=");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2045));
      writerBasedJsonGenerator0.writeString((char[]) null, 9, (int) (byte) (-77));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer(536860920);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1053), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("No ObjectCodec defined or parser, needed or deserialization", byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte)0;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      stringWriter0.append((CharSequence) "No ObjectCodec defined or parser, needed or deserialization");
      writerBasedJsonGenerator0.writeRaw('3');
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeString("'");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 4096, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw(": was expecting closing '\"' for name");
      writerBasedJsonGenerator0._writeFieldName(": was expecting closing '\"' for name", true);
      writerBasedJsonGenerator0.writeStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1011.4F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1013);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 922, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      MockFile.createTempFile("Current context not an object but ", "Current context not an object but ");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((double) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1596), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.DupDetector", byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      iOContext1.constructTextBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((-1059.8167F));
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeStartArray();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("gyDL{Qm}(;Kmf");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      System.setCurrentTimeMillis((-1385L));
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      iOContext0.constructTextBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2704, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("h210+|pSCI;vt", false);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._releaseBuffers();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)114;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (byte)114, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("Q+~(x/k$<");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("Q+~(x/k$<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(" does not support schema of type '");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append((CharSequence) " does not support schema of type '", 1, 3);
      byte[] byteArray0 = new byte[0];
      IOContext iOContext0 = new IOContext(bufferRecycler0, " does not support schema of type '", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)113, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      writerBasedJsonGenerator0.writeNumber(0.0);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 922, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      String string0 = "Current context not an object but ";
      MockFile.createTempFile("Current context not an object but ", "Current context not an object but ");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("asUmK{p/mIG#Ie]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      MockFile.createTempFile("Current context not an object but ", "Current context not an object but ");
      iOContext0.allocTokenBuffer();
      String string0 = "Current token (";
      MockFile mockFile0 = new MockFile("Current token (", "Current token (");
      mockFile0.getAbsolutePath();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 1497;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1497);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2992), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 224, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1291, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString((char[]) null, (int) (byte) (-60), (-5693));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(") not numeric, can not use numeric value accessors", ") not numeric, can not use numeric value accessors", true, 'z', 691);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 50)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-5);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3994, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 15, 21, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter((byte)59);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = null;
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 92);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a null", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "write a null");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeObjectFieldStart("write a null");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3981, (ObjectCodec) null, (Writer) null);
      byteArrayInputStream0.read(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      writerBasedJsonGenerator0.writeBinaryField("): has to be escaped using backslash to be included in ", byteArray0);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3981, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)34;
      writerBasedJsonGenerator0.writeNumber((float) (byte)15);
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(22, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "G-k2.0#%", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-60);
      byteArray0[7] = (byte) (-5);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, (byte) (-60), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 92, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (int) (byte) (-5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      bufferRecycler0.allocByteBuffer(3);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)113, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      iOContext0.constructTextBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2704, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("h210+|pSCI;vt", false);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[6] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, (-2033), (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber((short)1632);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      iOContext1.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator1.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber("");
      StringWriter stringWriter0 = new StringWriter(6);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('e');
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.flipBit(1);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      stringWriter2.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringWriter2.write("", 13, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      iOContext0.constructTextBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2704, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("h210+|pSCI;vt", false);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._releaseBuffers();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)114;
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'p';
      charArray0[2] = 'e';
      charArray0[3] = '?';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (int) (byte)111, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Yl[sJ@E]yFh#=");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(29994);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ";Yl[sJ@E]yFh#=");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 51, 947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1884));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber((short)1632);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 12, (-2084));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56320);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-12);
      writerBasedJsonGenerator0.writeNumber("");
      stringWriter0.append('R');
      int int0 = 34;
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        stringWriter0.write("", 1, (-1357));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber((short)1632);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getCurrentValue();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3981, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 76, (ObjectCodec) null, (Writer) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-12);
      byteArray0[0] = (byte) (-12);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56320);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('%');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1024, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V`>}5", true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(379);
      writerBasedJsonGenerator0.writeNumber("");
      stringWriter0.append('R');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-12);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (-312), (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 255, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer(1);
      String string0 = "): has to be escaped using backslash to be included in ";
      writerBasedJsonGenerator0.writeBinaryField("): has to be escaped using backslash to be included in ", byteArray0);
      iOContext2.allocTokenBuffer(2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber(2);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3981, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 0, 814);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a null", true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'Z';
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "write a null");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeObjectFieldStart("write a null");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("Non-standard token '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1884));
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputTarget();
      assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      char char0 = 'x';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Current context not an object but ", "Current context not an object but ", true, 'x', 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 34)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)15;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56320);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-12);
      writerBasedJsonGenerator0.writeNumber("");
      stringWriter0.append('R');
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 1, 34);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber((float) (byte)34);
      writerBasedJsonGenerator1.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeNumber((float) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(" does not support schema of type '");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " does not support schema of type '", 1, 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinaryField(" bytes (out of ", byteArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator1._writeFieldName("", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator1.writeNumber((short)3980);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeBinaryField("", byteArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(" does not support schema of type '");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " does not support schema of type '", 1, 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinaryField(" bytes (out of ", byteArray0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(21, writerBasedJsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56320);
      writerBasedJsonGenerator0._verifyPrettyValueWrite(",l<:;R-JHfERZ[1K1}t");
      writerBasedJsonGenerator0._flushBuffer();
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawValue((char[]) null, 69, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(" does not support schema of type '");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      int int0 = 60;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 60, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("V1.d");
      writerBasedJsonGenerator0.writeNumber(3);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(")", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      writerBasedJsonGenerator0._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.getOutputBuffered();
      int int0 = writerBasedJsonGenerator0.getOutputBuffered();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 866, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3981, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byteArrayInputStream0.reset();
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", true);
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Zc5QhO ~ay_R\"", "Zc5QhO ~ay_R\"", false, 'n', (byte)113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)21;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)21, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber((float) (byte)34);
      assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeNumber(0.0F);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2983), (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'w';
      charArray0[2] = 'W';
      charArray0[3] = 'f';
      charArray0[4] = '^';
      charArray0[5] = '$';
      charArray0[6] = '^';
      charArray0[7] = 'w';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1061, 3014);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      writerBasedJsonGenerator0.writeNumber((short) (-1375));
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputTarget();
      assertEquals(10, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      writerBasedJsonGenerator0._writeFieldName("", false);
      assertEquals((-1967), writerBasedJsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer(56320);
      writerBasedJsonGenerator0._verifyPrettyValueWrite(",l<:;R-JHfERZ[1K1}t");
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 91;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 91, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNullField((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(616);
      StringBuilder stringBuilder0 = new StringBuilder("write a string");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-343), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '<';
      charArray0[2] = 'g';
      charArray0[3] = 'E';
      charArray0[4] = 'k';
      charArray0[5] = '?';
      charArray0[6] = 'M';
      stringWriter1.append((CharSequence) stringBuilder1);
      charArray0[7] = 'N';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 0, 866);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "G-k2.0#%", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-5);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, (byte) (-60), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "G-k2.0#%");
      StringWriter stringWriter2 = stringWriter1.append('q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeRaw('2');
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeRaw("Too few bytes available: missing ");
      assertEquals(33, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a null", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Z');
      stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "write a null");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber(3);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("write a null", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._releaseBuffers();
      char char0 = 'x';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("ZEUT\"o5^5o9u2MXf", ".AT+<.AN15f?W*", false, 'x', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(" does not support schema of type '");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " does not support schema of type '", 1, 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(" does not support schema of type 'do", stringWriter1.toString());
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1967), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (byte)14, 48);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "m\"N9T6$JrB$O}x9E";
      MockPrintStream mockPrintStream0 = new MockPrintStream("m\"N9T6$JrB$O}x9E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byte byte0 = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)0;
      byte byte1 = (byte)31;
      byteArray0[7] = (byte)31;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1825), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)31, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "m\"N9T6$JrB$O}x9E");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '!';
      charArray0[2] = '\\';
      charArray0[3] = ',';
      charArray0[4] = 'k';
      charArray0[5] = 'j';
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
