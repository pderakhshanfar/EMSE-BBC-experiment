* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 17418
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 1896791878
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 589 / 2629
* Search finished after 606s and 444 generations, 337812 statements, best individual has fitness: 687.0
* Minimizing test suite
[MASTER] 23:01:24.455 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 967
* Number of covered goals: 770
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 79%
* Total number of goals: 508
* Number of covered goals: 401
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 93
* Number of covered goals: 93
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 69%
* Total number of goals: 544
* Number of covered goals: 373
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 44
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 508
* Number of covered goals: 401
* Generated 284 tests with total length 5158
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:02:17.066 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.72445% of time used, but only 17/284 tests minimized), falling back to using all assertions
[MASTER] 23:02:33.964 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 23:03:20.366 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:21.299 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:22.323 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:22.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:23.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:23.734 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:23.739 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator_289_tmp__ESTest.test0(WriterBasedJsonGenerator_289_tmp__ESTest.java:37)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:23.739 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)48;
byte byte0 = (byte)87;
byteArray0[2] = (byte)87;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, true);
TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
filteringGeneratorDelegate0.getCodec();
StringWriter stringWriter0 = new StringWriter(3);
WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);

[MASTER] 23:03:28.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:28.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:29.482 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:30.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:30.921 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:31.247 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:31.842 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:32.200 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-50/tests/20
* Done!

* Computation finished
