* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 14227
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 2199485837
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 589 / 2629
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1433: 3,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1434: 3,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1435: 3,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1436: 3,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I61 Branch 145 IF_ICMPLE L1134 - false: 82,0,0| Number of FF evals: 1875
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I172 Branch 212 IF_ICMPLE L1560 - true: 16,0,0| Number of FF evals: 225
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1421: 216,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I172 Branch 212 IF_ICMPLE L1560 - false: 586,0,0| Number of FF evals: 1486
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1423: 216,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: I8 Branch 62 IF_ICMPLT L603 - false: 224,0,0| Number of FF evals: 2749
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1424: 216,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: I8 Branch 62 IF_ICMPLT L603 - true: 130,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I61 Branch 145 IF_ICMPLE L1134 - true: 781,0,0| Number of FF evals: 3587
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I60 Branch 130 IFLE L1031 - true: 196,0,0| Number of FF evals: 1314
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I304 Branch 239 IFNONNULL L1784 - true: 2778,2171,846| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I11 Branch 37 IF_ICMPLT L342 - false: 360,0,0| Number of FF evals: 2618
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I11 Branch 37 IF_ICMPLT L342 - true: 12,0,0| Number of FF evals: 2450
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I189 Branch 205 IF_ICMPLE L1500 - false: 628,253,0| Number of FF evals: 5567
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1445: 306,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1446: 306,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I71 Branch 136 IFEQ L1070 - false: 19,0,0| Number of FF evals: 734
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1442: 3,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: I17 Branch 164 IF_ICMPGE L1263 - true: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 322: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I34 Branch 127 IF_ICMPGE L1018 - true: 650,87,11| Number of FF evals: 5204
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 321: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1454: 10,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1456: 328,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1451: 10,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._releaseBuffers()V: I8 Branch 112 IFNULL L889 - true: 14,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I34 Branch 207 IF_ICMPLE L1534 - false: 5249,0,0| Number of FF evals: 4063
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: I30 Branch 17 IF_ICMPLT L205 - false: 759,0,0| Number of FF evals: 3567
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I3 Branch 26 IFEQ L267 - true: 485,0,0| Number of FF evals: 511
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I34 Branch 207 IF_ICMPLE L1534 - true: 7068,1766,4| Number of FF evals: 11430
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 633: 728,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 632: 728,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 631: 728,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I182 Branch 247 IFNONNULL L1839 - false: 8178,6801,2997| Number of FF evals: 27217
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: I17 Branch 164 IF_ICMPGE L1263 - false: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I3 Branch 26 IFEQ L267 - false: 386,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 95 TABLESWITCH L800 Case 0 - false: 216,0,0| Number of FF evals: 855
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I182 Branch 247 IFNONNULL L1839 - true: 8178,6801,2998| Number of FF evals: 27217
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I11 Branch 231 IF_ICMPGE L1728 - true: 86,0,0| Number of FF evals: 1139
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 630: 728,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 627: 728,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 95 TABLESWITCH L800 Case 0 - true: 324,0,0| Number of FF evals: 890
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: I8 Branch 59 IF_ICMPLT L579 - false: 1177,74,0| Number of FF evals: 5108
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I304 Branch 239 IFNONNULL L1784 - false: 2778,2171,844| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I14 Branch 71 IFEQ L654 - false: 2968,2554,0| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I64 Branch 109 IFNE L874 - true: 36,0,0| Number of FF evals: 1534
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I100 Branch 154 IF_ICMPLT L1183 - false: 1157,0,0| Number of FF evals: 2907
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: I8 Branch 59 IF_ICMPLT L579 - true: 728,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I100 Branch 154 IF_ICMPLT L1183 - true: 1353,0,0| Number of FF evals: 3646
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: I10 Branch 172 IF_ICMPGE L1306 - false: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I69 Branch 209 IF_ICMPLE L1542 - true: 1226,387,0| Number of FF evals: 6634
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I43 Branch 156 IF_ICMPGE L1208 - false: 146,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I12 Branch 45 IF_ICMPGE L428 - false: 2353,0,0| Number of FF evals: 1642
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I69 Branch 209 IF_ICMPLE L1542 - false: 1798,959,0| Number of FF evals: 7888
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 445: 130,0,0| Number of FF evals: 105
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 444: 130,0,0| Number of FF evals: 105
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: I10 Branch 172 IF_ICMPGE L1306 - true: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: I8 Branch 65 IF_ICMPLT L627 - false: 1056,0,0| Number of FF evals: 2358
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I12 Branch 45 IF_ICMPGE L428 - true: 639,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I228 Branch 226 IF_ICMPLE L1681 - false: 8119,7108,43| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: Line 908: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: Line 909: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I43 Branch 156 IF_ICMPGE L1208 - true: 363,0,0| Number of FF evals: 1258
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I73 Branch 152 IF_ICMPLT L1176 - false: 1037,0,0| Number of FF evals: 2907
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I23 Branch 2 IF_ICMPNE L111 - false: 130,0,0| Number of FF evals: 1294
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: I8 Branch 65 IF_ICMPLT L627 - true: 728,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I23 Branch 2 IF_ICMPNE L111 - true: 224,0,0| Number of FF evals: 3479
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I11 Branch 51 IF_ICMPLT L511 - false: 1944,0,0| Number of FF evals: 3053
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I45 Branch 52 IF_ICMPLT L517 - false: 1819,0,0| Number of FF evals: 2933
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I22 Branch 117 IF_ICMPGE L938 - true: 39,0,0| Number of FF evals: 1661
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 91 TABLESWITCH L769 Default-Case - true: 52091,43639,28617| Number of FF evals: 27314
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I22 Branch 117 IF_ICMPGE L938 - false: 12,0,0| Number of FF evals: 4458
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I26 Branch 61 IF_ICMPLT L596 - false: 102,0,0| Number of FF evals: 1438
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I41 Branch 25 IF_ICMPLT L253 - false: 177,0,0| Number of FF evals: 647
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I30 Branch 12 IFEQ L164 - false: 55,0,0| Number of FF evals: 791
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I73 Branch 152 IF_ICMPLT L1176 - true: 1037,0,0| Number of FF evals: 2898
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I45 Branch 52 IF_ICMPLT L517 - true: 1001,0,0| Number of FF evals: 959
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I11 Branch 51 IF_ICMPLT L511 - true: 912,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: Line 393: 554,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeNull()V: I8 Branch 218 IF_ICMPLT L1610 - false: 77,0,0| Number of FF evals: 694
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: Line 394: 29616,23640,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I24 Branch 192 IF_ICMPGT L1427 - false: 308,0,0| Number of FF evals: 875
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I74 Branch 217 IF_ICMPLT L1598 - true: 418,44,0| Number of FF evals: 4280
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I24 Branch 122 IF_ICMPLE L981 - true: 812,0,0| Number of FF evals: 3442
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I165 Branch 203 IFLE L1496 - true: 5728,0,0| Number of FF evals: 3862
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(Z)V: I31 Branch 84 IFEQ L729 - false: 46,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I39 Branch 119 IFEQ L943 - false: 98,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I24 Branch 192 IF_ICMPGT L1427 - true: 306,0,0| Number of FF evals: 990
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I11 Branch 231 IF_ICMPGE L1728 - false: 57,0,0| Number of FF evals: 456
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I24 Branch 122 IF_ICMPLE L981 - false: 812,0,0| Number of FF evals: 2719
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: I6 Branch 49 IF_ICMPLT L468 - true: 216,0,0| Number of FF evals: 1234
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I53 Branch 13 IFEQ L169 - true: 75,0,0| Number of FF evals: 636
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: I6 Branch 49 IF_ICMPLT L468 - false: 502,0,0| Number of FF evals: 884
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 934: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 933: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I165 Branch 203 IFLE L1496 - false: 5668,0,0| Number of FF evals: 4173
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 935: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: Line 387: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I51 Branch 36 IF_ICMPLT L332 - false: 886,0,0| Number of FF evals: 3857
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: Line 388: 30635,28122,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I16 Branch 21 IFNULL L234 - false: 3197,1166,157| Number of FF evals: 6016
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I22 Branch 6 IF_ICMPLT L132 - false: 96,0,0| Number of FF evals: 1978
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I59 Branch 124 IFEQ L986 - false: 139,0,0| Number of FF evals: 1170
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I26 Branch 31 IFEQ L297 - true: 7353,2435,0| Number of FF evals: 6240
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I68 Branch 233 IF_ICMPEQ L1742 - true: 2778,2171,841| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I16 Branch 21 IFNULL L234 - true: 470,0,0| Number of FF evals: 2607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I26 Branch 31 IFEQ L297 - false: 4654,0,0| Number of FF evals: 3830
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I48 Branch 123 IFNULL L984 - false: 13358,11137,966| Number of FF evals: 27003
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I6 Branch 81 IF_ICMPLT L709 - false: 1389,0,0| Number of FF evals: 3970
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I3 Branch 30 IFEQ L290 - true: 1113,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I23 Branch 86 IF_ICMPNE L766 - false: 257,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I6 Branch 81 IF_ICMPLT L709 - true: 639,0,0| Number of FF evals: 2336
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I11 Branch 1 IF_ICMPNE L108 - false: 342,0,0| Number of FF evals: 1159
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I94 Branch 147 IFLE L1143 - true: 82,0,0| Number of FF evals: 1421
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I80 Branch 93 IF_ICMPLT L785 - false: 1401,64,22| Number of FF evals: 4549
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I12 Branch 243 IF_ICMPLE L1808 - false: 310,0,0| Number of FF evals: 2632
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 718: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 717: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I94 Branch 147 IFLE L1143 - false: 186,0,0| Number of FF evals: 2117
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I4 Branch 72 IFNE L668 - true: 1176,0,0| Number of FF evals: 1062
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I4 Branch 72 IFNE L668 - false: 1108,0,0| Number of FF evals: 1463
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I12 Branch 243 IF_ICMPLE L1808 - true: 87,0,0| Number of FF evals: 503
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I11 Branch 53 IF_ICMPLT L530 - true: 4584,0,0| Number of FF evals: 2874
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I11 Branch 1 IF_ICMPNE L108 - true: 130,0,0| Number of FF evals: 4568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I3 Branch 30 IFEQ L290 - false: 1009,0,0| Number of FF evals: 721
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I11 Branch 53 IF_ICMPLT L530 - false: 5554,0,0| Number of FF evals: 3644
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 242: 470,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 712: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I80 Branch 93 IF_ICMPLT L785 - true: 804,0,0| Number of FF evals: 849
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 714: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I97 Branch 138 IF_ICMPGE L1080 - true: 870,239,0| Number of FF evals: 5518
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 713: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I60 Branch 151 IF_ICMPLE L1172 - true: 9163,7969,6| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 233: 470,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 234: 470,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I105 Branch 162 IFLE L1229 - false: 279,0,0| Number of FF evals: 1399
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 232: 470,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 709: 639,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 528: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 250: 1314,260,0| Number of FF evals: 4989
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 530: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I67 Branch 135 IF_ICMPGE L1070 - false: 59,0,0| Number of FF evals: 1056
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I97 Branch 161 IF_ICMPLE L1226 - false: 871,10,2| Number of FF evals: 3929
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: Line 94: 57,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: Line 95: 57,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 247: 12,0,0| Number of FF evals: 33
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 609: 189,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I24 Branch 19 IFNULL L218 - true: 284,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 607: 189,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 541: 1118,0,0| Number of FF evals: 2084
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 608: 189,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1409: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()Ljava/lang/Object;: root-Branch: 12,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 606: 130,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 603: 130,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 537: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I67 Branch 135 IF_ICMPGE L1070 - true: 59,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 839: 12,0,0| Number of FF evals: 37
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 533: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 834: 12,0,0| Number of FF evals: 37
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 833: 12,0,0| Number of FF evals: 37
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 534: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I83 Branch 222 IF_ICMPEQ L1654 - true: 11937,10227,513| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I4 Branch 5 IFNULL L127 - true: 12,0,0| Number of FF evals: 11319
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 553: 5739,0,0| Number of FF evals: 3785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I11 Branch 70 IFNE L654 - true: 3104,2559,0| Number of FF evals: 27358
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 554: 5739,0,0| Number of FF evals: 3785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 548: 236,0,0| Number of FF evals: 824
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: I4 Branch 47 IF_ICMPGE L451 - true: 101,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I11 Branch 70 IFNE L654 - false: 136,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 550: 236,0,0| Number of FF evals: 824
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: I4 Branch 47 IF_ICMPGE L451 - false: 57,0,0| Number of FF evals: 1443
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I61 Branch 100 IFEQ L812 - true: 108,0,0| Number of FF evals: 807
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 259: 1314,260,0| Number of FF evals: 4989
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 258: 1314,260,0| Number of FF evals: 4989
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I8 Branch 66 IFNONNULL L641 - false: 148,0,0| Number of FF evals: 796
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I329 Branch 227 IFNONNULL L1698 - false: 11937,10227,508| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: root-Branch: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I329 Branch 227 IFNONNULL L1698 - true: 11937,10227,508| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I8 Branch 34 IFNONNULL L322 - true: 12,0,0| Number of FF evals: 1547
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I61 Branch 158 IF_ICMPLE L1213 - true: 4168,3355,1| Number of FF evals: 27141
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 476: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I46 Branch 115 IFNULL L921 - false: 26632,21436,1239| Number of FF evals: 27349
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 479: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 478: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 88 TABLESWITCH L769 Case 1 - true: 804,0,0| Number of FF evals: 811
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1586: 7069,0,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I135 Branch 196 IF_ICMPLE L1447 - false: 822,0,0| Number of FF evals: 2573
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I8 Branch 34 IFNONNULL L322 - false: 109,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1585: 7069,0,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I61 Branch 158 IF_ICMPLE L1213 - false: 217,0,0| Number of FF evals: 1112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1584: 7069,0,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I8 Branch 66 IFNONNULL L641 - true: 57,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: I17 Branch 48 IF_ICMPLE L453 - false: 120,0,0| Number of FF evals: 1047
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1580: 7069,0,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I22 Branch 35 IF_ICMPLT L326 - false: 405,0,0| Number of FF evals: 1910
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1594: 1187,0,0| Number of FF evals: 3648
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: I16 Branch 16 IFNULL L202 - false: 1929,0,0| Number of FF evals: 3973
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1530: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1529: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I9 Branch 220 IF_ICMPLT L1637 - true: 161,0,0| Number of FF evals: 760
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I52 Branch 150 IFEQ L1169 - false: 1202,0,0| Number of FF evals: 3628
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: I16 Branch 16 IFNULL L202 - true: 639,0,0| Number of FF evals: 2301
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1526: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I24 Branch 19 IFNULL L218 - false: 5602,4362,29| Number of FF evals: 8449
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1525: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1524: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1523: 4584,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1599: 1187,0,0| Number of FF evals: 3648
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I52 Branch 150 IFEQ L1169 - true: 1037,0,0| Number of FF evals: 2908
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I22 Branch 11 IF_ICMPLT L161 - false: 106,0,0| Number of FF evals: 974
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I183 Branch 204 IFLE L1499 - false: 757,0,0| Number of FF evals: 3089
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I43 Branch 143 IF_ICMPGE L1129 - true: 82,0,0| Number of FF evals: 1875
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1559: 6757,1439,284| Number of FF evals: 10155
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;)V: I16 Branch 43 IFNE L409 - false: 109,0,0| Number of FF evals: 2136
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I24 Branch 78 IFEQ L687 - false: 280,0,0| Number of FF evals: 696
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1556: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1551: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1550: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1549: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1548: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1547: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1546: 1226,387,0| Number of FF evals: 6568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1348: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1538: 6757,1439,284| Number of FF evals: 10155
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I194 Branch 213 IF_ICMPGE L1565 - false: 7,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 439: 1573,0,0| Number of FF evals: 1016
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I10 Branch 113 IF_ICMPLE L909 - false: 65,0,0| Number of FF evals: 3443
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I81 Branch 9 IF_ICMPLT L148 - true: 85,0,0| Number of FF evals: 1849
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1496: 5668,0,0| Number of FF evals: 3612
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I3 Branch 242 IFLT L1807 - false: 383,0,0| Number of FF evals: 596
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I10 Branch 113 IF_ICMPLE L909 - true: 12,0,0| Number of FF evals: 9219
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 495: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 89 TABLESWITCH L769 Case 2 - true: 2019,0,0| Number of FF evals: 2049
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1498: 757,0,0| Number of FF evals: 2705
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 494: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: root-Branch: 554,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1499: 757,0,0| Number of FF evals: 2705
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 481: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I5 Branch 23 IFNE L247 - false: 12,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 480: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I59 Branch 216 IFGE L1594 - true: 1187,0,0| Number of FF evals: 4312
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 482: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I81 Branch 9 IF_ICMPLT L148 - false: 300,0,0| Number of FF evals: 2949
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I5 Branch 23 IFNE L247 - true: 1314,260,0| Number of FF evals: 5785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I8 Branch 102 IFNULL L834 - false: 12,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: I9 Branch 63 IFEQ L615 - false: 155,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I59 Branch 216 IFGE L1594 - false: 1527,340,0| Number of FF evals: 7925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 426: 639,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1515: 5740,0,0| Number of FF evals: 3785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 497: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 496: 1131,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1572: 6757,1439,284| Number of FF evals: 10155
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 428: 639,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I22 Branch 126 IF_ICMPGE L1013 - false: 812,0,0| Number of FF evals: 2927
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 435: 934,0,0| Number of FF evals: 777
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I8 Branch 102 IFNULL L834 - true: 2352,0,0| Number of FF evals: 2541
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 433: 639,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I86 Branch 153 IFLE L1181 - false: 1157,0,0| Number of FF evals: 2908
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1359: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I22 Branch 126 IF_ICMPGE L1013 - true: 1349,0,0| Number of FF evals: 2251
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: Line 463: 18,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I60 Branch 245 IF_ICMPLT L1816 - false: 157,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I4 Branch 85 IFNULL L759 - false: 1055,0,0| Number of FF evals: 1030
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I48 Branch 8 IFEQ L139 - true: 85,0,0| Number of FF evals: 2024
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I26 Branch 58 IF_ICMPLT L572 - false: 159,0,0| Number of FF evals: 1482
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1355: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1356: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1357: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I3 Branch 242 IFLT L1807 - true: 300,0,0| Number of FF evals: 946
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1353: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1354: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I30 Branch 22 IF_ICMPLT L237 - false: 414,0,0| Number of FF evals: 996
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I141 Branch 163 IF_ICMPLT L1238 - false: 250,0,0| Number of FF evals: 1301
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 600: 70,0,0| Number of FF evals: 136
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I93 Branch 246 IF_ICMPLE L1824 - false: 4169,3494,638| Number of FF evals: 27217
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I18 Branch 67 IFEQ L643 - false: 146,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 119: 49,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 118: 12,0,0| Number of FF evals: 35
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: Line 1727: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 123: 49,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 122: 49,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1311: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1310: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: Line 451: 57,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I106 Branch 139 IF_ICMPLE L1082 - false: 183,0,0| Number of FF evals: 1173
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1308: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1307: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1306: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1305: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I24 Branch 78 IFEQ L687 - true: 69,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I125 Branch 210 IFGT L1551 - false: 12850,11320,662| Number of FF evals: 17177
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 593: 5,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 591: 12,0,0| Number of FF evals: 25
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 590: 12,0,0| Number of FF evals: 25
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I57 Branch 116 IFEQ L923 - false: 77,0,0| Number of FF evals: 3706
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1312: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I60 Branch 92 IFNULL L777 - true: 5045,532,78| Number of FF evals: 4364
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 809: 2100,0,0| Number of FF evals: 3641
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 822: 324,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I58 Branch 108 IFNULL L873 - true: 128,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I69 Branch 201 IF_ICMPLE L1480 - true: 1174,0,0| Number of FF evals: 3798
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I69 Branch 201 IF_ICMPLE L1480 - false: 1764,590,0| Number of FF evals: 9076
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 795: 216,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 794: 216,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I34 Branch 28 IF_ICMPLT L276 - true: 2459,0,0| Number of FF evals: 2683
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 806: 2800,2019,8| Number of FF evals: 11347
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I39 Branch 232 IFNONNULL L1734 - true: 51,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I34 Branch 28 IF_ICMPLT L276 - false: 7727,4704,0| Number of FF evals: 23697
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 800: 216,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1190: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 98 TABLESWITCH L800 Case 3 - true: 216,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I22 Branch 106 IFEQ L854 - false: 1347,0,0| Number of FF evals: 3805
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I125 Branch 202 IFGT L1488 - false: 3820,3445,439| Number of FF evals: 21175
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1463: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I30 Branch 142 IF_ICMPGE L1123 - true: 415,0,0| Number of FF evals: 2382
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1464: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1465: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I30 Branch 142 IF_ICMPGE L1123 - false: 216,0,0| Number of FF evals: 3164
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I207 Branch 206 IF_ICMPGE L1505 - true: 628,253,0| Number of FF evals: 5603
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I100 Branch 42 IF_ICMPLT L378 - true: 592,0,0| Number of FF evals: 1107
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I44 Branch 215 IFNE L1590 - false: 1001,0,0| Number of FF evals: 3785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: I9 Branch 80 IFEQ L700 - false: 155,0,0| Number of FF evals: 2382
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 98 TABLESWITCH L800 Case 3 - false: 324,0,0| Number of FF evals: 1083
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I14 Branch 75 IFEQ L668 - false: 7933,6625,0| Number of FF evals: 26803
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I10 Branch 94 IF_ICMPNE L795 - false: 1292,0,0| Number of FF evals: 2688
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1468: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1469: 4584,0,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I100 Branch 42 IF_ICMPLT L378 - false: 1059,72,0| Number of FF evals: 4616
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I10 Branch 94 IF_ICMPNE L795 - true: 216,0,0| Number of FF evals: 1223
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1474: 1174,0,0| Number of FF evals: 3649
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1475: 1174,0,0| Number of FF evals: 3649
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 582: 728,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 583: 728,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 584: 728,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 974: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 585: 728,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I38 Branch 54 IFGE L537 - false: 5379,0,0| Number of FF evals: 3497
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 579: 728,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 977: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 267: 386,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 978: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I38 Branch 54 IFGE L537 - true: 4584,0,0| Number of FF evals: 2553
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 352: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 351: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 346: 12,0,0| Number of FF evals: 13
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 345: 12,0,0| Number of FF evals: 13
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 348: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I150 Branch 141 IF_ICMPLT L1094 - true: 19,0,0| Number of FF evals: 734
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I88 Branch 160 IF_ICMPGE L1224 - true: 920,0,0| Number of FF evals: 3788
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 342: 12,0,0| Number of FF evals: 13
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: Line 341: 12,0,0| Number of FF evals: 13
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I107 Branch 15 IF_ICMPLT L180 - true: 228,0,0| Number of FF evals: 1800
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I73 Branch 234 IF_ICMPLE L1743 - false: 2777,2170,837| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 273: 2531,0,0| Number of FF evals: 3702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I114 Branch 140 IFLE L1085 - true: 19,0,0| Number of FF evals: 707
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 286: 2531,0,0| Number of FF evals: 3702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I30 Branch 193 IF_ICMPLE L1428 - false: 820,0,0| Number of FF evals: 2547
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 993: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I30 Branch 193 IF_ICMPLE L1428 - true: 2,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I107 Branch 15 IF_ICMPLT L180 - false: 487,0,0| Number of FF evals: 3266
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1143: 82,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1238: 146,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I183 Branch 204 IFLE L1499 - true: 1098,160,0| Number of FF evals: 6453
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1142: 82,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I74 Branch 101 IFEQ L814 - false: 10064,7825,831| Number of FF evals: 27141
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I61 Branch 55 IFLE L541 - true: 1118,0,0| Number of FF evals: 2271
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1147: 82,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1148: 217,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1146: 82,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I129 Branch 195 IFLE L1446 - true: 312,0,0| Number of FF evals: 744
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I3 Branch 229 IFLT L1727 - true: 2379,0,0| Number of FF evals: 1241
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1149: 216,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1245: 401,0,0| Number of FF evals: 612
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I3 Branch 229 IFLT L1727 - false: 2597,0,0| Number of FF evals: 1792
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(Z)V: I13 Branch 83 IF_ICMPLT L724 - false: 82,0,0| Number of FF evals: 1090
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I129 Branch 195 IFLE L1446 - false: 306,0,0| Number of FF evals: 822
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: Line 1807: 300,0,0| Number of FF evals: 174
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 99 TABLESWITCH L800 Default-Case - true: 11486,8723,665| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I11 Branch 74 IFNE L668 - true: 8031,6629,0| Number of FF evals: 26881
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I43 Branch 40 IF_ICMPGE L366 - false: 592,0,0| Number of FF evals: 1023
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1119: 216,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1120: 216,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 156: 57,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1117: 216,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1118: 216,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I11 Branch 74 IFNE L668 - false: 98,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1094: 59,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1070: 59,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I74 Branch 159 IF_ICMPLT L1217 - false: 251,0,0| Number of FF evals: 1301
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I61 Branch 55 IFLE L541 - false: 2158,692,0| Number of FF evals: 8507
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I43 Branch 40 IF_ICMPGE L366 - true: 776,0,0| Number of FF evals: 1333
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1080: 59,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1079: 59,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1159: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I61 Branch 100 IFEQ L812 - false: 2382,35,1| Number of FF evals: 4313
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1155: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1157: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1055: 141,0,0| Number of FF evals: 590
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1158: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I9 Branch 60 IFEQ L591 - false: 42,0,0| Number of FF evals: 865
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I9 Branch 60 IFEQ L591 - true: 12,0,0| Number of FF evals: 1277
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I24 Branch 24 IFNULL L250 - true: 1314,260,0| Number of FF evals: 5777
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I42 Branch 149 IF_ICMPGE L1167 - false: 1037,0,0| Number of FF evals: 2908
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I166 Branch 211 IF_ICMPGE L1559 - true: 6757,1439,284| Number of FF evals: 10259
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I166 Branch 211 IF_ICMPGE L1559 - false: 6773,1455,284| Number of FF evals: 10413
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I30 Branch 198 IF_ICMPLE L1471 - false: 7069,0,0| Number of FF evals: 3170
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I30 Branch 198 IF_ICMPLE L1471 - true: 7503,0,0| Number of FF evals: 3846
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I30 Branch 148 IF_ICMPGE L1162 - false: 2379,0,0| Number of FF evals: 1476
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1198: 130,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1197: 130,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1196: 130,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I53 Branch 144 IFEQ L1131 - false: 217,0,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: Line 1049: 12,0,0| Number of FF evals: 13
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I76 Branch 235 IF_ICMPGE L1743 - false: 2777,2170,842| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I30 Branch 148 IF_ICMPGE L1162 - true: 2379,0,0| Number of FF evals: 1281
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I4 Branch 5 IFNULL L127 - false: 6122,0,0| Number of FF evals: 3974
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1200: 130,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 468: 216,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: Line 668: 1108,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I49 Branch 221 IFNONNULL L1646 - false: 161,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I76 Branch 235 IF_ICMPGE L1743 - true: 2777,2170,846| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: Line 861: 1347,0,0| Number of FF evals: 3713
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 471: 216,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 99 TABLESWITCH L800 Default-Case - false: 216,0,0| Number of FF evals: 1224
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I4 Branch 132 IFNULL L1049 - true: 12,0,0| Number of FF evals: 2466
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I21 Branch 27 IFEQ L273 - false: 2531,0,0| Number of FF evals: 3816
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 472: 216,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1208: 146,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I49 Branch 221 IFNONNULL L1646 - true: 5976,4951,18| Number of FF evals: 19259
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I8 Branch 76 IFNONNULL L684 - true: 470,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I21 Branch 27 IFEQ L273 - true: 4990,2188,1| Number of FF evals: 6295
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I8 Branch 69 IFEQ L654 - false: 136,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1223: 146,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: root-Branch: 130,0,0| Number of FF evals: 541
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I89 Branch 223 IF_ICMPLT L1655 - false: 161,0,0| Number of FF evals: 2000
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I8 Branch 76 IFNONNULL L684 - false: 470,0,0| Number of FF evals: 227
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I24 Branch 24 IFNULL L250 - false: 2121,1067,2| Number of FF evals: 6442
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1224: 146,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1154: 2379,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I4 Branch 132 IFNULL L1049 - false: 12869,10449,693| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I12 Branch 105 IFEQ L850 - true: 8,0,0| Number of FF evals: 1505
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I42 Branch 38 IF_ICMPLT L348 - true: 12,0,0| Number of FF evals: 1344
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I4 Branch 10 IFNULL L156 - true: 57,0,0| Number of FF evals: 1567
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I32 Branch 107 IFEQ L856 - false: 1495,105,21| Number of FF evals: 5123
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I42 Branch 38 IF_ICMPLT L348 - false: 113,0,0| Number of FF evals: 707
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I4 Branch 10 IFNULL L156 - false: 1001,0,0| Number of FF evals: 3933
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I83 Branch 194 IFGT L1436 - true: 3,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I202 Branch 238 IF_ICMPLE L1767 - false: 1410,886,0| Number of FF evals: 26401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I8 Branch 214 IF_ICMPGE L1581 - false: 8253,622,0| Number of FF evals: 6695
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I83 Branch 194 IFGT L1436 - false: 8478,7187,105| Number of FF evals: 26923
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I51 Branch 244 IF_ICMPEQ L1815 - true: 8178,6801,2999| Number of FF evals: 27217
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I54 Branch 200 IF_ICMPGE L1475 - true: 1174,0,0| Number of FF evals: 3959
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I11 Branch 39 IF_ICMPLT L358 - false: 759,0,0| Number of FF evals: 1417
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 112: 217,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 111: 130,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I38 Branch 128 IFEQ L1018 - false: 196,0,0| Number of FF evals: 1397
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I54 Branch 200 IF_ICMPGE L1475 - false: 1572,398,0| Number of FF evals: 8179
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 108: 130,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I41 Branch 20 IF_ICMPLT L221 - false: 243,0,0| Number of FF evals: 1377
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 107: 130,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1264: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1265: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1262: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1263: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1261: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1007: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1006: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I9 Branch 57 IFEQ L567 - false: 84,0,0| Number of FF evals: 915
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1010: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1009: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I18 Branch 77 IFEQ L686 - false: 69,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1266: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I11 Branch 39 IF_ICMPLT L358 - true: 569,0,0| Number of FF evals: 970
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1869: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I153 Branch 197 IF_ICMPNE L1451 - false: 10,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1868: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1866: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: I16 Branch 181 IF_ICMPGE L1355 - true: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: I16 Branch 181 IF_ICMPGE L1355 - false: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: root-Branch: 300,0,0| Number of FF evals: 2583
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1871: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I29 Branch 46 IF_ICMPLT L433 - true: 2353,0,0| Number of FF evals: 1635
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1870: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 227: 284,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1861: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 226: 284,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I3 Branch 219 IFLT L1636 - true: 300,0,0| Number of FF evals: 1917
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1859: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1865: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I29 Branch 46 IF_ICMPLT L433 - false: 639,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1864: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 641: 57,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1863: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 640: 57,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: Line 210: 639,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I3 Branch 219 IFLT L1636 - false: 300,0,0| Number of FF evals: 1307
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 364: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 363: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: Line 200: 639,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 366: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: Line 201: 639,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 684: 470,0,0| Number of FF evals: 223
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 962: 98,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I124 Branch 224 IF_ICMPLE L1662 - false: 7915,6914,108| Number of FF evals: 27216
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 648: 57,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: Line 202: 639,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 683: 470,0,0| Number of FF evals: 223
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I28 Branch 155 IF_ICMPGE L1202 - true: 378,0,0| Number of FF evals: 944
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 694: 470,0,0| Number of FF evals: 223
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 964: 98,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 963: 98,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I74 Branch 131 IF_ICMPLT L1033 - true: 311,0,0| Number of FF evals: 1477
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I153 Branch 197 IF_ICMPNE L1451 - true: 78,0,0| Number of FF evals: 609
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 361: 569,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 965: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1041: 812,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 358: 569,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I28 Branch 155 IF_ICMPGE L1202 - false: 130,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 357: 470,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 382: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I42 Branch 32 IF_ICMPLT L300 - false: 8558,4823,0| Number of FF evals: 23658
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 381: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I124 Branch 224 IF_ICMPLE L1662 - true: 161,0,0| Number of FF evals: 2000
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I42 Branch 32 IF_ICMPLT L300 - true: 2699,0,0| Number of FF evals: 2589
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 378: 592,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I8 Branch 214 IF_ICMPGE L1581 - true: 7069,0,0| Number of FF evals: 3597
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: Line 1694: 170,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 218: 284,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: Line 654: 12,0,0| Number of FF evals: 43
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I35 Branch 82 IF_ICMPLT L714 - true: 639,0,0| Number of FF evals: 2143
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I35 Branch 82 IF_ICMPLT L714 - false: 1418,0,0| Number of FF evals: 3919
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I35 Branch 199 IF_ICMPLE L1472 - true: 2223,1049,176| Number of FF evals: 10233
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I80 Branch 111 IFEQ L876 - false: 29,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: root-Branch: 57,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I54 Branch 208 IF_ICMPGE L1537 - true: 1524,417,32| Number of FF evals: 6673
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I54 Branch 208 IF_ICMPGE L1537 - false: 1508,401,32| Number of FF evals: 6800
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()Ljava/lang/Object;: Line 88: 12,0,0| Number of FF evals: 43
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 310: 4654,0,0| Number of FF evals: 3768
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I68 Branch 110 IFEQ L874 - false: 8,0,0| Number of FF evals: 829
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I56 Branch 41 IF_ICMPLE L368 - false: 173,0,0| Number of FF evals: 1072
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: Line 1636: 300,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I19 Branch 133 IFEQ L1053 - false: 67,0,0| Number of FF evals: 939
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I27 Branch 114 IF_ICMPLE L916 - false: 147,0,0| Number of FF evals: 2031
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I30 Branch 7 IFEQ L135 - false: 62,0,0| Number of FF evals: 5398
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 296: 4654,0,0| Number of FF evals: 3768
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 297: 4654,0,0| Number of FF evals: 3768
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 97 TABLESWITCH L800 Case 2 - true: 7081,4529,668| Number of FF evals: 16072
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._flushBuffer()V: I11 Branch 250 IFLE L1877 - false: 108,0,0| Number of FF evals: 7321
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I35 Branch 118 IF_ICMPGE L943 - true: 3287,2680,241| Number of FF evals: 14106
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I93 Branch 14 IF_ICMPLT L177 - true: 75,0,0| Number of FF evals: 539
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I93 Branch 14 IF_ICMPLT L177 - false: 303,0,0| Number of FF evals: 2144
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 290: 1009,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 97 TABLESWITCH L800 Case 2 - false: 216,0,0| Number of FF evals: 1034
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: Line 1652: 71,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I63 Branch 29 IF_ICMPLT L281 - false: 5304,4309,0| Number of FF evals: 21268
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I5 Branch 18 IFNE L215 - true: 284,0,0| Number of FF evals: 849
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: Line 127: 12,0,0| Number of FF evals: 16
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I8 Branch 104 IFNULL L850 - true: 14,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 96 TABLESWITCH L800 Case 1 - true: 4021,1466,70| Number of FF evals: 6710
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 96 TABLESWITCH L800 Case 1 - false: 216,0,0| Number of FF evals: 1221
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 520: 1001,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I8 Branch 230 IF_ICMPLE L1728 - true: 219,0,0| Number of FF evals: 780
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 521: 1001,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I24 Branch 4 IF_ICMPNE L122 - true: 49,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 517: 1001,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 514: 912,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 515: 912,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I24 Branch 4 IF_ICMPNE L122 - false: 59,0,0| Number of FF evals: 819
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I109 Branch 56 IF_ICMPLT L550 - false: 2171,804,0| Number of FF evals: 9887
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I14 Branch 103 IFEQ L835 - false: 612,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I109 Branch 56 IF_ICMPLT L550 - true: 1031,0,0| Number of FF evals: 2383
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: I26 Branch 64 IF_ICMPLT L619 - false: 354,0,0| Number of FF evals: 1519
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: I46 Branch 50 IF_ICMPLE L484 - false: 1131,0,0| Number of FF evals: 1955
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: I46 Branch 50 IF_ICMPLE L484 - true: 1131,0,0| Number of FF evals: 2025
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;)V: I33 Branch 44 IF_ICMPLT L414 - true: 38,0,0| Number of FF evals: 1787
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I71 Branch 121 IFLE L956 - true: 162,0,0| Number of FF evals: 820
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1300: 73063,62306,0| Number of FF evals: 27309
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I71 Branch 121 IFLE L956 - false: 98,0,0| Number of FF evals: 980
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I4 Branch 68 IFNE L654 - false: 12,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I74 Branch 33 IF_ICMPLT L305 - false: 5899,4397,0| Number of FF evals: 21268
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I212 Branch 225 IFNONNULL L1677 - true: 170,0,0| Number of FF evals: 1634
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I4 Branch 68 IFNE L654 - true: 81,0,0| Number of FF evals: 327
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 511: 912,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 509: 912,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I8 Branch 230 IF_ICMPLE L1728 - false: 276,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I8 Branch 73 IFEQ L668 - false: 98,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I12 Branch 3 IF_ICMPNE L119 - false: 148,0,0| Number of FF evals: 1551
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I12 Branch 3 IF_ICMPNE L119 - true: 49,0,0| Number of FF evals: 1479
* Search finished after 602s and 663 generations, 490715 statements, best individual has fitness: 655.0
* Minimizing test suite
[MASTER] 18:22:46.235 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 967
* Number of covered goals: 776
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 80%
* Total number of goals: 508
* Number of covered goals: 405
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 71%
* Total number of goals: 544
* Number of covered goals: 385
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 44
* Number of covered goals: 41
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 508
* Number of covered goals: 404
* Generated 309 tests with total length 5469
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:23:40.854 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6848333333333333% of time used, but only 59/309 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 18:24:23.656 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:23.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:24.276 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:24.590 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:24.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:25.234 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:25.439 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:25.605 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:26.362 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:26.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:26.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:26.992 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:27.167 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:27.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:27.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:27.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:27.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:28.219 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:28.395 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:28.678 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:28.970 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:29.172 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:29.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:29.530 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:29.705 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:29.887 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:30.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:30.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:30.480 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:30.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:30.813 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:31.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:31.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:31.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:31.807 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.236 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.422 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.592 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:32.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:33.124 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:33.266 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:33.502 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:33.651 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:33.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:34.051 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:34.192 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:34.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:34.514 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:35.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:35.759 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:35.914 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.096 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.232 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.366 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.512 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.706 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:36.887 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:37.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:37.308 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:37.473 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:37.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:24:40.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<3"&3|","""\u00[\l\u00\0\u00"u\u00\"\u00"0\u000u\u00uu\u00\\\u00\u\u0000\u00u\\u00"n\u00uu\u00"u]> but was:<3"&3|","""\u00[2F\u0024\u0061\u0027\u0074\u0049\u0039\u0022\u0021\u0054\u0038\u006D\u0033\u0073]>
[MASTER] 18:24:40.553 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter(1);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter1 = stringWriter0.append('3');
assertEquals("3", stringWriter0.toString());
assertEquals("3", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 40, (ObjectCodec) null, stringWriter1);
assertEquals("3", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
assertEquals("3", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(40, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(1, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertEquals("3", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

char[] charArray0 = iOContext0.allocNameCopyBuffer(0);
assertEquals(200, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(charArray0);

writerBasedJsonGenerator0._writeFieldName("", true);
assertEquals("3", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0._writeFieldName("/$a'tI9\"!T8m3sH", false);
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator1.writeNumber((BigInteger) null);
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(12, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(40, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(1, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._verifyValueWrite("=GfRd6i&H;Wtr;<");
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("3\"&3|\b\",\"\"\"\\u00\\l\\u00\\0\\u00\"u\\u00\\\"\\u00\"0\\u000u\\u00uu\\u00\\\\\\u00\\u\\u0000\\u00u\\\\u00\"n\\u00uu\\u00\"u", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(40, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(13, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);


[MASTER] 18:24:40.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<-,"\u00[00\u00"\\u00""\u00"l\u00"u\u00"0\u00"u\u00"0\u00\"\u00"u\u00"u\u00"0\u00"u\u00"u\u00"u\u00"0\u00"l\u00"\\u00\"\u00"u\u00"l\u00"0\u00\"\u00""\u00"l\u00""\u00""\u00"l\u00""\u00"0\u00"0\u00\"\u00"\\u00"u\u00\"\u00"u\u00\"\u00"0\u00"u\u00""\u00"u]> but was:<-,"\u00[45\u0078\u0070\u006F\u006E\u0065\u006E\u0074\u0020\u0069\u006E\u0064\u0069\u0063\u0061\u0074\u006F\u0072\u0020\u006E\u006F\u0074\u0020\u0066\u006F\u006C\u006C\u006F\u0077\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u0020\u0064\u0069\u0067\u0069]>
[MASTER] 18:24:41.064 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

StringWriter stringWriter0 = new StringWriter(46);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringBuilder stringBuilder0 = new StringBuilder("H@vD=");
assertEquals("H@vD=", stringBuilder0.toString());
assertNotNull(stringBuilder0);

StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
assertEquals("H@vD=0.0", stringBuilder0.toString());
assertEquals("H@vD=0.0", stringBuilder1.toString());
assertSame(stringBuilder0, stringBuilder1);
assertSame(stringBuilder1, stringBuilder0);
assertNotNull(stringBuilder1);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext0);

JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext1);

IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext2.getEncoding());
assertFalse(iOContext2.isResourceManaged());
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertSame(iOContext1, iOContext0);
assertSame(iOContext1, iOContext2);
assertSame(iOContext2, iOContext0);
assertSame(iOContext2, iOContext1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext2);

StringWriter stringWriter1 = stringWriter0.append('-');
assertEquals("-", stringWriter0.toString());
assertEquals("-", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 8, (ObjectCodec) null, stringWriter1);
assertEquals("-", stringWriter0.toString());
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("-", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(8, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator0);

byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-120);
byteArray0[1] = (byte)10;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(2, byteArray0.length);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-120), (byte)10}, byteArray0);

StringBuilder stringBuilder2 = new StringBuilder("");
assertEquals("", stringBuilder2.toString());
assertFalse(stringBuilder2.equals((Object)stringBuilder1));
assertFalse(stringBuilder2.equals((Object)stringBuilder0));
assertNotNull(stringBuilder2);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
assertEquals("-", stringWriter0.toString());
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("-", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(8, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(3, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(8, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertSame(iOContext1, iOContext0);
assertSame(iOContext1, iOContext2);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

IOContext iOContext3 = new IOContext(bufferRecycler0, pipedInputStream0, false);
assertEquals(0, pipedInputStream0.available());
assertNull(iOContext3.getEncoding());
assertFalse(iOContext3.isResourceManaged());
assertFalse(iOContext3.equals((Object)iOContext0));
assertFalse(iOContext3.equals((Object)iOContext2));
assertFalse(iOContext3.equals((Object)iOContext1));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertNotNull(iOContext3);

writerBasedJsonGenerator0._writeFieldName("Exponent indicator not followed by a digit", true);
assertEquals("-,\"\\u0000\\u00\"\\\\u00\"\"\\u00\"l\\u00\"u\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\"0\\u00\"u\\u00\"u\\u00\"u\\u00\"0\\u00\"l\\u00\"\\\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"\"\\u00\"l\\u00\"\"\\u00\"\"\\u00\"l\\u00\"\"\\u00\"0\\u00\"0\\u00\\\"\\u00\"\\\\u00\"u\\u00\\\"\\u00\"u\\u00\\\"\\u00\"0\\u00\"u\\u00\"\"\\u00\"u", stringWriter0.toString());
assertFalse(iOContext0.isResourceManaged());
assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("-,\"\\u0000\\u00\"\\\\u00\"\"\\u00\"l\\u00\"u\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\"0\\u00\"u\\u00\"u\\u00\"u\\u00\"0\\u00\"l\\u00\"\\\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"\"\\u00\"l\\u00\"\"\\u00\"\"\\u00\"l\\u00\"\"\\u00\"0\\u00\"0\\u00\\\"\\u00\"\\\\u00\"u\\u00\\\"\\u00\"u\\u00\\\"\\u00\"0\\u00\"u\\u00\"\"\\u00\"u", stringWriter1.toString());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(8, writerBasedJsonGenerator0.getFeatureMask());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getHighestEscapedChar());
assertSame(stringWriter0, stringWriter1);
assertSame(iOContext0, iOContext1);
assertSame(iOContext0, iOContext2);
assertNotSame(iOContext0, iOContext3);
assertNotSame(iOContext1, iOContext3);
assertSame(iOContext1, iOContext0);
assertSame(iOContext1, iOContext2);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertFalse(iOContext0.equals((Object)iOContext3));
assertFalse(iOContext1.equals((Object)iOContext3));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeRaw((String) null);

[MASTER] 18:24:42.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...ing field name "\u00[""]> but was:<...ing field name "\u00[00]>
[MASTER] 18:24:42.340 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(charArray0);

writerBasedJsonGenerator1._writeFieldName(", expecting field name", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q&3|\b,, expecting field name", stringWriter0.toString());
assertEquals("q&3|\b,, expecting field name", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator1.writeString(charArray0, 44, 1);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"", stringWriter0.toString());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);


[MASTER] 18:24:44.563 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...ing field name "\u00[""]> but was:<...ing field name "\u00[00]>
[MASTER] 18:24:44.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(charArray0);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(3, byteArray0.length);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

writerBasedJsonGenerator1._writeFieldName(", expecting field name", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,, expecting field name", stringWriter0.toString());
assertEquals("q&3|\b,, expecting field name", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator1.writeString(charArray0, 44, 1);
assertEquals(56319, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"", stringWriter0.toString());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"", stringWriter1.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator1.writeBoolean(false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"\" ", stringWriter0.toString());
assertEquals("q&3|\b,, expecting field name \"\\u00\"\"\" ", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(5, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);


[MASTER] 18:24:48.335 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...name and value "\u00[""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""\u00""]> but was:<...name and value "\u00[00\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]>
[MASTER] 18:24:48.343 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("Current context not an object but ");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

CharacterEscapes characterEscapes0 = writerBasedJsonGenerator0._characterEscapes;
assertNull(characterEscapes0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator2.getHighestEscapedChar());
assertEquals(34, writerBasedJsonGenerator2.getOutputBuffered());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator2);

writerBasedJsonGenerator1._outputEnd = 3;
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(34, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(34, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());

char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(charArray0);

writerBasedJsonGenerator1._writeFieldName(", expecting field name", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("Current context not an object but ,, expecting field name", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator1._writeFieldName("was expecting a colon to separate field name and value", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("Current context not an object but ,, expecting field name,was expecting a colon to separate field name and value", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0.writeString(charArray0, 1, 58);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("Current context not an object but ,, expecting field name,was expecting a colon to separate field name and value \"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"\\u00\"\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);


[MASTER] 18:24:48.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q&3|,\u00[0u\u00"0\u00"\\u00"\\u00"0\u00"u\u00"0\u00\"\u00"u\u00"l\u00"u\u00"0\u00"0\u00"\\u00"0\u00\"\u00"u\u00"l\u00"0\u00\"\u00"u\u00"u\u00\"\u00"l\u00"\\u00"0\u00"0\u00"u\u00"0\u00\"\u00"\\u00"0\u00"0\u00\"]> but was:<q&3|,\u00[43\u0075\u0072\u0072\u0065\u006E\u0074\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u006E\u006F\u0074\u0020\u0061\u006E\u0020\u006F\u0062\u006A\u0065\u0063\u0074\u0020\u0062\u0075\u0074\u0020]>
[MASTER] 18:24:48.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(charArray0);

StringBuilder stringBuilder0 = new StringBuilder("Current context not an object but ");
assertEquals("Current context not an object but ", stringBuilder0.toString());
assertNotNull(stringBuilder0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setHighestNonEscapedChar(17);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator2.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator2.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator2);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 21, 21);
assertEquals(3, byteArray0.length);
assertEquals((-18), byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
assertEquals(3, byteArray0.length);
assertTrue(iOContext1.isResourceManaged());
assertNull(iOContext1.getEncoding());
assertEquals((-18), byteArrayInputStream0.available());
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertNotNull(iOContext1);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

writerBasedJsonGenerator1._writeFieldName("Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter0.toString());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

WriterBasedJsonGenerator writerBasedJsonGenerator3 = new WriterBasedJsonGenerator(iOContext1, (-902), (ObjectCodec) null, stringWriter0);
assertEquals(3, byteArray0.length);
assertTrue(iOContext1.isResourceManaged());
assertNull(iOContext1.getEncoding());
assertFalse(writerBasedJsonGenerator3.isClosed());
assertFalse(writerBasedJsonGenerator3.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator3.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator3.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator3.getOutputBuffered());
assertTrue(writerBasedJsonGenerator3.canOmitFields());
assertFalse(writerBasedJsonGenerator3.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator3.getFormatFeatures());
assertFalse(writerBasedJsonGenerator3.canWriteTypeId());
assertEquals((-902), writerBasedJsonGenerator3.getFeatureMask());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter0.toString());
assertEquals((-18), byteArrayInputStream0.available());
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator0));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator2));
assertFalse(writerBasedJsonGenerator3.equals((Object)writerBasedJsonGenerator1));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator3);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

writerBasedJsonGenerator1._releaseBuffers();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter0.toString());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator3);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator3);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator3));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator3));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);


[MASTER] 18:24:49.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q&3|,\u00["u\u00"u\u00"u\u00\l\u000"\u000"\u00\u\u00"0\u0000\u00"u\u000u] > but was:<q&3|,\u00[7E\u007E\u007B\u002F\u0040\u004C\u002B\u0065\u0054\u0061\u0043] >
[MASTER] 18:24:49.240 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeNull());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertNotNull(charArray0);

StringBuilder stringBuilder0 = new StringBuilder("Current context not an object but ");
assertEquals("Current context not an object but ", stringBuilder0.toString());
assertNotNull(stringBuilder0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setHighestNonEscapedChar(17);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator2.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertEquals(4, writerBasedJsonGenerator2.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator2);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

writerBasedJsonGenerator1.writeNumberField("~~{/@L+eTaC", 3);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q&3|\b,\\u00\"u\\u00\"u\\u00\"u\\u00\\l\\u000\"\\u000\"\\u00\\u\\u00\"0\\u0000\\u00\"u\\u000u ", stringWriter0.toString());
assertEquals("q&3|\b,\\u00\"u\\u00\"u\\u00\"u\\u00\\l\\u000\"\\u000\"\\u00\\u\\u00\"0\\u0000\\u00\"u\\u000u ", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator2._writePPFieldName(")*\"B`CONvq1^", true);

[MASTER] 18:24:50.247 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q&3|,\u00["u\u00"u\u00"u\u00\l\u000"\u000"\u00\u\u00"0\u0000\u00"u\u000u] > but was:<q&3|,\u00[7E\u007E\u007B\u002F\u0040\u004C\u002B\u0065\u0054\u0061\u0043] >
[MASTER] 18:24:50.253 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

boolean boolean0 = true;
IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(charArray0);

StringBuilder stringBuilder0 = new StringBuilder("Current context not an object but ");
assertEquals("Current context not an object but ", stringBuilder0.toString());
assertNotNull(stringBuilder0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setHighestNonEscapedChar(17);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertEquals(4, writerBasedJsonGenerator2.getOutputBuffered());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator2.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator2);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

String string0 = "~~{/@L+eTaC";
writerBasedJsonGenerator1.writeNumberField("~~{/@L+eTaC", 3);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("q&3|\b,\\u00\"u\\u00\"u\\u00\"u\\u00\\l\\u000\"\\u000\"\\u00\\u\\u00\"0\\u0000\\u00\"u\\u000u ", stringWriter0.toString());
assertEquals("q&3|\b,\\u00\"u\\u00\"u\\u00\"u\\u00\\l\\u000\"\\u000\"\\u00\\u\\u00\"0\\u0000\\u00\"u\\u000u ", stringWriter1.toString());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

String string1 = ")*\"B`CONvq1^";
String string2 = "B]AR\\Sm5,!=r'b!Y";
SerializedString serializedString0 = new SerializedString(")*\"B`CONvq1^");
assertEquals(")*\"B`CONvq1^", serializedString0.toString());
assertEquals(12, serializedString0.charLength());
assertEquals(")*\"B`CONvq1^", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator2.writeFieldName((SerializableString) serializedString0);

[MASTER] 18:24:51.049 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q&3|,\u00[0u\u00"0\u00"\\u00"\\u00"0\u00"u\u00"0\u00\"\u00"u\u00"l\u00"u\u00"0\u00"0\u00"\\u00"0\u00\"\u00"u\u00"l\u00"0\u00\"\u00"u\u00"u\u00\"\u00"l\u00"\\u00"0\u00"0\u00"u\u00"0\u00\"\u00"\\u00"0\u00"0\u00\"]> but was:<q&3|,\u00[43\u0075\u0072\u0072\u0065\u006E\u0074\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u006E\u006F\u0074\u0020\u0061\u006E\u0020\u006F\u0062\u006A\u0065\u0063\u0074\u0020\u0062\u0075\u0074\u0020]>
[MASTER] 18:24:51.058 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(charArray0);

StringBuilder stringBuilder0 = new StringBuilder("Current context not an object but ");
assertEquals("Current context not an object but ", stringBuilder0.toString());
assertNotNull(stringBuilder0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setHighestNonEscapedChar(17);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertEquals(17, writerBasedJsonGenerator2.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertEquals(4, writerBasedJsonGenerator2.getOutputBuffered());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertNotNull(writerBasedJsonGenerator2);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 21, 21);
assertEquals(3, byteArray0.length);
assertEquals((-18), byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
assertEquals(3, byteArray0.length);
assertNull(iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertEquals((-18), byteArrayInputStream0.available());
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext1);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

writerBasedJsonGenerator1._writeFieldName("Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter0.toString());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator1.writeNumber(0L);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\" ", stringWriter0.toString());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\" ", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator1.writeNumber("Current context not an object but ");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\" 0 Current context not an object b", stringWriter0.toString());
assertEquals("q&3|\b,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\" 0 Current context not an object b", stringWriter1.toString());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(3, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);


[MASTER] 18:24:51.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q"&3|""" "\u00[\"\u00uu]"> but was:<q"&3|""" "\u00[26\u0033]">
[MASTER] 18:24:51.379 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(iOContext0);

StringReader stringReader0 = new StringReader("");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotNull(charsToNameCanonicalizer0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2857, (ObjectCodec) null, stringWriter1);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(33);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(2857, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(33, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator1);

writerBasedJsonGenerator0.writeNumber("&3|\b");
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

stringWriter0.close();
assertEquals("q", stringWriter0.toString());
assertSame(stringWriter0, stringWriter1);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeRawValue());
assertTrue(tokenFilter0.includeBinary());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

char[] charArray0 = writerBasedJsonGenerator1._outputBuffer;
assertEquals(4000, charArray0.length);
assertNotNull(charArray0);

writerBasedJsonGenerator0._writeFieldName("", false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0.writeString(charArray0, 1, 2);
assertEquals(4000, charArray0.length);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(23, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(2857, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(33, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(23, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.close();
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("q\"&3|\b\"\"\" \"\\u00\\\"\\u00uu\"", stringWriter0.toString());
assertEquals("q\"&3|\b\"\"\" \"\\u00\\\"\\u00uu\"", stringWriter1.toString());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(33, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2857, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator1.writeString((String) null);

[MASTER] 18:24:51.918 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<q,\u00[0u\u00"0\u00"\\u00"\\u00"0\u00"u\u00"0\u00\"\u00"u\u00"l\u00"u\u00"0\u00"0\u00"\\u00"0\u00\"\u00"u\u00"l\u00"0\u00\"\u00"u\u00"u\u00\"\u00"l\u00"\\u00"0\u00"0\u00"u\u00"0\u00\"\u00"\\u00"0\u00"0\u00\"]> but was:<q,\u00[43\u0075\u0072\u0072\u0065\u006E\u0074\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u006E\u006F\u0074\u0020\u0061\u006E\u0020\u006F\u0062\u006A\u0065\u0063\u0074\u0020\u0062\u0075\u0074\u0020]>
[MASTER] 18:24:51.924 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(iOContext0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('q');
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1517), (ObjectCodec) null, stringWriter1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertNotNull(writerBasedJsonGenerator0);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertNotNull(writerBasedJsonGenerator1);

TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
assertTrue(tokenFilter0.includeBinary());
assertTrue(tokenFilter0.includeRawValue());
assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
assertTrue(tokenFilter0.includeNull());
assertNotNull(tokenFilter0);

writerBasedJsonGenerator1._outputEnd = 3;
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());

byte[] byteArray0 = new byte[3];
byteArray0[1] = (byte)2;
char[] charArray0 = iOContext0.allocNameCopyBuffer(56319);
assertEquals(56319, charArray0.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(charArray0);

StringBuilder stringBuilder0 = new StringBuilder("Current context not an object but ");
assertEquals("Current context not an object but ", stringBuilder0.toString());
assertNotNull(stringBuilder0);

WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setHighestNonEscapedChar(17);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q", stringWriter0.toString());
assertEquals("q", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals((-1517), writerBasedJsonGenerator2.getFeatureMask());
assertFalse(writerBasedJsonGenerator2.canWriteObjectId());
assertEquals(17, writerBasedJsonGenerator2.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator2.canOmitFields());
assertFalse(writerBasedJsonGenerator2.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator2.getOutputBuffered());
assertFalse(writerBasedJsonGenerator2.isClosed());
assertFalse(writerBasedJsonGenerator2.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator2.getFormatFeatures());
assertFalse(writerBasedJsonGenerator2.canWriteFormattedNumbers());
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator2, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertNotNull(writerBasedJsonGenerator2);

PipedInputStream pipedInputStream0 = new PipedInputStream();
assertEquals(0, pipedInputStream0.available());
assertNotNull(pipedInputStream0);

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 21, 21);
assertEquals(3, byteArray0.length);
assertEquals((-18), byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
assertEquals(3, byteArray0.length);
assertEquals((-18), byteArrayInputStream0.available());
assertNull(iOContext1.getEncoding());
assertTrue(iOContext1.isResourceManaged());
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertNotNull(iOContext1);
assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);

writerBasedJsonGenerator1._writeFieldName("Current context not an object but ", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter0.toString());
assertEquals("q,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator1.writeNumber("Current context not an object but ");
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("q,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"Current context not an object but", stringWriter0.toString());
assertEquals("q,\\u000u\\u00\"0\\u00\"\\\\u00\"\\\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"u\\u00\"0\\u00\"0\\u00\"\\\\u00\"0\\u00\\\"\\u00\"u\\u00\"l\\u00\"0\\u00\\\"\\u00\"u\\u00\"u\\u00\\\"\\u00\"l\\u00\"\\\\u00\"0\\u00\"0\\u00\"u\\u00\"0\\u00\\\"\\u00\"\\\\u00\"0\\u00\"0\\u00\\\"Current context not an object but", stringWriter1.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(17, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-1517), writerBasedJsonGenerator0.getFeatureMask());
assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(1, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals((-1517), writerBasedJsonGenerator1.getFeatureMask());
assertEquals(17, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertNotSame(iOContext0, iOContext1);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertSame(writerBasedJsonGenerator0, writerBasedJsonGenerator2);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertSame(writerBasedJsonGenerator1, writerBasedJsonGenerator2);
assertFalse(iOContext0.equals((Object)iOContext1));
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);


[MASTER] 18:24:54.078 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-100/tests/20
* Done!

* Computation finished
