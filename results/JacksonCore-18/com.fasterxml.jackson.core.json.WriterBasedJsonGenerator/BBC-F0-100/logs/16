* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Starting Client-0
* Connecting to master process on port 4673
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2629
* Using seed 3530003279
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 589 / 2629
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 336: 77,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 335: 77,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 332: 77,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I61 Branch 145 IF_ICMPLE L1134 - false: 143,0,0| Number of FF evals: 911
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1421: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I172 Branch 212 IF_ICMPLE L1560 - false: 1908,1797,0| Number of FF evals: 3186
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1423: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: I8 Branch 62 IF_ICMPLT L603 - false: 701,85,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1424: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: I8 Branch 62 IF_ICMPLT L603 - true: 487,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I61 Branch 145 IF_ICMPLE L1134 - true: 892,314,9| Number of FF evals: 7095
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I60 Branch 130 IFLE L1031 - true: 110,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I11 Branch 37 IF_ICMPLT L342 - false: 1523,792,4| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I189 Branch 205 IF_ICMPLE L1500 - false: 682,548,2| Number of FF evals: 2557
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1445: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 330: 77,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1446: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I71 Branch 136 IFEQ L1070 - false: 268,0,0| Number of FF evals: 1300
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: I17 Branch 164 IF_ICMPGE L1263 - true: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 322: 399,0,0| Number of FF evals: 227
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I34 Branch 127 IF_ICMPGE L1018 - true: 156,26,11| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: Line 321: 399,0,0| Number of FF evals: 227
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 1456: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._releaseBuffers()V: I8 Branch 112 IFNULL L889 - true: 152,0,0| Number of FF evals: 758
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I34 Branch 207 IF_ICMPLE L1534 - false: 1630,0,0| Number of FF evals: 3360
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: I30 Branch 17 IF_ICMPLT L205 - false: 1011,515,0| Number of FF evals: 6612
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I3 Branch 26 IFEQ L267 - true: 1136,0,0| Number of FF evals: 760
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I34 Branch 207 IF_ICMPLE L1534 - true: 2130,500,4| Number of FF evals: 5024
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 633: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 632: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 631: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I182 Branch 247 IFNONNULL L1839 - false: 2230,1395,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: I17 Branch 164 IF_ICMPGE L1263 - false: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I3 Branch 26 IFEQ L267 - false: 1136,0,0| Number of FF evals: 777
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 95 TABLESWITCH L800 Case 0 - false: 307,0,0| Number of FF evals: 787
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I182 Branch 247 IFNONNULL L1839 - true: 2230,1395,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 630: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I64 Branch 109 IFNE L874 - false: 68,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: Line 627: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 95 TABLESWITCH L800 Case 0 - true: 133,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: I8 Branch 59 IF_ICMPLT L579 - false: 1200,340,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I14 Branch 71 IFEQ L654 - false: 20,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: I8 Branch 59 IF_ICMPLT L579 - true: 487,0,0| Number of FF evals: 478
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: I10 Branch 172 IF_ICMPGE L1306 - false: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I69 Branch 209 IF_ICMPLE L1542 - true: 496,135,0| Number of FF evals: 1829
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I43 Branch 156 IF_ICMPGE L1208 - false: 1264,0,0| Number of FF evals: 1472
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I12 Branch 45 IF_ICMPGE L428 - false: 156,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I69 Branch 209 IF_ICMPLE L1542 - false: 721,360,0| Number of FF evals: 2133
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 445: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 444: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: I10 Branch 172 IF_ICMPGE L1306 - true: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: I8 Branch 65 IF_ICMPLT L627 - false: 826,303,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I12 Branch 45 IF_ICMPGE L428 - true: 53,0,0| Number of FF evals: 946
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I228 Branch 226 IF_ICMPLE L1681 - false: 1307,564,0| Number of FF evals: 5684
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: Line 911: 61,31,0| Number of FF evals: 880
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: Line 908: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: Line 909: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I43 Branch 156 IF_ICMPGE L1208 - true: 2377,562,2| Number of FF evals: 5540
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I23 Branch 2 IF_ICMPNE L111 - false: 51,0,0| Number of FF evals: 1318
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(J)V: I8 Branch 65 IF_ICMPLT L627 - true: 133,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I23 Branch 2 IF_ICMPNE L111 - true: 12,0,0| Number of FF evals: 2266
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I11 Branch 51 IF_ICMPLT L511 - false: 744,520,1| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I45 Branch 52 IF_ICMPLT L517 - false: 953,751,0| Number of FF evals: 6839
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I22 Branch 117 IF_ICMPGE L938 - true: 69,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 91 TABLESWITCH L769 Default-Case - true: 16490,8882,5643| Number of FF evals: 7212
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I22 Branch 117 IF_ICMPGE L938 - false: 12,0,0| Number of FF evals: 2128
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I26 Branch 61 IF_ICMPLT L596 - false: 244,87,0| Number of FF evals: 5507
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I41 Branch 25 IF_ICMPLT L253 - false: 2980,1730,0| Number of FF evals: 5650
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I30 Branch 12 IFEQ L164 - false: 80,0,0| Number of FF evals: 889
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I45 Branch 52 IF_ICMPLT L517 - true: 12,0,0| Number of FF evals: 3197
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I11 Branch 51 IF_ICMPLT L511 - true: 12,0,0| Number of FF evals: 3208
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: Line 393: 225,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeNull()V: I8 Branch 218 IF_ICMPLT L1610 - false: 1129,502,0| Number of FF evals: 6664
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: Line 394: 8334,5379,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I24 Branch 192 IF_ICMPGT L1427 - false: 12,0,0| Number of FF evals: 2267
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I24 Branch 122 IF_ICMPLE L981 - true: 16495,7403,0| Number of FF evals: 6633
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I165 Branch 203 IFLE L1496 - true: 3267,258,19| Number of FF evals: 3832
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I39 Branch 119 IFEQ L943 - false: 193,0,0| Number of FF evals: 806
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I24 Branch 192 IF_ICMPGT L1427 - true: 12,0,0| Number of FF evals: 3201
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(Z)V: I31 Branch 84 IFEQ L729 - true: 7,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I11 Branch 231 IF_ICMPGE L1728 - false: 147,12,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I24 Branch 122 IF_ICMPLE L981 - false: 16495,7403,0| Number of FF evals: 6621
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: I6 Branch 49 IF_ICMPLT L468 - true: 12,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I53 Branch 13 IFEQ L169 - true: 80,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: I6 Branch 49 IF_ICMPLT L468 - false: 2553,630,0| Number of FF evals: 6665
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I51 Branch 36 IF_ICMPLT L332 - true: 77,0,0| Number of FF evals: 1290
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 934: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 933: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I165 Branch 203 IFLE L1496 - false: 3195,186,18| Number of FF evals: 3719
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 935: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: Line 387: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I51 Branch 36 IF_ICMPLT L332 - false: 661,366,0| Number of FF evals: 7059
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: Line 388: 10387,6027,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I16 Branch 21 IFNULL L234 - false: 1347,0,0| Number of FF evals: 2453
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I22 Branch 6 IF_ICMPLT L132 - false: 387,139,0| Number of FF evals: 6664
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I59 Branch 124 IFEQ L986 - false: 119,48,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I26 Branch 31 IFEQ L297 - true: 2552,0,0| Number of FF evals: 2570
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I68 Branch 233 IF_ICMPEQ L1742 - true: 147,12,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I16 Branch 21 IFNULL L234 - true: 53,0,0| Number of FF evals: 704
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I68 Branch 233 IF_ICMPEQ L1742 - false: 147,12,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I26 Branch 31 IFEQ L297 - false: 2177,0,0| Number of FF evals: 2273
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: I48 Branch 123 IFNULL L984 - false: 119,48,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I6 Branch 81 IF_ICMPLT L709 - false: 549,197,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I3 Branch 30 IFEQ L290 - true: 63,0,0| Number of FF evals: 350
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I23 Branch 86 IF_ICMPNE L766 - false: 39,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I6 Branch 81 IF_ICMPLT L709 - true: 12,0,0| Number of FF evals: 1280
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I74 Branch 217 IF_ICMPLT L1598 - false: 177,63,6| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I11 Branch 1 IF_ICMPNE L108 - false: 177,0,0| Number of FF evals: 688
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I94 Branch 147 IFLE L1143 - true: 492,0,0| Number of FF evals: 1792
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I80 Branch 93 IF_ICMPLT L785 - false: 841,324,89| Number of FF evals: 6615
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I12 Branch 243 IF_ICMPLE L1808 - false: 2230,1395,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 718: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 717: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I94 Branch 147 IFLE L1143 - false: 214,0,0| Number of FF evals: 1228
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I4 Branch 72 IFNE L668 - true: 501,0,0| Number of FF evals: 1034
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I4 Branch 72 IFNE L668 - false: 225,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I12 Branch 243 IF_ICMPLE L1808 - true: 2230,1395,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I11 Branch 53 IF_ICMPLT L530 - true: 399,0,0| Number of FF evals: 536
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: I11 Branch 1 IF_ICMPNE L108 - true: 12,0,0| Number of FF evals: 3521
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I3 Branch 30 IFEQ L290 - false: 12,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I11 Branch 53 IF_ICMPLT L530 - false: 3495,1105,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 242: 53,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 712: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I80 Branch 93 IF_ICMPLT L785 - true: 121,0,0| Number of FF evals: 837
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 714: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I97 Branch 138 IF_ICMPGE L1080 - true: 1455,807,0| Number of FF evals: 6977
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 713: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 233: 53,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 234: 53,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I105 Branch 162 IFLE L1229 - false: 87,0,0| Number of FF evals: 497
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: Line 232: 53,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: Line 709: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 528: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 250: 392,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 530: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I97 Branch 161 IF_ICMPLE L1226 - false: 854,589,0| Number of FF evals: 3744
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: Line 94: 12,0,0| Number of FF evals: 40
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: Line 95: 12,0,0| Number of FF evals: 40
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 247: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 609: 487,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I24 Branch 19 IFNULL L218 - true: 528,0,0| Number of FF evals: 1023
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 607: 487,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 541: 2202,109,0| Number of FF evals: 3392
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 608: 487,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1409: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()Ljava/lang/Object;: root-Branch: 53,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 606: 487,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(I)V: Line 603: 487,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 537: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I67 Branch 135 IF_ICMPGE L1070 - true: 1524,822,23| Number of FF evals: 6977
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 839: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 533: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 834: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: Line 833: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;)V: Line 411: 43,30,0| Number of FF evals: 975
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 534: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I83 Branch 222 IF_ICMPEQ L1654 - true: 2364,1225,126| Number of FF evals: 6893
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I4 Branch 5 IFNULL L127 - true: 12,0,0| Number of FF evals: 3864
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 553: 2908,230,0| Number of FF evals: 3772
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I11 Branch 70 IFNE L654 - true: 1672,1066,0| Number of FF evals: 7177
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 554: 2908,230,0| Number of FF evals: 3772
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I83 Branch 222 IF_ICMPEQ L1654 - false: 113,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 548: 2175,120,0| Number of FF evals: 3625
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: I4 Branch 47 IF_ICMPGE L451 - true: 72,0,0| Number of FF evals: 535
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I11 Branch 70 IFNE L654 - false: 98,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: Line 550: 2175,120,0| Number of FF evals: 3625
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 259: 392,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: Line 258: 392,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I8 Branch 66 IFNONNULL L641 - false: 12,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I329 Branch 227 IFNONNULL L1698 - false: 2251,1119,115| Number of FF evals: 6643
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String([BII)V: root-Branch: 12,0,0| Number of FF evals: 30
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I329 Branch 227 IFNONNULL L1698 - true: 2251,1119,114| Number of FF evals: 6643
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I8 Branch 34 IFNONNULL L322 - true: 399,0,0| Number of FF evals: 1424
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I61 Branch 158 IF_ICMPLE L1213 - true: 1430,752,1| Number of FF evals: 6033
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 476: 15810,6718,0| Number of FF evals: 5677
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I46 Branch 115 IFNULL L921 - false: 12882,7293,3455| Number of FF evals: 7257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 479: 16070,6978,0| Number of FF evals: 6243
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 478: 15810,6718,0| Number of FF evals: 5677
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 88 TABLESWITCH L769 Case 1 - true: 121,0,0| Number of FF evals: 755
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1586: 5473,0,0| Number of FF evals: 2076
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I135 Branch 196 IF_ICMPLE L1447 - false: 1017,749,0| Number of FF evals: 6889
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I8 Branch 34 IFNONNULL L322 - false: 554,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1585: 5473,0,0| Number of FF evals: 2076
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I61 Branch 158 IF_ICMPLE L1213 - false: 1113,435,1| Number of FF evals: 4346
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1584: 5473,0,0| Number of FF evals: 2076
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I8 Branch 66 IFNONNULL L641 - true: 57,0,0| Number of FF evals: 1004
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: I17 Branch 48 IF_ICMPLE L453 - false: 460,129,0| Number of FF evals: 6351
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1580: 5473,0,0| Number of FF evals: 2076
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Ljava/lang/String;)V: I22 Branch 35 IF_ICMPLT L326 - false: 650,360,0| Number of FF evals: 7059
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1594: 1134,0,0| Number of FF evals: 2176
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()V: I16 Branch 16 IFNULL L202 - false: 1746,0,0| Number of FF evals: 3367
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1530: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1529: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I9 Branch 220 IF_ICMPLT L1637 - true: 1028,123,0| Number of FF evals: 3990
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1526: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I24 Branch 19 IFNULL L218 - false: 1247,0,0| Number of FF evals: 3299
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1525: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1524: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1523: 399,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: Line 1599: 1329,161,0| Number of FF evals: 2785
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I22 Branch 11 IF_ICMPLT L161 - false: 489,170,8| Number of FF evals: 6627
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I183 Branch 204 IFLE L1499 - false: 479,88,0| Number of FF evals: 1220
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I43 Branch 143 IF_ICMPGE L1129 - true: 143,0,0| Number of FF evals: 911
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I194 Branch 213 IF_ICMPGE L1565 - true: 206,95,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1559: 1942,312,21| Number of FF evals: 4128
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;)V: I16 Branch 43 IFNE L409 - false: 233,55,0| Number of FF evals: 5637
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1556: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1551: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1550: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1549: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1548: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1547: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1546: 500,136,1| Number of FF evals: 1802
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1348: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1538: 1942,312,21| Number of FF evals: 4128
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 439: 53,0,0| Number of FF evals: 70
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I10 Branch 113 IF_ICMPLE L909 - false: 2197,1103,394| Number of FF evals: 5857
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I81 Branch 9 IF_ICMPLT L148 - true: 96,0,0| Number of FF evals: 1674
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1496: 3195,186,18| Number of FF evals: 3666
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I3 Branch 242 IFLT L1807 - false: 5709,1579,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I10 Branch 113 IF_ICMPLE L909 - true: 12,0,0| Number of FF evals: 4210
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 495: 16205,7113,1| Number of FF evals: 6658
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I41 Branch 89 TABLESWITCH L769 Case 2 - true: 819,0,0| Number of FF evals: 943
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1498: 479,88,0| Number of FF evals: 1184
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 494: 16205,7113,1| Number of FF evals: 6658
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String([BII)V: root-Branch: 225,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1499: 479,88,0| Number of FF evals: 1184
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 481: 16151,7059,1| Number of FF evals: 6485
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I5 Branch 23 IFNE L247 - false: 12,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 480: 16070,6978,0| Number of FF evals: 6243
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I59 Branch 216 IFGE L1594 - true: 1134,0,0| Number of FF evals: 2287
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 482: 16151,7059,1| Number of FF evals: 6485
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I81 Branch 9 IF_ICMPLT L148 - false: 647,224,3| Number of FF evals: 7257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I5 Branch 23 IFNE L247 - true: 392,0,0| Number of FF evals: 1007
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I8 Branch 102 IFNULL L834 - false: 71,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: I9 Branch 63 IFEQ L615 - false: 95,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I59 Branch 216 IFGE L1594 - false: 1134,0,0| Number of FF evals: 2257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 426: 53,0,0| Number of FF evals: 70
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1515: 3280,271,21| Number of FF evals: 3772
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 497: 16205,7113,1| Number of FF evals: 6658
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: Line 496: 16205,7113,1| Number of FF evals: 6658
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: Line 1572: 1942,312,21| Number of FF evals: 4128
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 428: 53,0,0| Number of FF evals: 70
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I22 Branch 126 IF_ICMPGE L1013 - false: 18811,9719,0| Number of FF evals: 6632
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I8 Branch 102 IFNULL L834 - true: 12,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: I9 Branch 63 IFEQ L615 - true: 53,0,0| Number of FF evals: 634
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: Line 433: 53,0,0| Number of FF evals: 70
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1359: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I22 Branch 126 IF_ICMPGE L1013 - true: 18905,9813,0| Number of FF evals: 6702
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw([CII)V: Line 463: 52,0,0| Number of FF evals: 706
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I60 Branch 245 IF_ICMPLT L1816 - false: 1258,616,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I4 Branch 85 IFNULL L759 - false: 2167,0,0| Number of FF evals: 1482
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I48 Branch 8 IFEQ L139 - true: 96,0,0| Number of FF evals: 1696
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I26 Branch 58 IF_ICMPLT L572 - false: 900,431,0| Number of FF evals: 6569
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: Line 615: 53,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: Line 614: 53,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1355: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1356: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1357: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I26 Branch 58 IF_ICMPLT L572 - true: 61,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I3 Branch 242 IFLT L1807 - true: 3480,0,0| Number of FF evals: 1653
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1353: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: Line 1354: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()V: I30 Branch 22 IF_ICMPLT L237 - false: 914,253,0| Number of FF evals: 4149
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I141 Branch 163 IF_ICMPLT L1238 - false: 305,40,0| Number of FF evals: 1203
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I93 Branch 246 IF_ICMPLE L1824 - false: 1782,947,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I18 Branch 67 IFEQ L643 - true: 88,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: I18 Branch 67 IFEQ L643 - false: 93,0,0| Number of FF evals: 795
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 119: 53,0,0| Number of FF evals: 74
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 118: 53,0,0| Number of FF evals: 74
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: Line 1727: 19049,9957,0| Number of FF evals: 6695
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 123: 53,0,0| Number of FF evals: 74
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 122: 53,0,0| Number of FF evals: 74
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1311: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1310: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I106 Branch 139 IF_ICMPLE L1082 - false: 1270,669,0| Number of FF evals: 6705
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1308: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1307: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1306: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1305: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I24 Branch 78 IFEQ L687 - true: 243,0,0| Number of FF evals: 929
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I125 Branch 210 IFGT L1551 - false: 1719,1379,0| Number of FF evals: 2319
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 591: 290,0,0| Number of FF evals: 208
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: Line 590: 225,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I57 Branch 116 IFEQ L923 - false: 96,0,0| Number of FF evals: 2165
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(I)V: Line 1312: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I52 Branch 134 IF_ICMPGE L1065 - false: 174,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(Ljava/lang/String;)V: I60 Branch 92 IFNULL L777 - true: 11307,6873,5331| Number of FF evals: 7212
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 809: 249,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 822: 133,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I58 Branch 108 IFNULL L873 - true: 14,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I69 Branch 201 IF_ICMPLE L1480 - true: 1474,242,0| Number of FF evals: 3018
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I69 Branch 201 IF_ICMPLE L1480 - false: 1671,439,0| Number of FF evals: 3647
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 795: 133,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 794: 133,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I34 Branch 28 IF_ICMPLT L276 - true: 215,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 803: 1335,0,0| Number of FF evals: 2331
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I39 Branch 232 IFNONNULL L1734 - true: 123,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I34 Branch 28 IF_ICMPLT L276 - false: 1273,607,0| Number of FF evals: 4845
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: Line 800: 133,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1190: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 98 TABLESWITCH L800 Case 3 - true: 307,0,0| Number of FF evals: 724
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I22 Branch 106 IFEQ L854 - false: 656,0,0| Number of FF evals: 1629
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I125 Branch 202 IFGT L1488 - false: 662,528,21| Number of FF evals: 2397
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1463: 944,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I30 Branch 142 IF_ICMPGE L1123 - true: 218,0,0| Number of FF evals: 599
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1464: 944,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1465: 944,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I30 Branch 142 IF_ICMPGE L1123 - false: 133,0,0| Number of FF evals: 2033
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I207 Branch 206 IF_ICMPGE L1505 - true: 271,132,15| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I100 Branch 42 IF_ICMPLT L378 - true: 225,0,0| Number of FF evals: 778
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I44 Branch 215 IFNE L1590 - false: 1175,99,0| Number of FF evals: 2809
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: I9 Branch 80 IFEQ L700 - false: 139,0,0| Number of FF evals: 294
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 98 TABLESWITCH L800 Case 3 - false: 133,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I14 Branch 75 IFEQ L668 - false: 1380,869,0| Number of FF evals: 6938
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I10 Branch 94 IF_ICMPNE L795 - false: 686,0,0| Number of FF evals: 1441
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1468: 944,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1469: 944,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I100 Branch 42 IF_ICMPLT L378 - false: 2176,861,0| Number of FF evals: 7081
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I10 Branch 94 IF_ICMPNE L795 - true: 133,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1474: 1441,209,0| Number of FF evals: 2829
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: I9 Branch 80 IFEQ L700 - true: 53,0,0| Number of FF evals: 263
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: Line 1475: 1441,209,0| Number of FF evals: 2829
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 582: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 583: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 584: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 974: 16305,7213,0| Number of FF evals: 5823
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 585: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I38 Branch 54 IFGE L537 - false: 399,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I45 Branch 79 IFEQ L689 - true: 92,0,0| Number of FF evals: 590
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I45 Branch 79 IFEQ L689 - false: 112,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(S)V: Line 579: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 977: 16495,7403,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 267: 1136,0,0| Number of FF evals: 550
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 978: 16495,7403,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I38 Branch 54 IFGE L537 - true: 545,0,0| Number of FF evals: 604
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I150 Branch 141 IF_ICMPLT L1094 - true: 246,0,0| Number of FF evals: 1300
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I88 Branch 160 IF_ICMPGE L1224 - true: 1651,797,12| Number of FF evals: 6033
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I107 Branch 15 IF_ICMPLT L180 - true: 542,206,0| Number of FF evals: 7218
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I88 Branch 160 IF_ICMPGE L1224 - false: 755,0,0| Number of FF evals: 2541
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 273: 2653,0,0| Number of FF evals: 2459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I114 Branch 140 IFLE L1085 - true: 246,0,0| Number of FF evals: 1298
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: Line 286: 2653,0,0| Number of FF evals: 2459
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I30 Branch 193 IF_ICMPLE L1428 - false: 247,4,0| Number of FF evals: 4762
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(Ljava/lang/String;)V: Line 993: 16495,7403,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I107 Branch 15 IF_ICMPLT L180 - false: 542,206,0| Number of FF evals: 7218
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1143: 214,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1238: 1975,50,0| Number of FF evals: 3587
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I183 Branch 204 IFLE L1499 - true: 920,529,30| Number of FF evals: 2649
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1142: 214,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I74 Branch 101 IFEQ L814 - false: 3453,1455,553| Number of FF evals: 7178
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I61 Branch 55 IFLE L541 - true: 2350,155,0| Number of FF evals: 3617
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1147: 214,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1148: 214,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1146: 214,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I129 Branch 195 IFLE L1446 - true: 82,0,0| Number of FF evals: 619
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I3 Branch 229 IFLT L1727 - true: 19195,10103,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1149: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I3 Branch 229 IFLT L1727 - false: 19049,9957,0| Number of FF evals: 6709
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(Z)V: I13 Branch 83 IF_ICMPLT L724 - false: 1192,353,0| Number of FF evals: 6611
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I129 Branch 195 IFLE L1446 - false: 12,0,0| Number of FF evals: 2799
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: Line 1807: 3480,0,0| Number of FF evals: 1378
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 99 TABLESWITCH L800 Default-Case - true: 4378,1988,747| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I11 Branch 74 IFNE L668 - true: 1554,888,0| Number of FF evals: 7139
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I43 Branch 40 IF_ICMPGE L366 - false: 225,0,0| Number of FF evals: 730
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1119: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1120: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1117: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: Line 1118: 133,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I11 Branch 74 IFNE L668 - false: 174,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I61 Branch 55 IFLE L541 - false: 2684,489,0| Number of FF evals: 4568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I74 Branch 159 IF_ICMPLT L1217 - false: 883,202,0| Number of FF evals: 3492
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I43 Branch 40 IF_ICMPGE L366 - true: 1401,0,0| Number of FF evals: 3077
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1159: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I61 Branch 100 IFEQ L812 - false: 2120,122,45| Number of FF evals: 3850
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1155: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1157: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1158: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I9 Branch 60 IFEQ L591 - false: 294,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I89 Branch 223 IF_ICMPLT L1655 - true: 290,0,0| Number of FF evals: 1255
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(I)V: I9 Branch 60 IFEQ L591 - true: 290,0,0| Number of FF evals: 656
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I24 Branch 24 IFNULL L250 - true: 392,0,0| Number of FF evals: 1006
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I166 Branch 211 IF_ICMPGE L1559 - true: 2020,390,22| Number of FF evals: 4481
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I166 Branch 211 IF_ICMPGE L1559 - false: 1942,312,21| Number of FF evals: 4184
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I30 Branch 198 IF_ICMPLE L1471 - false: 5473,0,0| Number of FF evals: 2176
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I30 Branch 198 IF_ICMPLE L1471 - true: 6376,159,0| Number of FF evals: 3784
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I30 Branch 148 IF_ICMPGE L1162 - false: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(II)V: I53 Branch 144 IFEQ L1131 - false: 214,0,0| Number of FF evals: 943
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: I30 Branch 148 IF_ICMPGE L1162 - true: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I4 Branch 5 IFNULL L127 - false: 3352,0,0| Number of FF evals: 2711
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 468: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: Line 668: 225,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I49 Branch 221 IFNONNULL L1646 - false: 1028,123,0| Number of FF evals: 3990
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: Line 861: 656,0,0| Number of FF evals: 1613
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 471: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 99 TABLESWITCH L800 Default-Case - false: 133,0,0| Number of FF evals: 730
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I21 Branch 27 IFEQ L273 - false: 2653,0,0| Number of FF evals: 2564
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(C)V: Line 472: 12,0,0| Number of FF evals: 34
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1208: 1220,0,0| Number of FF evals: 1295
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I49 Branch 221 IFNONNULL L1646 - true: 1535,630,92| Number of FF evals: 6893
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I8 Branch 76 IFNONNULL L684 - true: 12,0,0| Number of FF evals: 1384
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I21 Branch 27 IFEQ L273 - true: 2868,0,0| Number of FF evals: 2799
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1223: 1975,50,0| Number of FF evals: 3587
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I8 Branch 69 IFEQ L654 - false: 98,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Lcom/fasterxml/jackson/core/SerializableString;)V: root-Branch: 12,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I8 Branch 76 IFNONNULL L684 - false: 82,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()V: I24 Branch 24 IFNULL L250 - false: 1915,400,0| Number of FF evals: 4389
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: Line 1224: 1975,50,0| Number of FF evals: 3587
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(II)V: Line 1154: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I4 Branch 132 IFNULL L1049 - false: 4294,2650,167| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I12 Branch 105 IFEQ L850 - true: 23,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I32 Branch 107 IFEQ L856 - false: 718,0,0| Number of FF evals: 1689
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString([CII)V: I42 Branch 38 IF_ICMPLT L348 - false: 1553,836,0| Number of FF evals: 6936
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I4 Branch 10 IFNULL L156 - false: 741,0,0| Number of FF evals: 2427
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I8 Branch 214 IF_ICMPGE L1581 - false: 6814,582,69| Number of FF evals: 4837
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I83 Branch 194 IFGT L1436 - false: 3623,1085,45| Number of FF evals: 7257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(CI)V: I51 Branch 244 IF_ICMPEQ L1815 - true: 2230,1395,0| Number of FF evals: 5925
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I54 Branch 200 IF_ICMPGE L1475 - true: 1474,242,0| Number of FF evals: 3018
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I11 Branch 39 IF_ICMPLT L358 - false: 2173,869,0| Number of FF evals: 7080
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: Line 705: 53,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 112: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 111: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I54 Branch 200 IF_ICMPGE L1475 - false: 1441,209,0| Number of FF evals: 2842
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I38 Branch 128 IFEQ L1018 - false: 94,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: Line 700: 53,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 108: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I41 Branch 20 IF_ICMPLT L221 - false: 2483,1825,0| Number of FF evals: 6237
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/lang/String;)V: Line 699: 53,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Ljava/lang/String;)V: Line 107: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I53 Branch 157 IFEQ L1210 - false: 641,0,0| Number of FF evals: 2508
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I9 Branch 57 IFEQ L567 - true: 548,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1264: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1265: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1262: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1263: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1261: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1007: 18811,9719,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1006: 18811,9719,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: I9 Branch 57 IFEQ L567 - false: 487,0,0| Number of FF evals: 478
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1010: 18811,9719,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1009: 18811,9719,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: I18 Branch 77 IFEQ L686 - true: 92,0,0| Number of FF evals: 795
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1266: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I11 Branch 39 IF_ICMPLT L358 - true: 225,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1869: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: I153 Branch 197 IF_ICMPNE L1451 - false: 96,0,0| Number of FF evals: 2468
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1868: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1866: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: I16 Branch 181 IF_ICMPGE L1355 - true: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom([CII)V: I16 Branch 181 IF_ICMPGE L1355 - false: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: root-Branch: 4177,0,0| Number of FF evals: 1896
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1871: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I29 Branch 46 IF_ICMPLT L433 - true: 156,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1870: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 227: 528,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1861: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 226: 528,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I3 Branch 219 IFLT L1636 - true: 873,0,0| Number of FF evals: 940
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1859: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: Line 567: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(S)V: Line 566: 487,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1865: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;II)V: I29 Branch 46 IF_ICMPLT L433 - false: 53,0,0| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1864: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 641: 12,0,0| Number of FF evals: 20
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()[C: Line 1863: 4177,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 640: 12,0,0| Number of FF evals: 20
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I3 Branch 219 IFLT L1636 - false: 760,0,0| Number of FF evals: 1024
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 364: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 363: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 366: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 684: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 962: 193,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I124 Branch 224 IF_ICMPLE L1662 - false: 1417,586,0| Number of FF evals: 6643
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigInteger;)V: Line 648: 57,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 683: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(Ljava/math/BigDecimal;)V: Line 694: 12,0,0| Number of FF evals: 32
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 964: 193,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 963: 193,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: I74 Branch 131 IF_ICMPLT L1033 - true: 94,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 361: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: Line 965: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(I)V: Line 1041: 18811,9719,0| Number of FF evals: 6600
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 358: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII([CIII)V: I28 Branch 155 IF_ICMPGE L1202 - false: 8,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 357: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 382: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I42 Branch 32 IF_ICMPLT L300 - false: 1865,915,0| Number of FF evals: 5175
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 381: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I42 Branch 32 IF_ICMPLT L300 - true: 375,0,0| Number of FF evals: 536
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: Line 378: 225,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(Ljava/io/InputStream;[BIII)I: I8 Branch 214 IF_ICMPGE L1581 - true: 5473,0,0| Number of FF evals: 2302
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 218: 528,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: Line 654: 133,0,0| Number of FF evals: 91
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I35 Branch 82 IF_ICMPLT L714 - true: 12,0,0| Number of FF evals: 1278
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(Ljava/lang/String;)V: I35 Branch 82 IF_ICMPLT L714 - false: 505,200,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[BI)I: I35 Branch 199 IF_ICMPLE L1472 - true: 1602,370,19| Number of FF evals: 3268
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: Line 215: 133,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I80 Branch 111 IFEQ L876 - false: 642,0,0| Number of FF evals: 1454
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()I: root-Branch: 12,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I54 Branch 208 IF_ICMPGE L1537 - true: 518,135,0| Number of FF evals: 1711
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;[B)I: I54 Branch 208 IF_ICMPGE L1537 - false: 312,0,0| Number of FF evals: 989
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()Ljava/lang/Object;: Line 88: 53,0,0| Number of FF evals: 69
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I5 Branch 18 IFNE L215 - false: 133,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 310: 2177,0,0| Number of FF evals: 2156
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I68 Branch 110 IFEQ L874 - false: 91,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Lcom/fasterxml/jackson/core/SerializableString;)V: I56 Branch 41 IF_ICMPLE L368 - false: 1859,745,0| Number of FF evals: 6718
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: Line 1636: 760,0,0| Number of FF evals: 367
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I68 Branch 110 IFEQ L874 - true: 68,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(Ljava/lang/String;)V: I27 Branch 114 IF_ICMPLE L916 - false: 375,147,0| Number of FF evals: 6534
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: I30 Branch 7 IFEQ L135 - false: 89,0,0| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 296: 2177,0,0| Number of FF evals: 2156
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 297: 2177,0,0| Number of FF evals: 2156
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 97 TABLESWITCH L800 Case 2 - true: 2109,0,0| Number of FF evals: 3059
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._flushBuffer()V: I11 Branch 250 IFLE L1877 - false: 15,0,0| Number of FF evals: 1773
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I93 Branch 14 IF_ICMPLT L177 - true: 80,0,0| Number of FF evals: 750
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I35 Branch 118 IF_ICMPGE L943 - true: 1780,911,132| Number of FF evals: 7257
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I93 Branch 14 IF_ICMPLT L177 - false: 622,206,0| Number of FF evals: 7235
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: Line 290: 12,0,0| Number of FF evals: 40
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 97 TABLESWITCH L800 Case 2 - false: 133,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Ljava/lang/String;Z)V: I63 Branch 29 IF_ICMPLT L281 - false: 1029,567,0| Number of FF evals: 4680
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()V: I5 Branch 18 IFNE L215 - true: 528,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(Ljava/lang/String;Z)V: Line 127: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()V: I8 Branch 104 IFNULL L850 - true: 738,0,0| Number of FF evals: 1507
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 96 TABLESWITCH L800 Case 1 - true: 870,0,0| Number of FF evals: 1618
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyPrettyValueWrite(Ljava/lang/String;)V: I28 Branch 96 TABLESWITCH L800 Case 1 - false: 133,0,0| Number of FF evals: 694
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 520: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape([CIICI)I: I8 Branch 230 IF_ICMPLE L1728 - true: 123,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 521: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I24 Branch 4 IF_ICMPNE L122 - true: 53,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 517: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 514: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 515: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I24 Branch 4 IF_ICMPNE L122 - false: 140,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I109 Branch 56 IF_ICMPLT L550 - false: 3092,1037,0| Number of FF evals: 7059
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I14 Branch 103 IFEQ L835 - false: 208,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I: I109 Branch 56 IF_ICMPLT L550 - true: 2175,120,0| Number of FF evals: 3765
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(J)V: I26 Branch 64 IF_ICMPLT L619 - false: 885,364,0| Number of FF evals: 7215
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: I46 Branch 50 IF_ICMPLE L484 - false: 16151,7059,1| Number of FF evals: 6492
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(Ljava/lang/String;)V: I46 Branch 50 IF_ICMPLE L484 - true: 16200,7108,1| Number of FF evals: 6679
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(Ljava/lang/String;)V: I33 Branch 44 IF_ICMPLT L414 - true: 211,53,0| Number of FF evals: 5730
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I19 Branch 133 IFEQ L1053 - true: 174,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I71 Branch 121 IFLE L956 - true: 911,172,0| Number of FF evals: 4354
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(I)V: Line 1300: 20627,11535,0| Number of FF evals: 7207
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(I)V: I71 Branch 121 IFLE L956 - false: 193,0,0| Number of FF evals: 787
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I4 Branch 68 IFNE L654 - false: 133,0,0| Number of FF evals: 847
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(Lcom/fasterxml/jackson/core/SerializableString;Z)V: I74 Branch 33 IF_ICMPLT L305 - false: 1465,907,0| Number of FF evals: 4888
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I212 Branch 225 IFNONNULL L1677 - false: 290,0,0| Number of FF evals: 1255
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(CI)V: I212 Branch 225 IFNONNULL L1677 - true: 290,0,0| Number of FF evals: 1252
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(D)V: I4 Branch 68 IFNE L654 - true: 297,0,0| Number of FF evals: 1342
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 511: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V: Line 509: 12,0,0| Number of FF evals: 41
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()V: I14 Branch 103 IFEQ L835 - true: 107,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(F)V: I8 Branch 73 IFEQ L668 - false: 174,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I12 Branch 3 IF_ICMPNE L119 - false: 185,0,0| Number of FF evals: 496
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V: I12 Branch 3 IF_ICMPNE L119 - true: 53,0,0| Number of FF evals: 764
Number of times BBC is called, activated, and useful for com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString([CII)V: I52 Branch 134 IF_ICMPGE L1065 - true: 215,0,0| Number of FF evals: 524
* Search finished after 602s and 176 generations, 176931 statements, best individual has fitness: 882.0
* Minimizing test suite
[MASTER] 18:19:11.274 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 73%
* Total number of goals: 967
* Number of covered goals: 707
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 70%
* Total number of goals: 508
* Number of covered goals: 354
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 67
* Number of covered goals: 67
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 544
* Number of covered goals: 308
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 14
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 44
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 508
* Number of covered goals: 350
* Generated 208 tests with total length 4173
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:19:55.654 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6763666666666667% of time used, but only 59/208 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 18:20:25.386 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:25.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:25.966 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:26.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:26.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:26.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:27.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:27.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:28.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:29.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:29.342 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:29.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:29.815 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:29.995 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:30.277 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:30.568 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:30.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:31.128 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:31.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:31.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:31.916 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:32.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:32.213 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:32.415 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:32.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:32.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:33.171 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:33.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:33.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:33.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:33.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:34.174 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:34.390 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:34.697 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:34.907 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:35.130 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:35.290 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:35.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:35.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.460 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.629 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:36.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:37.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:37.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:37.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:37.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:37.957 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:39.146 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:39.474 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:39.620 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:39.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:39.990 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:40.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:40.378 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:40.671 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:40.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:41.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:41.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:41.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:41.830 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:42.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:42.266 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:42.499 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:42.708 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:42.949 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:43.185 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:43.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:43.675 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:43.918 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:44.183 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:44.420 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:44.610 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:44.798 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:45.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:45.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:45.560 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:45.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:46.043 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:46.263 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:46.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:46.811 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:46.993 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:47.224 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:47.527 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:47.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...73" "0"  "\u002D\u00[7 \u0073\u002"]> but was:<...73" "0"  "\u002D\u00[37\u0034\u002E]>
[MASTER] 18:20:47.538 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

boolean boolean0 = true;
IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

StringWriter stringWriter0 = new StringWriter(2);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1763, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

BigDecimal bigDecimal0 = new BigDecimal((long) (-273));
assertEquals((short) (-273), bigDecimal0.shortValue());
assertEquals((byte) (-17), bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)4;
int int0 = bigDecimal0.precision();
assertEquals(3, int0);
assertEquals((short) (-273), bigDecimal0.shortValue());
assertEquals((byte) (-17), bigDecimal0.byteValue());

byteArray0[1] = (byte) (-74);
byteArray0[2] = (byte) (-57);
byteArray0[3] = (byte)4;
byteArray0[4] = (byte) (-96);
byteArray0[5] = (byte)41;
byteArray0[6] = (byte) (-74);
byteArray0[7] = (byte) (-97);
writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals((short) (-273), bigDecimal0.shortValue());
assertEquals((byte) (-17), bigDecimal0.byteValue());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.getValue());
assertEquals(" ", serializedString0.toString());
assertNotNull(serializedString0);

BigDecimal bigDecimal1 = BigDecimal.ZERO;
assertEquals((byte)0, bigDecimal1.byteValue());
assertEquals((short)0, bigDecimal1.shortValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));
assertNotSame(bigDecimal1, bigDecimal0);

writerBasedJsonGenerator0._maximumNonEscapedChar = (int) (byte) (-57);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());

writerBasedJsonGenerator0.writeNumber(bigDecimal1);
assertEquals((byte)0, bigDecimal1.byteValue());
assertEquals((short)0, bigDecimal1.shortValue());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(10, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(bigDecimal1.equals((Object)bigDecimal0));
assertNotSame(bigDecimal1, bigDecimal0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString1.getValue());
assertEquals(1, serializedString1.charLength());
assertEquals(" ", serializedString1.toString());
assertNotNull(serializedString1);
assertSame(serializedString1, serializedString0);

writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.getValue());
assertEquals(" ", serializedString0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertSame(serializedString0, serializedString1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeNumber((double) (byte) (-74));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"-273\" \"0\"  \"\\u002D\\u007 \\u0073\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeNumber((float) 0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"-273\" \"0\"  \"\\u002D\\u007 \\u0073\\u002\"\\u007K\" \"\\u007K\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeNumber((-1480.0F));
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"-273\" \"0\"  \"\\u002D\\u007 \\u0073\\u002\"\\u007K\" \"\\u007K\\u002\"\\u007K\" \"\\u002D\\u007,\\u0073\\u007\"\\u007K\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeStartArray();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"-273\" \"0\"  \"\\u002D\\u007 \\u0073\\u002\"\\u007K\" \"\\u007K\\u002\"\\u007K\" \"\\u002D\\u007,\\u0073\\u007\"\\u007K\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeStartArray();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\"-273\" \"0\"  \"\\u002D\\u007 \\u0073\\u002\"\\u007K\" \"\\u007K\\u002\"\\u007K\" \"\\u002D\\u007,\\u0073\\u007\"\\u007K\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(10, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

String string0 = "' (for ";
Base64Variant base64Variant0 = new Base64Variant("' (for ", "", true, ';', (byte) (-97));

[MASTER] 18:20:47.749 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:47.941 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:48.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:48.478 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:48.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:49.077 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:49.304 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:49.510 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:49.779 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:49.994 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:50.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:50.449 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:50.642 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:50.832 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:51.195 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:51.448 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:51.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:51.766 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"1" "1" "\u00[7K\u002"]> but was:<"1" "1" "\u00[30\u002E]>
[MASTER] 18:20:51.771 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

StringWriter stringWriter0 = new StringWriter(2);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1763, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

BigDecimal bigDecimal0 = BigDecimal.ONE;
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals((byte)1, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[8];
int int0 = bigDecimal0.precision();
assertEquals(1, int0);
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals((byte)1, bigDecimal0.byteValue());

char[] charArray0 = iOContext0.allocTokenBuffer(3);
assertEquals(4000, charArray0.length);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertNotNull(charArray0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

byteArray0[1] = (byte) (-74);
byteArray0[2] = (byte) (-57);
byteArray0[4] = (byte) (-96);
byteArray0[5] = (byte)41;
byteArray0[6] = (byte) (-74);
byteArray0[7] = (byte) (-97);
writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

byte[] byteArray1 = iOContext0.allocReadIOBuffer();
assertEquals(8000, byteArray1.length);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._maximumNonEscapedChar = (int) (byte) (-57);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString1.getValue());
assertEquals(1, serializedString1.charLength());
assertEquals(" ", serializedString1.toString());
assertNotNull(serializedString1);
assertSame(serializedString1, serializedString0);

writerBasedJsonGenerator0.writeNumber((float) 0);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

boolean boolean0 = true;
writerBasedJsonGenerator0.writeBoolean(true);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"", stringWriter0.toString());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

String string0 = "#!7h;j`d-(ME";
writerBasedJsonGenerator0._writeFieldName("#!7h;j`d-(ME", false);
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"\\u007K\" true\\u0027\\u002,\\u007 \\u00 \"\\u007\"\\u00 0\\u00 F\\u00 K\\u00 3\\u002D\\u002\"\\u003D", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"\\u007K\" true\\u0027\\u002,\\u007 \\u00 \"\\u007\"\\u00 0\\u00 F\\u00 K\\u00 3\\u002D\\u002\"\\u003D", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

char char0 = 'h';
writerBasedJsonGenerator0.writeBoolean(false);

[MASTER] 18:20:52.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:52.263 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:52.457 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:52.458 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<"1" "1" "\u00[7K\u002"]> but was:<"1" "1" "\u00[30\u002E]>
[MASTER] 18:20:52.461 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

ObjectCodec objectCodec0 = null;
StringWriter stringWriter0 = new StringWriter(2);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1763, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

BigDecimal bigDecimal0 = BigDecimal.ONE;
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals((short)1, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[8];
byteArray0[1] = (byte) (-74);
byteArray0[2] = (byte) (-57);
byteArray0[4] = (byte) (-96);
byteArray0[5] = (byte)41;
byteArray0[6] = (byte) (-74);
byteArray0[7] = (byte) (-97);
writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString0.getValue());
assertEquals(" ", serializedString0.toString());
assertEquals(1, serializedString0.charLength());
assertNotNull(serializedString0);

writerBasedJsonGenerator0._maximumNonEscapedChar = (int) (byte) (-57);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());

writerBasedJsonGenerator0.writeNumber(bigDecimal0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((byte)1, bigDecimal0.byteValue());
assertEquals((short)1, bigDecimal0.shortValue());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber((float) 0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(7, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeBoolean(true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._writeFieldName("#!7h;j`d-(ME", false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"\\u007K\" true\\u0027\\u002,\\u007 \\u00 \"\\u007\"\\u00 0\\u00 F\\u00 K\\u00 3\\u002D\\u002\"\\u003D", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\"1\" \"1\" \"\\u007K\\u002\"\\u007K\" true\\u0027\\u002,\\u007 \\u00 \"\\u007\"\\u00 0\\u00 F\\u00 K\\u00 3\\u002D\\u002\"\\u003D", stringWriter0.toString());
assertEquals(1763, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-57), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber((long) 2);

[MASTER] 18:20:52.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:52.882 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:53.124 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:53.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:53.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:53.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:54.002 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:54.002 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:54.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

BigDecimal bigDecimal1 = new BigDecimal((-389));
assertEquals((short) (-389), bigDecimal1.shortValue());
assertEquals((byte)123, bigDecimal1.byteValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));

writerBasedJsonGenerator0.writeBoolean(false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0.writeStartObject();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertNotNull(writerBasedJsonGenerator1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(iOContext1, iOContext0);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.base.GeneratorBase", false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

writerBasedJsonGenerator1._flushBuffer();
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertNotSame(iOContext1, iOContext0);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);


[MASTER] 18:20:54.325 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:54.326 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:54.335 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

BigDecimal bigDecimal1 = new BigDecimal((-389));
assertEquals((short) (-389), bigDecimal1.shortValue());
assertEquals((byte)123, bigDecimal1.byteValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));

writerBasedJsonGenerator0.writeBoolean(false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeStartObject();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(writerBasedJsonGenerator1);
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertFalse(iOContext1.equals((Object)iOContext0));
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(iOContext1, iOContext0);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.base.GeneratorBase", false);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator1._flushBuffer();
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext1.equals((Object)iOContext0));
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext1, iOContext0);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

writerBasedJsonGenerator0.close();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7\\u00 \"}", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator1.writeRaw("", 55296, (-491));

[MASTER] 18:20:54.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:54.684 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:54.688 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);

String string0 = "z*5:XWR";
IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);

ObjectCodec objectCodec0 = null;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((byte)10, bigDecimal0.byteValue());
assertEquals((short)10, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);

BigDecimal bigDecimal1 = new BigDecimal((-389));
assertEquals((byte)123, bigDecimal1.byteValue());
assertEquals((short) (-389), bigDecimal1.shortValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));

writerBasedJsonGenerator0.writeBoolean(false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeNumber(bigDecimal1);

[MASTER] 18:20:55.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:55.104 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:55.110 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((byte)10, bigDecimal0.byteValue());
assertEquals((short)10, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

BigInteger bigInteger0 = BigInteger.ZERO;
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);

BigDecimal bigDecimal1 = new BigDecimal(56320);
assertEquals((short) (-9216), bigDecimal1.shortValue());
assertEquals((byte)0, bigDecimal1.byteValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));

writerBasedJsonGenerator0.writeNumber(bigDecimal1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals((short) (-9216), bigDecimal1.shortValue());
assertEquals((byte)0, bigDecimal1.byteValue());
assertFalse(bigDecimal1.equals((Object)bigDecimal0));
assertNotSame(bigDecimal1, bigDecimal0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
assertEquals(" ", serializedString0.toString());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(19, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(" ", serializedString0.toString());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.getValue());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber(3319.59358907735);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(36, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber((float) 2);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(40, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber(1.0F);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(44, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.writeNumber((long) 1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(46, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0._verifyPrettyValueWrite("]Ivs~p+tf&+[-xW");

[MASTER] 18:20:55.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:55.638 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:56.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:56.891 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:56.892 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:56.904 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

BigDecimal bigDecimal1 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal1.shortValue());
assertEquals((byte)10, bigDecimal1.byteValue());
assertNotNull(bigDecimal1);
assertSame(bigDecimal1, bigDecimal0);

writerBasedJsonGenerator0.writeBoolean(false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(writerBasedJsonGenerator1);
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals(1, serializedString0.charLength());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertFalse(iOContext1.equals((Object)iOContext0));
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertNotSame(iOContext1, iOContext0);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.base.GeneratorBase", false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator1._flushBuffer();
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext1.equals((Object)iOContext0));
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext1, iOContext0);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

writerBasedJsonGenerator0.close();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7\\u00 \"}", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertTrue(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator1.writeNumber((BigInteger) null);
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(4, writerBasedJsonGenerator1.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7\\u00 \"}", stringWriter0.toString());
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext1.equals((Object)iOContext0));
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext1, iOContext0);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);

writerBasedJsonGenerator0.writeNumber((-328L));

[MASTER] 18:20:57.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:57.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:57.668 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:57.883 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:58.157 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:58.158 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:20:58.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

String string0 = "Unexpected problem: chain of filtered context broken";
byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

BigDecimal bigDecimal1 = BigDecimal.TEN;
assertEquals((byte)10, bigDecimal1.byteValue());
assertEquals((short)10, bigDecimal1.shortValue());
assertNotNull(bigDecimal1);
assertSame(bigDecimal1, bigDecimal0);

writerBasedJsonGenerator0.writeBoolean(false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);

WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertNotNull(writerBasedJsonGenerator1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.toString());
assertEquals(" ", serializedString0.getValue());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext1, iOContext0);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.base.GeneratorBase", false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator1._flushBuffer();
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7", stringWriter0.toString());
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertNotSame(iOContext1, iOContext0);
assertNotSame(writerBasedJsonGenerator1, writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);

writerBasedJsonGenerator0.close();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" \\u00\"2 { \\u00 7\\u00 F\\u00 D\\u002\"\\u00  \\u00 ,\\u00 7\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 D\\u00 C\\u002\"\\u00 0\\u00 ,\\u00 7\\u00 \"\\u00 7\\u00 F\\u00 \"\\u002\"\\u00 7\\u00 F\\u00 2\\u00 \"\\u002\"\\u00 2\\u00 ,\\u00 7\\u00 \"\\u002\"\\u003 \\u00 \"\\u00 \"\\u00 \"\\u00 2\\u00 ,\\u00 3\\u00 F\\u00 2\\u0032\\u00 ,\\u00 7\\u00 \"}", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertTrue(writerBasedJsonGenerator0.isClosed());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(iOContext0.equals((Object)iOContext1));
assertFalse(writerBasedJsonGenerator0.equals((Object)writerBasedJsonGenerator1));
assertNotSame(iOContext0, iOContext1);
assertNotSame(writerBasedJsonGenerator0, writerBasedJsonGenerator1);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);

writerBasedJsonGenerator0.writeStartObject();

[MASTER] 18:20:58.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:58.810 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:59.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:59.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:59.447 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:59.685 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:20:59.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:00.150 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:00.482 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:00.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:21:00.485 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal0.shortValue());
assertEquals((byte)10, bigDecimal0.byteValue());
assertNotNull(bigDecimal0);

byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("", stringWriter0.toString());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);

BigDecimal bigDecimal1 = BigDecimal.TEN;
assertEquals((short)10, bigDecimal1.shortValue());
assertEquals((byte)10, bigDecimal1.byteValue());
assertNotNull(bigDecimal1);
assertSame(bigDecimal1, bigDecimal0);

char[] charArray0 = new char[4];
charArray0[0] = 'F';
charArray0[1] = ';';
charArray0[2] = ':';
charArray0[3] = 'F';
writerBasedJsonGenerator0.writeString(charArray0, (int) (byte)108, 16);

[MASTER] 18:21:00.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:00.924 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:00.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<\u00[""\u00 "\u00 "\u00 "\u00 K\u00 "\u00 7\u00 3\u00 "\u00 3\u002K\u00 K\u00 2\u00 F\u00 2\u00 C\u00 "\u00 D\u0070\u002K\u00 7\u00 "\u00 ,\u00 1\u00 "\u002K\u00 F\u00  \u002K\u00  \u00 1\u00 C\u00 3\u00 "\u00 2\u00 "\u00 3\u002K\u00 7\u00 F\u00 "\u00 3\u00 "\u00 "\u00 3\u002K\u00 2\u00 2\u00 F\u00 "\u00 "]> but was:<\u00[55\u006E\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0072\u006F\u0062\u006C\u0065\u006D\u003A\u0020\u0063\u0068\u0061\u0069\u006E\u0020\u006F\u0066\u0020\u0066\u0069\u006C\u0074\u0065\u0072\u0065\u0064\u0020\u0063\u006F\u006E\u0074\u0065\u0078\u0074\u0020\u0062\u0072\u006F\u006B\u0065]>
[MASTER] 18:21:00.929 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

IOContext iOContext0 = new IOContext(bufferRecycler0, "z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(iOContext0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertNotNull(writerBasedJsonGenerator0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

BigDecimal bigDecimal0 = BigDecimal.TEN;
assertEquals((byte)10, bigDecimal0.byteValue());
assertEquals((short)10, bigDecimal0.shortValue());
assertNotNull(bigDecimal0);

String string0 = "Unexpected problem: chain of filtered context broken";
byte[] byteArray0 = new byte[1];
writerBasedJsonGenerator0._maximumNonEscapedChar = (-3202);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());

byteArray0[0] = (byte)108;
writerBasedJsonGenerator0.writeBinaryField("Unexpected problem: chain of filtered context broken", byteArray0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108}, byteArray0);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(12, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(56320);
assertEquals(56320, byteArray1.length);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

BigDecimal bigDecimal1 = BigDecimal.ONE;
assertEquals((byte)1, bigDecimal1.byteValue());
assertEquals((short)1, bigDecimal1.shortValue());
assertNotNull(bigDecimal1);
assertFalse(bigDecimal1.equals((Object)bigDecimal0));
assertNotSame(bigDecimal1, bigDecimal0);

writerBasedJsonGenerator0.writeBoolean(false);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertEquals(18, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0._writeFieldName("z*5:XWR", true);
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertEquals(6, writerBasedJsonGenerator0.getOutputBuffered());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

writerBasedJsonGenerator0.writeStartObject();
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(55296, GeneratorBase.SURR1_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(56319, GeneratorBase.SURR1_LAST);

IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertNotNull(iOContext1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);

char[] charArray0 = new char[5];
charArray0[0] = '2';
charArray0[1] = 'r';
charArray0[2] = 'D';
charArray0[3] = 'O';
charArray0[4] = '/';
writerBasedJsonGenerator0._outputBuffer = charArray0;
assertNull(iOContext0.getEncoding());
assertTrue(iOContext0.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(8, writerBasedJsonGenerator0.getOutputBuffered());
assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
assertTrue(writerBasedJsonGenerator0.canOmitFields());
assertEquals((-3202), writerBasedJsonGenerator0.getHighestEscapedChar());
assertFalse(writerBasedJsonGenerator0.isClosed());

WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
assertNull(iOContext1.getEncoding());
assertFalse(iOContext1.isResourceManaged());
assertEquals("\\u00\"\"\\u00 \"\\u00 \"\\u00 \"\\u00 K\\u00 \"\\u00 7\\u00 3\\u00 \"\\u00 3\\u002K\\u00 K\\u00 2\\u00 F\\u00 2\\u00 C\\u00 \"\\u00 D\\u0070\\u002K\\u00 7\\u00 \"\\u00 ,\\u00 1\\u00 \"\\u002K\\u00 F\\u00  \\u002K\\u00  \\u00 1\\u00 C\\u00 3\\u00 \"\\u00 2\\u00 \"\\u00 3\\u002K\\u00 7\\u00 F\\u00 \"\\u00 3\\u00 \"\\u00 \"\\u00 3\\u002K\\u00 2\\u00 2\\u00 F\\u00 \"\\u00 \"\\u00 \"\"bA==\" false,\\u00 0\\u0020\\u007\"\\u0070\\u00\"\"\\u00\" ", stringWriter0.toString());
assertEquals(0, writerBasedJsonGenerator1.getFormatFeatures());
assertFalse(writerBasedJsonGenerator1.canWriteBinaryNatively());
assertEquals(0, writerBasedJsonGenerator1.getOutputBuffered());
assertFalse(writerBasedJsonGenerator1.canWriteObjectId());
assertEquals(3, writerBasedJsonGenerator1.getFeatureMask());
assertEquals(0, writerBasedJsonGenerator1.getHighestEscapedChar());
assertTrue(writerBasedJsonGenerator1.canOmitFields());
assertFalse(writerBasedJsonGenerator1.isClosed());
assertFalse(writerBasedJsonGenerator1.canWriteTypeId());
assertFalse(writerBasedJsonGenerator1.canWriteFormattedNumbers());
assertNotNull(writerBasedJsonGenerator1);
assertFalse(iOContext1.equals((Object)iOContext0));
assertFalse(writerBasedJsonGenerator1.equals((Object)writerBasedJsonGenerator0));
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
assertEquals(" ", serializedString0.toString());
assertEquals(1, serializedString0.charLength());
assertEquals(" ", serializedString0.getValue());
assertNotNull(serializedString0);

writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);

[MASTER] 18:21:01.099 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:01.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:01.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:01.934 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:02.149 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:21:02.335 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'WriterBasedJsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.WriterBasedJsonGenerator/BBC-F0-100/tests/16
* Done!

* Computation finished
