/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 12:19:55 GMT 2020
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.isClosed();
      writerBasedJsonGenerator0.writeArrayFieldStart("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("UTF-8");
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw("start an object");
      writerBasedJsonGenerator1.writeRaw('E');
      writerBasedJsonGenerator0.writeNumber(55296);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((float) 2);
      Random.setNextRandom(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(55296);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1303, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar((-910));
      writerBasedJsonGenerator0.writeArrayFieldStart("\"lCva`(");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      jsonGenerator0.writeString("SZ7@-5+}@I-)6}38g");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      jsonGenerator0.writeNullField("Frk5>/a_Q|Y _Q5fl");
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext2.allocNameCopyBuffer(264);
      iOContext0.allocWriteEncodingBuffer(93);
      writerBasedJsonGenerator0._releaseBuffers();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 92, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.flush();
      Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "start an object";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      String string1 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      try { 
        jsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, 65599);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 65596 bytes (out of 65599)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((float) 3);
      writerBasedJsonGenerator1.writeString("");
      writerBasedJsonGenerator0.writeStartObject((Object) iOContext0);
      try { 
        writerBasedJsonGenerator1._verifyValueWrite((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      jsonGenerator0.writeString("SZ7@-5+}@I-)6}38g");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      jsonGenerator0.writeNullField("Frk5>/a_Q|Y _Q5fl");
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer(93);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 92, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      jsonGenerator0.writeString("SZ7@-5+}@I-)6}38g");
      jsonGenerator0.writeNullField("Frk5>/a_Q|Y _Q5fl");
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("iN5*)]OZ^(W1w3;|-m");
      writerBasedJsonGenerator0._writeFieldName("5", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(55296);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      writerBasedJsonGenerator0._writeFieldName("start an object", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Can not write a field name, expecting a value";
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string1 = " v7W\\;Gi";
      writerBasedJsonGenerator0.writeString(" v7W;Gi");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeNumber(1000L);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeRawValue("z6{FXFWl.m5O|nEiYY");
      writerBasedJsonGenerator0.writeNumber((short)101);
      stringWriter0.append('b');
      writerBasedJsonGenerator0._verifyValueWrite("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1303, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(2177);
      writerBasedJsonGenerator0.writeArrayFieldStart("\"lCva`(");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeString(charArray0, 8, 1);
      writerBasedJsonGenerator1._writeFieldName("", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = '';
      writerBasedJsonGenerator0.writeString("SZ7@-5+}@I-)6}38g");
      jsonGenerator0.writeStartObject((Object) bufferRecycler0);
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 28);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeString("P(");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
      iOContext1.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeRawValue("YqbZe=u#W3J@,pK6U*]");
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator1.writeRawValue("");
      writerBasedJsonGenerator1._writeFieldName("start an object", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((double) 2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeStartArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-516), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 2, (-85));
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator1.writeFieldName("bble");
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeArrayFieldStart("Current context not an object but ");
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeRawValue("write a boolean value");
      writerBasedJsonGenerator0._writeFieldName(" >", false);
      writerBasedJsonGenerator0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("F([Qg^E`?3qp/l+<");
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw('y');
      writerBasedJsonGenerator0.writeRaw('y');
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._verifyValueWrite("F([Qg^E`?3qp/l+<");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tTQ7Ff|n{B#3Uw");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 25, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 25;
      writerBasedJsonGenerator0.writeString("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeRawValue("U^");
      writerBasedJsonGenerator0._writePPFieldName("tI$K:!SR:~RHCM", false);
      writerBasedJsonGenerator0._writeFieldName("th(f/6W;m/h8'.:", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-345), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNullField("start an object");
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = "";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("Oxqk!w>ZALi;x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
      iOContext1.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeRawValue("YqbZe=u#W3J@,pK6U*]");
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '';
      charArray0[2] = 's';
      charArray0[3] = 'W';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.JsonEncoding", true);
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(0);
      iOContext1.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeRawValue("YqbZe=u#W3e@,pK6U*]");
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '';
      charArray0[2] = 's';
      charArray0[3] = 'W';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("\"IN55\"zMDyfpwrb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      stringWriter0.append((CharSequence) "start an object");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("|b[(}R<YU");
      writerBasedJsonGenerator0.writeArrayFieldStart("|b[(}R<YU");
      writerBasedJsonGenerator0.writeRaw("^ZpCXPR (h~QcTb=t;.");
      stringWriter0.flush();
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("^ZpCXPR (h~QcTb=t;.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      try { 
        writerBasedJsonGenerator0.writeNumber((short)16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      Object object0 = new Object();
      writerBasedJsonGenerator0.writeStartObject(object0);
      try { 
        writerBasedJsonGenerator0.writeString("`(,V]K:i0:Mt]?");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 51, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("Re@Xt,");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("F([Qg^E`?3qpl+<");
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeRaw("+a<,?.");
      writerBasedJsonGenerator0.writeRaw('y');
      writerBasedJsonGenerator0.writeNumber((float) 2);
      writerBasedJsonGenerator1.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber("write a binary value");
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[2] = '\'';
      writerBasedJsonGenerator0.writeRaw("");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      stringWriter0.append('\u0000');
      writerBasedJsonGenerator0.writeRaw('w');
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("iN5*)]OZ^(W1w3;|-m");
      writerBasedJsonGenerator0._writeFieldName("5", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("iN5*)]OZ^(W1w3;|-m");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
      writerBasedJsonGenerator1.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "start an object";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 25, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 25;
      writerBasedJsonGenerator0.writeString("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      String string1 = "U^";
      writerBasedJsonGenerator0.writeRawValue("U^");
      writerBasedJsonGenerator0.writeString("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._writeFieldName("th(f/6W;m/h8'.:", true);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 56319, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56319
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler2, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 8, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext2.allocTokenBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      char[] charArray1 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray1, 2, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("start an object");
      writerBasedJsonGenerator0.writeString(charArray0, 117, 1);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext3, (-1798), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = iOContext1.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(8);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("_`&2{9");
      writerBasedJsonGenerator0._writeFieldName("<g<k`-Wkz6Z`' gv!hq", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("4n");
      jsonGenerator0.writeString(charArray0, 0, 2);
      jsonGenerator0.writeNumber(93);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString(string0);
      int int0 = 120;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(int0);
      writerBasedJsonGenerator0.writeString(string0);
      jsonGenerator0.writeString(string0);
      InputStream inputStream0 = null;
      writerBasedJsonGenerator0.writeBinary(inputStream0, bufferRecycler0.CHAR_CONCAT_BUFFER);
      String string1 = null;
      boolean boolean0 = false;
      writerBasedJsonGenerator0._writeFieldName(string1, boolean0);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0._verifyPrettyValueWrite(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString(string0);
      int int0 = 120;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(int0);
      writerBasedJsonGenerator0.writeString(string0);
      String string1 = "iN5*)]OZ^(W1w3;|-m";
      writerBasedJsonGenerator0.writeRawValue(string1);
      String string2 = "5";
      writerBasedJsonGenerator0._writeFieldName(string2, boolean0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, objectCodec0, stringWriter0);
      char[] charArray0 = new char[0];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      writerBasedJsonGenerator1.configure(jsonGenerator_Feature0, boolean0);
      int int1 = 100;
      writerBasedJsonGenerator1.writeString(charArray0, int1, bufferRecycler0.CHAR_NAME_COPY_BUFFER);
      int int2 = (-1289);
      writerBasedJsonGenerator0.writeNumber(int2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(8);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeRawValue("'kQ>3vkQx");
      writerBasedJsonGenerator0._writeFieldName("'kQ>3vkQx", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber((-2395));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("Re@Xt,");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("Whx_PG?FV", true);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-754), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._writeFieldName("G|'}tUG", true);
      writerBasedJsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-30));
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName("iQvPria", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      writerBasedJsonGenerator0._writeFieldName("", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator((IOContext) null, (byte)69, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 128);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-97));
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, 2, (-3543));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = iOContext2.allocTokenBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString(charArray0, 3, 97);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator1.writeArrayFieldStart("");
      writerBasedJsonGenerator1.writeString(charArray0, 45, 1313);
      writerBasedJsonGenerator0.writeNumber((long) 97);
      writerBasedJsonGenerator1.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      int int0 = 18;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 4230, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("{L)_e'OGAM!V80U");
      jsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 4230, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4230
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("iN5*)]OZ^(W1w3;|-m");
      writerBasedJsonGenerator0._writeFieldName("5", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeString(charArray0, 100, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "/";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "start an object";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an object");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an object");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeArrayFieldStart("start an object");
      BigInteger bigInteger0 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 4230, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1._verifyPrettyValueWrite("{L)_e'OGAM!V80U");
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("start an object", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[4] = (byte) (-96);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger2);
      writerBasedJsonGenerator0.writeNumber((int) (byte) (-96));
      SerializedString serializedString0 = new SerializedString("+a<,?.");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString((char[]) null, 0, 0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.asQuotedChars();
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeRaw("start an object");
      writerBasedJsonGenerator0.writeNumber(4);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[7];
      charArray0[6] = '\'';
      charArray0[2] = '\'';
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 97, 136);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 43, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[3];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("Pk");
      writerBasedJsonGenerator0.writeFieldName("start an object");
      writerBasedJsonGenerator0.writeString(charArray0, (-435), (-1550));
      writerBasedJsonGenerator0.writeNumber(1658);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 1, (-1454));
      writerBasedJsonGenerator0.writeNumber((long) 28);
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0._currentEscape = (SerializableString) serializedString0;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((-2441));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeArrayFieldStart("/a^_vUp}R");
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 1, (-1454));
      writerBasedJsonGenerator0.writeNumber((long) 28);
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0._currentEscape = (SerializableString) serializedString0;
      writerBasedJsonGenerator0.writeNumber((-2422));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(32);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("_`&2{9");
      jsonGenerator0.writeNumber((long) 1);
      jsonGenerator0.flush();
      jsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 43, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[3];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("Pk");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      Object object0 = new Object();
      writerBasedJsonGenerator0.writeStartObject(object0);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.writeString((String) null);
      Object object1 = writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartObject(object1);
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[6] = '4';
      charArray0[3] = '?';
      charArray0[4] = '4';
      charArray0[7] = '4';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("start an object");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("start an object", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeRaw("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = iOContext1.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(8);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawValue(charArray0, (-770), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start <n objecr", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("start <n objecr");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56319, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 56319, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      writerBasedJsonGenerator0._maximumNonEscapedChar = 1;
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber(886L);
      writerBasedJsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer();
      StringWriter stringWriter0 = new StringWriter(12000);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
      writerBasedJsonGenerator0.writeArrayFieldStart("\"lCva`(");
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'o';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "";
      writerBasedJsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 548);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(120);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3 bytes (out of 9)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 65599);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 65596 bytes (out of 65599)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "stat an obect", false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("stat an obect");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1071, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator1.setHighestNonEscapedChar(1);
      iOContext1.allocTokenBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 53296 bytes (out of 55296)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Can not write a field name, expecting a value";
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4000, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string1 = " v7W\\;Gi";
      writerBasedJsonGenerator0.writeString(" v7W;Gi");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(95);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      try { 
        writerBasedJsonGenerator1.writeBinary((InputStream) sequenceInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.setHighestNonEscapedChar(123);
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(2);
      String string0 = "\"IN55\"zMDyfpwrb";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("ovOh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("Re@Xt,");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", true);
      writerBasedJsonGenerator0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite(":S~8e~:|? 7h$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString("fMQd\"@ZAu$@");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeString("fMQd\"@ZAu$@");
      iOContext1.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeNumber((-1707L));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short) (-400));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((-408L));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("Pk");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      Object object0 = new Object();
      writerBasedJsonGenerator0.writeStartObject(object0);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.writeString("`(,V]K:i0:Mt]?");
      writerBasedJsonGenerator0.writeRawValue("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)1363);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber((short) (-1852));
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.filter.TokenFilter", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      Object object0 = new Object();
      writerBasedJsonGenerator0.writeStartObject(object0);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.writeString("`(,V]K:i0:Mt]?");
      writerBasedJsonGenerator0.writeRawValue("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[0];
      serializedString0.appendQuoted(charArray0, 56320);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      writerBasedJsonGenerator0.writeRaw("");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      StringWriter stringWriter1 = stringWriter0.append('\'');
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 114, (ObjectCodec) null, stringWriter2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "start an object";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 102, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = ' ';
      charArray0[2] = 'Q';
      charArray0[3] = '1';
      writerBasedJsonGenerator1._entityBuffer = charArray0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("F/w4j%]=", 1, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("Internal error: TypeReference constructed without actual type information");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      int int0 = (-991);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-991), (ObjectCodec) null, stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('r');
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeFieldName("@15eE,sp+K^&,c");
      char char0 = 'y';
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 40, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("Broken surrogate pair: first char 0x");
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("Pk");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeString(charArray0, 1019, (-1962));
      iOContext0.allocBase64Buffer();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '\u0000';
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray1 = new char[9];
      charArray1[0] = 'O';
      charArray1[1] = 'J';
      charArray1[3] = '.';
      charArray1[4] = 'Z';
      charArray1[5] = 'q';
      charArray1[6] = '2';
      charArray1[7] = '=';
      charArray1[8] = '3';
      writerBasedJsonGenerator0.writeRaw(charArray1, 1, 0);
      writerBasedJsonGenerator0.writeString("Xtrt anobUect");
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("60. d1d@p", "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false, 'K', (-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 81)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[5] = '?';
      charArray0[7] = '4';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      iOContext1.allocBase64Buffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString((char[]) null, 0, 0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeArrayFieldStart("fMQd\"@ZAu$@");
      writerBasedJsonGenerator0.writeArrayFieldStart("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      writerBasedJsonGenerator0.writeRawValue("");
      writerBasedJsonGenerator0._writeFieldName("vr.&0*E>M{{6\bINf`", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 56319, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeArrayFieldStart("fMQd\"@ZAu$@");
      writerBasedJsonGenerator0.writeString(")Jr%*)");
      writerBasedJsonGenerator0.writeRawValue("fMQd\"@ZAu$@");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("Gmdomk");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-3104), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      stringWriter0.append((CharSequence) "start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("|b[(}R<YU");
      writerBasedJsonGenerator0.writeRaw("start an object");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("start an object");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      stringWriter0.append((CharSequence) "start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("|b[(}R<YU");
      writerBasedJsonGenerator0.writeRaw("M3`U");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("M3`U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("7UcGmktWhy e`S{");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(97);
      StringWriter stringWriter2 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "s:oi[6Y~y2z5>jK:<W", true);
      StringWriter stringWriter3 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2262, (ObjectCodec) null, stringWriter3);
      stringWriter3.append((CharSequence) "s:oi[6Y~y2z5>jK:<W");
      writerBasedJsonGenerator0.writeArrayFieldStart("s:oi[6Y~y2z5>jK:<W");
      writerBasedJsonGenerator0.writeNumber((short)127);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(32);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("_`&2{9");
      writerBasedJsonGenerator0._writeFieldName("<g<k`-Wkz6Z`' gv!hq", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw("", 3, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(8);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("_`&2{9");
      writerBasedJsonGenerator0._writeFieldName("<g<k`-Wkz6Z`' gv!hq", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeFieldName("s1DAG");
      writerBasedJsonGenerator0.writeString(charArray0, (-276), 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(32);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-475), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "start an object";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '\u0000';
      stringWriter0.write(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1154, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      String string1 = "@15eE,sp+K^&,c";
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 97, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNullField("start an object");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      writerBasedJsonGenerator0._writeFieldName("write a string", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1303, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(2177);
      writerBasedJsonGenerator0.writeArrayFieldStart("\"lCva`(");
      jsonGenerator0.writeString(charArray0, 68, 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      stringWriter0.close();
      writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
      writerBasedJsonGenerator0.writeString("Re@Xt,");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[3];
      writerBasedJsonGenerator0.writeFieldName("F([Qg^E`?3qpl+<");
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '+';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 10, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      stringWriter0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(" bytes (out of ");
      char[] charArray0 = iOContext1.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(3);
      writerBasedJsonGenerator0.writeString("i)U!Afw} 1+6dn{U//");
      writerBasedJsonGenerator0.writeString(charArray0, 55296, 0);
      jsonGenerator0.writeString(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite(" bytes (out of ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      writerBasedJsonGenerator0.writeRaw("");
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      int int0 = 114;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "start an object", 1, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeNumber((short)16);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String((byte[]) null, 1, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          BufferRecycler bufferRecycler0 = new BufferRecycler();
          Object object0 = new Object();
          StringWriter stringWriter0 = new StringWriter(3);
          IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
          stringWriter0.write("");
          WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
          byte[] byteArray0 = new byte[5];
          byte[] byteArray1 = iOContext0.allocReadIOBuffer();
          byteArray0[0] = (byte) (-3);
          char[] charArray0 = new char[2];
          charArray0[0] = 'H';
          writerBasedJsonGenerator0.writeBinary(byteArray1);
          BigInteger bigInteger0 = BigInteger.TEN;
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("start an object", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      bigInteger0.divide(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-96);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString((char[]) null, 0, 0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeRaw("start an object");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[4] = '4';
      charArray0[5] = '?';
      SerializedString serializedString0 = new SerializedString("start an object");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 101, (ObjectCodec) null, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("+a<,?.");
      writerBasedJsonGenerator0.writeRawValue("start an object");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      iOContext1.allocConcatBuffer();
      writerBasedJsonGenerator0.writeFieldName("F([Qg^E`?3qpl+<");
      try { 
        writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Xtrt anobUect", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray1 = new char[9];
      charArray1[0] = 'O';
      charArray1[1] = 'J';
      charArray1[3] = '.';
      charArray1[4] = 'Z';
      charArray1[5] = 'q';
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      iOContext1.allocTokenBuffer(0);
      writerBasedJsonGenerator0.writeString(charArray0, 1499, 39);
      writerBasedJsonGenerator0._verifyValueWrite("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) "start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("|b[(}R<YU");
      writerBasedJsonGenerator0.writeRaw("start an object");
      stringWriter0.flush();
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("start an object");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 28;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.isClosed();
      writerBasedJsonGenerator0.writeArrayFieldStart("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 28, (ObjectCodec) null, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("yU");
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray0 = new char[9];
      writerBasedJsonGenerator0.writeBooleanField("7* ;sm&(-PUu}rpFt3", false);
      charArray0[0] = 'O';
      charArray0[1] = 'J';
      charArray0[3] = '.';
      charArray0[4] = 'Z';
      charArray0[5] = 'q';
      charArray0[6] = '2';
      writerBasedJsonGenerator0.writeNumber((-1191L));
      writerBasedJsonGenerator0.writeNumber((short)5);
      writerBasedJsonGenerator0.writeBoolean(false);
      try { 
        writerBasedJsonGenerator0.writeFieldName("write a boolean value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString((char[]) null, 0, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[4] = '4';
      charArray0[5] = '?';
      charArray0[7] = '4';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("start an object");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "start an object";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString("yU");
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'J';
      charArray0[3] = '.';
      charArray0[4] = 'Z';
      charArray0[5] = 'q';
      charArray0[6] = '2';
      writerBasedJsonGenerator0.writeNumber((-1191L));
      writerBasedJsonGenerator0.writeNumber((short)5);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((-408L));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 754, (ObjectCodec) null, stringWriter1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((-3388.560884));
      char char0 = 'J';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.core.util.ByteArrayBuilder", "Non-standard token '", true, 'J', 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 20)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.JsonGenerationException");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(Double.NaN);
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(69);
      stringWriter0.append('S');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1), (ObjectCodec) null, stringWriter0);
      stringWriter0.write(1166);
      writerBasedJsonGenerator0.writeNumber((-1075.171773882441));
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      char char0 = '\'';
      writerBasedJsonGenerator0.writeRaw("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      stringWriter0.append((CharSequence) "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeArrayFieldStart("+a<,?.");
      writerBasedJsonGenerator0.writeString("j^U#f^&<");
      writerBasedJsonGenerator0.writeRawValue("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0._writeFieldName("j^U#f^&<", false);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart("BW3_f");
      writerBasedJsonGenerator0.writeString("BW3_f");
      writerBasedJsonGenerator0.writeArrayFieldStart(" G");
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'h';
      charArray0[2] = '\\';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 924);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 6000, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'D';
      StringWriter stringWriter1 = stringWriter0.append('D');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Xtrt anobUect", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string0 = null;
      writerBasedJsonGenerator0.writeString((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("yU");
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocTokenBuffer();
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("2=VP*6;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "Xtrt anobUect";
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString((String) null);
      String string1 = "yU";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString("yU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = '\r';
      charArray0[5] = 'D';
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      charArray0[6] = 'U';
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      stringWriter1.close();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[1] = 'A';
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeString(" does not support schema of type '");
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((-207.8));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'A';
      StringWriter stringWriter1 = stringWriter0.append('A');
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      byte byte0 = (byte)0;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)64, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 2, (int) (byte)64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
      writerBasedJsonGenerator0.writeString(charArray0, 2, (-2));
      int int0 = 4212;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)73;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = '?';
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeString("Ca not ");
      writerBasedJsonGenerator0.writeBoolean(true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 92, 233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6186), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("pZRdC_");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      writerBasedJsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = " bytes (out of ";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter1 = stringWriter0.append('2');
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringWriter0, true);
      stringWriter1.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringWriter1.append((CharSequence) stringBuilder0);
      writerBasedJsonGenerator0.writeArrayFieldStart(" \"~5tdB~{@");
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      charArray0[2] = '2';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 500, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 6000, (-1625));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      writerBasedJsonGenerator0.writeBinary((InputStream) null, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1023, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      writerBasedJsonGenerator0.writeBinary((InputStream) null, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1023, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      int int0 = 17;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K#f");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "W=z!", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = '\r';
      charArray0[5] = 'D';
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      charArray0[6] = 'U';
      try { 
        writerBasedJsonGenerator0.writeNumber((-834L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0082';
      charArray0[1] = '\u0082';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = '\u0082';
      charArray0[5] = '\u0082';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = '?';
      int int0 = 37;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 68, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = '\u0082';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = '\u0082';
      charArray0[7] = 'E';
      charArray0[8] = 'R';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 2);
      String string0 = "Can not ";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Can not ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      char[] charArray1 = new char[4];
      charArray1[0] = '\"';
      charArray1[1] = 'E';
      charArray1[2] = 'p';
      charArray1[3] = '\"';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray1, 3, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[1] = '\"';
      charArray0[3] = '\"';
      iOContext1.allocWriteEncodingBuffer(1);
      charArray0[3] = '\"';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("L C;R`2?Je2e");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = '\r';
      charArray0[5] = '2';
      charArray0[6] = 'U';
      writerBasedJsonGenerator0.writeNumber((-834L));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter2 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1830), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-1284.0F));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      writerBasedJsonGenerator0.writeString("m5~tAi");
      SerializedString serializedString0 = new SerializedString("m5~tAi");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1303, (ObjectCodec) null, stringWriter0);
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0.setHighestNonEscapedChar((-910));
      writerBasedJsonGenerator0.writeRawValue("iN5*)]OZ^(W1w3;|-m");
      writerBasedJsonGenerator0._writeFieldName("", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      writerBasedJsonGenerator0.writeNumber((-2514.4919));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      writerBasedJsonGenerator0.writeString("<D8Yqk");
      writerBasedJsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 700, (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeNumber((short) (-1615));
      jsonGenerator0.writeNumber(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocReadIOBuffer();
      byteArray0[0] = (byte) (-3);
      writerBasedJsonGenerator0.writeNumber((short) (-1512));
      writerBasedJsonGenerator0.writeNumber(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[5] = 'A';
      charArray0[5] = 'p';
      charArray0[6] = 'p';
      charArray0[7] = 'E';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1243, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("kUc$U%~Ttg[;. H");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '_';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'c';
      writerBasedJsonGenerator0.writeString(charArray0, 1484, 0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Can not write a field name, expecting a value";
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'p';
      charArray0[6] = 'A';
      charArray0[7] = 'E';
      writerBasedJsonGenerator0.writeString(charArray0, 33, (-2184));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-516), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 2, (-85));
      writerBasedJsonGenerator0.writeNumber(5);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator1.writeFieldName("bble");
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'p';
      charArray0[6] = 'A';
      charArray0[7] = 'E';
      writerBasedJsonGenerator0.writeString(charArray0, 33, (-2184));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 635, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an array");
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter0.write("!{.tX*ti(!h2");
      char[] charArray0 = new char[0];
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "|o?>[2CA";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "|o?>[2CA", false);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.intValueExact();
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-2000L));
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0._writeFieldName("", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)5;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(", expecting field name");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('A');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2116, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = '`';
      charArray0[3] = '_';
      charArray0[4] = 'A';
      charArray0[5] = 'K';
      charArray0[6] = 'N';
      charArray0[7] = 'K';
      charArray0[8] = 'A';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-4095), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", false);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1727, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-2252), (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(42);
      stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[9];
      intArray0[0] = 33;
      intArray0[1] = (int) 'A';
      intArray0[2] = 2;
      intArray0[3] = 56320;
      intArray0[4] = 56320;
      intArray0[5] = 1;
      intArray0[6] = 56319;
      intArray0[7] = 57343;
      intArray0[8] = 0;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeNullField("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'p';
      charArray0[6] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("write a binary value");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("MUd]9O?z");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'A';
      stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, "MUd]9O?z", false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bigInteger0.intValueExact();
      StringWriter stringWriter1 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 44, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-2976L));
      writerBasedJsonGenerator0.writeNumber(1.0F);
      String string0 = "%&<k(qZf5[3";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("@", "%&<k(qZf5[3", false, '/', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 11)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber((-2003.81F));
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator1._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "ydg", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("ydg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("ydg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate1.getCodec();
      StringWriter stringWriter2 = new StringWriter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1830), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-1284.0F));
      writerBasedJsonGenerator0.writeString("m5~tAi");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null, 1, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 17, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "null", true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('@');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      byte byte0 = (byte)0;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      char char0 = '\'';
      writerBasedJsonGenerator0.writeRaw('\'');
      stringWriter1.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0._writeFieldName("start an object", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 4096, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      writerBasedJsonGenerator1.writeBinary(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.divide(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-1216), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("=:d87&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext1.allocTokenBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '\\';
      charArray0[4] = 'c';
      charArray0[5] = 'k';
      charArray0[6] = 'H';
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1684, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName(";IxRPoKSl?!b`Q>&WS");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6186), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 3996, 3996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('D');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNullField("|Nx/$UOCC1mos{yJ");
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      writerBasedJsonGenerator1.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0.writeNumber((long) 3);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      writerBasedJsonGenerator0.writeNullField(" bytes (out of ");
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 700, (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("start an object");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3465);
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)111;
      Object object0 = jsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (byte)99, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("kUc$U%~Ttg[;. H");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 47, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeString((char[]) null, 0, 0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "7", true);
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      bigInteger1.intValueExact();
      StringWriter stringWriter0 = new StringWriter(4962);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1342, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(2147483647L);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(419);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, stringWriter1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 24, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream1, byteArray0, 3568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = true;
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char char0 = '$';
      stringWriter0.append('$');
      String string0 = "7";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "7", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 608, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("N/A");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      writerBasedJsonGenerator0._writeFieldName("N/A", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = '~';
      charArray0[2] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append('d');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber(1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      stringWriter0.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      char[] charArray0 = new char[8];
      iOContext1.allocWriteEncodingBuffer(1);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((char[]) null, 3, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 548);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "stat an obect";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "stat an obect", false);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("stat an obect");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 28, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator1.setHighestNonEscapedChar(1);
      iOContext2.allocTokenBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 53296 bytes (out of 55296)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(42);
      char char0 = 'A';
      StringWriter stringWriter1 = stringWriter0.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString(")");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pipedInputStream0, 269);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeArrayFieldStart(", expect^ng field name");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writeFieldName(serializedString0, true);
      byte byte0 = (byte) (-3);
      byte byte1 = (byte)110;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '=', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      StringWriter stringWriter2 = stringWriter1.append('`');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 127, (ObjectCodec) null, stringWriter2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      writerBasedJsonGenerator0.disable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0._releaseBuffers();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y~*ULR7@G*nl");
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 127;
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      char char0 = '`';
      StringWriter stringWriter2 = stringWriter1.append('`');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 127, (ObjectCodec) null, stringWriter2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      writerBasedJsonGenerator0.disable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0._releaseBuffers();
      String string0 = "Y~*ULR7@G*nl";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y~*ULR7@G*nl");
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6186), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 725, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw('\'');
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3465);
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)111;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeRaw('\'');
      stringWriter1.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 14, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("Unrecognized character escape ", 10, 3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValueExact();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[21];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNullField("start an object");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        writerBasedJsonGenerator0.writeArrayFieldStart("start an object");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("\n");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3465);
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)111;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 14, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3491, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = '_';
      charArray0[3] = 'K';
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0.writeNumber((long) 3);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer(2);
      writerBasedJsonGenerator0.flush();
      Random.setNextRandom(55296);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "7", true);
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      bigInteger1.intValueExact();
      StringWriter stringWriter0 = new StringWriter(4962);
      stringWriter0.write("]!k/xNkx&tvT$L");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1342, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("J&m_/IUD'khnP:", 1);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      System.setCurrentTimeMillis(159L);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 65535, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("{fpdeffE8?");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      Base64Variant base64Variant0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byte byte0 = (byte)50;
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(3946);
      stringWriter0.append(']');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = '@';
      charArray0[3] = '@';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 2726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[4];
      iOContext0.allocBase64Buffer();
      charArray0[0] = 'A';
      charArray0[2] = '_';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-27);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-1512));
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(2177);
      jsonGenerator0.writeString(charArray0, 68, 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-1512));
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3465);
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '@';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter(127);
      StringWriter stringWriter2 = stringWriter1.append('R');
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1687), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'A';
      charArray0[4] = 'R';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocReadIOBuffer();
      byteArray0[0] = (byte) (-3);
      writerBasedJsonGenerator0.writeNumber((short)7986);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(", expecting field name");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('A');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("", false);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = new StringWriter('y');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)99;
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 3616, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String((byte[]) null, (-1544), (-1544));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      char char0 = '@';
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-25), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      writerBasedJsonGenerator0.writeNumber((short)75);
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.core.io.CharTypes");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(56320, (CharSequence) "com.fasterxml.jackson.core.io.CharTypes", (-1954), 56319);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 56320
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 34, (ObjectCodec) null, stringWriter0);
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      stringWriter0.append('\'');
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1344), (ObjectCodec) null, stringWriter0);
      int int0 = 80;
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3465);
      StringWriter stringWriter1 = stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1351), (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      writerBasedJsonGenerator0.writeString("tyX&)+[G$`Xb+K/]i");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 80, (-2544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3408), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNullField("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("Unrecognized character escape ", 10, 3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValueExact();
      writerBasedJsonGenerator0.writeNumber("$Aoy8FL||&2yqj1Lbdb");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("Gd.e-^O");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "start an object", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("start an object");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 255, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("", 3, 55296);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      char char0 = 'J';
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(3845);
      StringBuilder stringBuilder2 = stringBuilder1.append("");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuilder2);
      stringWriter2.append('J');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = '%';
      charArray0[7] = 'J';
      charArray0[8] = 'e';
      writerBasedJsonGenerator0.writeString(charArray0, 101, (-512));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-67), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (int) (byte) (-95));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (int) (byte) (-95));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = '_';
      charArray0[3] = 'K';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 3);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(87);
      StringWriter stringWriter1 = stringWriter0.append('u');
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '}';
      StringWriter stringWriter0 = new StringWriter(42);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 42, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeArrayFieldStart("@15eE,sp+K^&,c");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("@15eE,sp+K^&,c", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      stringWriter0.write("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNullField("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.JsonWriteContext");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '}';
      charArray0[2] = 'O';
      charArray0[3] = 'S';
      charArray0[4] = 'h';
      charArray0[5] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-603), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 33);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeString(";hi");
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      stringWriter0.write("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " byites (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-436), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      stringWriter0.write("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      String string0 = "}4zEiJnTY=)vI";
      writerBasedJsonGenerator0.writeNullField("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      writerBasedJsonGenerator0.writeNumber((short)75);
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.core.io.CharTypes");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(56320, (CharSequence) "com.fasterxml.jackson.core.io.CharTypes", (-1954), 56319);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 56320
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 55296, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 55296, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55296
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[15];
      charArray0[0] = 'R';
      charArray0[1] = '}';
      charArray0[2] = 'O';
      charArray0[4] = 'h';
      charArray0[5] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-603), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Can not write a field name, expecting a value", 2, 3);
      StringWriter stringWriter2 = stringWriter1.append('|');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeRaw("Can not write a field name, expecting a value");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(" bytes (out of ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      Random.setNextRandom(3);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.JsonFactory$Feature");
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.JsonFactory$Feature", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(3790.4607F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      iOContext0.allocNameCopyBuffer(1935);
      StringWriter stringWriter1 = stringWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      writerBasedJsonGenerator0.writeRaw(charArray0, 2, 0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((short)75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)14);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 123, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("/");
      writerBasedJsonGenerator0.writeArrayFieldStart("write a null");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-4212), (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      stringWriter1.append((CharSequence) "Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeArrayFieldStart("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.close();
      String string0 = "com.fasterxml.jackson.core.json.JsonWriteContext";
      try { 
        writerBasedJsonGenerator0.writeNullField("!1 hKNokp30{MIb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeArrayFieldStart("N3MEqR3uGHYo9?Hay9");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '}';
      StringWriter stringWriter0 = new StringWriter(42);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 12, (ObjectCodec) null, stringWriter1);
      String string0 = "@15eE,sp+K^&,c";
      writerBasedJsonGenerator0.writeArrayFieldStart("@15eE,sp+K^&,c");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeArrayFieldStart(", expecting field name");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject((Object) iOContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 43, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      char[] charArray0 = new char[3];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("Pk");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", false);
      stringWriter0.close();
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 427, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("expected a valid value (number, String, array, object, 'true', 'false' or 'null')", 0, 2);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.JsonGeneratorImpl");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-28), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNullField("com.fasterxml.jackson.core.json.JsonWriteContext");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      iOContext0.allocWriteEncodingBuffer(2);
      writerBasedJsonGenerator0.flush();
      Random.setNextRandom(55296);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      stringWriter0.write("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(false);
      String string0 = "}4zEiJnTY=)vI";
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._cfgUnqNames = true;
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      assertEquals("p", stringWriter0.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-3343), (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = '_';
      charArray0[3] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 4, 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'K';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3024, 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, (-1187));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 84, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("/");
      char[] charArray0 = new char[7];
      charArray0[1] = 'r';
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "*f8pVn~?", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*f8pVn~?", 1, 1);
      stringWriter1.append((CharSequence) "*f8pVn~?");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '%';
      charArray0[6] = '@';
      charArray0[7] = '@';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      String string0 = "}4zEiJnTY=)vI";
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 91, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocWriteEncodingBuffer(634);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 635, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an array");
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "A#iED)@Zkb";
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "start an array", 57343, 56320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeStartObject((Object) "start an object");
      try { 
        writerBasedJsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 700, (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.getCurrentValue();
      jsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1018);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, writerBasedJsonGenerator0, false);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '*';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[2] = ',';
      charArray0[3] = '}';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1417), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(56319);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeArrayFieldStart("");
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 754, (ObjectCodec) null, stringWriter1);
      int int0 = (-2688);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("<#O:S>Z=xCqAc-f-", 0, (-2688));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(419);
      StringWriter stringWriter1 = stringWriter0.append('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 116, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeArrayFieldStart("PL.$]USKEZX~U7cix<");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "|o?>[2CA";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "|o?>[2CA", false);
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      bigInteger0.intValueExact();
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-2000L));
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ydg", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("ydg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("ydg");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "start an object", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("start an object");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("~[f|$`p(8nE~3.LAqh4");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 102, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 32, (-1677), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "~[f|$`p(8nE~3.LAqh4");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1950), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-540));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("~[f|$`p(8nE~3.LAqh4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4167, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.setHighestNonEscapedChar((-2624));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1018);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, writerBasedJsonGenerator0, false);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '*';
      charArray0[2] = ',';
      charArray0[3] = '}';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1417), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(56319);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('c');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      iOContext1.allocNameCopyBuffer(3996);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('@');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-47), (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ")", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 32, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      writerBasedJsonGenerator0._outputEnd = 32;
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      iOContext0.allocTokenBuffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setHighestNonEscapedChar(8);
      writerBasedJsonGenerator0.writeString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      writerBasedJsonGenerator0.writeRawValue("_`&2{9");
      writerBasedJsonGenerator0._writeFieldName("<g<k`-Wkz6Z`' gv!hq", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((short) (-1414));
      jsonGenerator0.close();
      assertEquals("\"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\" \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\" \"\\u0065\\u0078\\u0072\\u0065\\u0060\\u0074\\u0065\\u0064\\u0002\\u006.\\u0002\\u0076\\u006.\\u006C\\u0069\\u0064\\u0002\\u0076\\u006.\\u006C\\u0075\\u0065\\u0002\\u0008\\u006E\\u0075\\u006D\\u0060\\u0065\\u0070\\u000C\\u0002\\u0050\\u0074\\u0070\\u0069\\u006E\\u0067\\u000C\\u0002\\u006.\\u0070\\u0070\\u006.\\u0079\\u000C\\u0002\\u006[\\u0060\\u006A\\u0065\\u0060\\u0074\\u000C\\u0002\\u0007\\u0074\\u0070\\u0075\\u0065\\u0007\\u000C\\u0002\\u0007\\u0066\\u006.\\u006C\\u0070\\u0065\\u0007\\u0002\\u006[\\u0070\\u0002\\u0007\\u006E\\u0075\\u006C\\u006C\\u0007\\u0009\" _`&2{9,\\u000C\\u0067\\u000C\\u006B\\u0062\\u000D\\u0057\\u006B\\u007A\\u0006\\u005A\\u0062\\u0007\\u0002\\u0067\\u0076\\u000.\\u0068\\u007. \"1\" \"-1414\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((long) 0);
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      File file0 = MockFile.createTempFile("write a string", "4");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)69;
      byteArray0[0] = (byte)69;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0, 3996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1018);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      Base64Variant base64Variant0 = null;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      iOContext0.allocWriteEncodingBuffer(10);
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)28;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream1, byteArray0, (byte) (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setCodec((ObjectCodec) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.writeString("start an object");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeStartObject((Object) iOContext0);
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(97);
      StringWriter stringWriter2 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "s:oi[6Y~y2z5>jK:<W", true);
      StringWriter stringWriter3 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2262, (ObjectCodec) null, stringWriter3);
      stringWriter3.append((CharSequence) "s:oi[6Y~y2z5>jK:<W");
      writerBasedJsonGenerator0.writeArrayFieldStart("@15eE,sp+K^&,c");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("s:oi[6Y~y2z5>jK:<W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 635;
      iOContext0.allocWriteEncodingBuffer(634);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 635, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("start an array");
      Base64Variant base64Variant0 = null;
      String string0 = "A#iED)@Zkb";
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "start an array", 57343, 56320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2070), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      assertEquals((-2070), writerBasedJsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-6186), (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 3996, 3996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1344), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 2;
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 80, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(" bytes (out of ");
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonProcessingException", 1, 0);
      int int0 = writerBasedJsonGenerator0.getOutputBuffered();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1344), (ObjectCodec) null, stringWriter0);
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 80, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "a?#A:T`4Iw", false);
      StringWriter stringWriter0 = new StringWriter(15);
      StringWriter stringWriter1 = stringWriter0.append('*');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, (-3406), 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 2, 10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'x';
      charArray0[2] = 'f';
      charArray0[3] = '.';
      charArray0[4] = 'T';
      charArray0[5] = 'P';
      charArray0[6] = '9';
      charArray0[7] = '%';
      charArray0[8] = '!';
      stringWriter0.write(charArray0, 0, 0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      iOContext1.allocBase64Buffer();
      char[] charArray1 = iOContext0.allocTokenBuffer(56319);
      iOContext1.constructTextBuffer();
      stringWriter0.write(charArray1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String((byte[]) null, 91, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 0, (byte) (-95));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(3989);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3989, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '\\';
      charArray0[2] = 'L';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      charArray0[5] = 'p';
      charArray0[6] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-443), 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1), (ObjectCodec) null, stringWriter0);
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
  }
}
