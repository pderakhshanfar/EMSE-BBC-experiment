/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 15:58:10 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 971, (ObjectCodec) null, stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0083';
      charArray0[1] = '\u0083';
      charArray0[3] = '\"';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("Z=;<|:SE^(ht%g&0tAF");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR1_FIRST;
      SerializedString serializedString0 = new SerializedString("Current conte4t notan objecR but");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        writerBasedJsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-369), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField("7X&Hmt) }}A\"fl", "h1h");
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      writerBasedJsonGenerator0._writeFieldName("Unexpected end-of-input within/between ", false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3354));
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte byte0 = (byte) (-117);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 20 bytes (out of 23)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      StringWriter stringWriter1 = stringWriter0.append('*');
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      int int0 = 34;
      String string0 = ":))3C\\8{y~[E,M\\`";
      writerBasedJsonGenerator0.writeObjectField(":))3C8{y~[E,M`", (Object) null);
      BigDecimal bigDecimal0 = new BigDecimal(34);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      MathContext mathContext0 = new MathContext(125, roundingMode0);
      mathContext0.toString();
      bigDecimal0.round(mathContext0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = 2704;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 65536);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 57536 bytes (out of 65536)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      StringWriter stringWriter1 = stringWriter0.append('*');
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeObjectField(":))3C8{y~[E,M`", (Object) null);
      BigDecimal bigDecimal0 = new BigDecimal(34);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      MathContext mathContext0 = new MathContext(125, roundingMode0);
      mathContext0.toString();
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 65536);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 57536 bytes (out of 65536)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      ObjectCodec objectCodec1 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeRaw("Z=;<|:SE^(ht%g&0tAF");
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'x';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-35), (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName("fa]l.,Vqc1D/4{t)[", true);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeRawValue("hk<ho)&Kp-I<Q84r");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializedString serializedString0 = new SerializedString("fa]l.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeArrayFieldStart("fa]l.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeStringField("fa]l.,Vqc1D/4{t)[", "fa]l.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '\'';
      charArray0[2] = '}';
      writerBasedJsonGenerator0.writeString(charArray0, 80, (-2923));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "DBU^sKpQQ0.aCJ|", true, '}', 77);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 15)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigDecimal bigDecimal1 = new BigDecimal(2061);
      BigDecimal bigDecimal2 = new BigDecimal(1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigDecimal bigDecimal1 = new BigDecimal(3);
      BigDecimal bigDecimal2 = new BigDecimal(1000);
      String string0 = "Can not write a field name, expecting a value";
      writerBasedJsonGenerator0._writeFieldName("Can not write a field name, expecting a value", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
      writerBasedJsonGenerator0.writeNumber((short)2120);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("3B7o", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 44 bytes (out of 48)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-117), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-63));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber(0.0F);
      writerBasedJsonGenerator0.writeNumber((int) (byte) (-27));
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)23, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-8));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) (byte) (-117));
      writerBasedJsonGenerator0.writeNumber(3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      int int0 = (-369);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-369), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((-2514.0F));
      writerBasedJsonGenerator0.writeNumber((-2));
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 11, 739);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      stringWriter0.append('X');
      System.setCurrentTimeMillis(0L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)73;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 723, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-369), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField("7X&Hmt) }}A\"fl", "h1h");
      BigDecimal bigDecimal0 = new BigDecimal(1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2216), (ObjectCodec) null, stringWriter0);
      int int0 = GeneratorBase.SURR1_FIRST;
      writerBasedJsonGenerator0.writeNumber((short)69);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._maximumNonEscapedChar = 3;
      writerBasedJsonGenerator0.writeStringField("b_SPGo:\".{|", "(T8|5+;r2C");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeNumber((-1L));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'h';
      charArray0[2] = '6';
      charArray0[3] = 'w';
      charArray0[4] = 'V';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStringField("", "Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber((short)1425);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('7');
      try { 
        writerBasedJsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = '\"';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0081';
      charArray0[3] = '\"';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1282, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField("\"F;VMf<_oh=~u|k", "S5DAA$QWx%Ck`!O$y>");
      writerBasedJsonGenerator0.writeNumber(3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStringField("Current context not an object but ", "2q1{4UXx#U");
      jsonGenerator0.writeNumber((short)1425);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeStartObject();
      jsonGenerator0.writeRaw('O');
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-17);
      writerBasedJsonGenerator0.writeBinaryField("9(`YG)m", byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeStartObject();
      float float0 = (-985.684F);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false, '^', (-1634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 56)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = ".\\yC*Z+]T|?1>";
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " bytes (out of ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStringField("\"F;VMf<_oh=~u|k", ".yC*Z+]T|?1>");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-2858);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-2858), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      String string0 = "NaN";
      char[] charArray0 = iOContext0.allocConcatBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      bufferRecycler0.allocByteBuffer(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1061), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      charArray0[1] = 'x';
      charArray0[5] = 'u';
      charArray0[3] = 'A';
      charArray0[4] = 'M';
      charArray0[5] = 'x';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber((short) (-2794));
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
      writerBasedJsonGenerator0.writeRaw('x');
      writerBasedJsonGenerator0.writeNumber((short)17);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeNumber((-17));
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3900, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(5);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("9@@XK$6t<Ytx^dG{yN5");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = new BigDecimal(3989);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("<>S^fKc*", true);
      writerBasedJsonGenerator0.close();
      int int0 = GeneratorBase.SURR1_FIRST;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString("<>S^fKc*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0083';
      charArray0[1] = '\u0083';
      charArray0[3] = '\"';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 167);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 167 bytes (out of 167)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      stringWriter0.write(charArray0, 0, 3);
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 11, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-566));
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeNumber((int) (byte) (-63));
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-427), (ObjectCodec) null, stringWriter0);
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 55296);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      int int0 = 4000;
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 6 bytes (out of 6)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 45, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(45);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(2);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimal2.multiply(bigDecimal1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "Current context not an object but ";
      jsonGenerator0.writeArrayFieldStart("Current context not an object but ");
      jsonGenerator0.writeBoolean(false);
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeStringField("Current context not an object but ", "");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-35), (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName("fa.,Vqc1D/4{t)[", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SerializedString serializedString0 = new SerializedString("fa.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeArrayFieldStart("fa.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeStringField("fa.,Vqc1D/4{t)[", "fa.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.io.Serialized;tring", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.writeString("-8");
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '-';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      charArray0[4] = '';
      writerBasedJsonGenerator0._flushBuffer();
      charArray0[5] = 'W';
      writerBasedJsonGenerator0._verifyValueWrite("-8");
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      StringWriter stringWriter1 = stringWriter0.append('?');
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeObjectField(":))3C8{y~[E,M`", (Object) null);
      BigDecimal bigDecimal0 = new BigDecimal(34);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(66);
      String string0 = "M+e~Q=v4aAm^J;^#|z";
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      bigDecimal0.plus();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator1._outputBuffer = charArray0;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = ']';
      StringWriter stringWriter1 = stringWriter0.append(']');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(300);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(1);
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      bigDecimal1.plus();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      jsonGenerator0.writeArrayFieldStart("M+e~Q=v4aAm^J;^#|z");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("M+e~Q=v4aAm^J;^#|z");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      StringWriter stringWriter1 = stringWriter0.append('?');
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(34);
      BigInteger bigInteger0 = BigInteger.ONE;
      stringWriter1.flush();
      BigDecimal bigDecimal1 = new BigDecimal(66);
      bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      bigDecimal0.plus();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("com.fasterxml.jackson.core.util.JsonParserSequence", false);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.util.JsonParserSequence");
      writerBasedJsonGenerator1.writeNumber((short)12);
      writerBasedJsonGenerator1.writeString("M+e~Q=v4aAm^J;^#|z");
      writerBasedJsonGenerator1.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append(']');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3080, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(300);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(1);
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      bigDecimal1.plus();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      jsonGenerator0.writeArrayFieldStart("M+e~Q=v4aAm^J;^#|z");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("M+e~Q=v4aAm^J;^#|z");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator1.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator1.writeStringField("write a binary value", "write a binary value");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("Current context not an object but ", false);
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
      try { 
        writerBasedJsonGenerator0.writeString("write a binary value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStringField("Current context not an object but ", "2q1{4UXx#U");
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int0 = GeneratorBase.SURR2_LAST;
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 3);
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(45);
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStringField("Current context not an object but ", "2q1{4UXx#U");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.io.Serialized;tring", true);
      BigInteger bigInteger1 = BigInteger.TEN;
      jsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("Longest collision chain in symbol table (of size ");
      serializedString0.asUnquotedUTF8();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("Longest collision chain in symbol table (of size ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2210), (ObjectCodec) null, stringWriter0);
      int int0 = GeneratorBase.SURR1_LAST;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.getOutputBuffered();
      System.setCurrentTimeMillis(0L);
      try { 
        writerBasedJsonGenerator0.writeNumber((-9.223372036854776E18));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      stringWriter0.write(charArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2348, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)3773);
      writerBasedJsonGenerator0.writeNumber(67);
      SerializedString serializedString0 = new SerializedString(") does not override copy(); it has to");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        writerBasedJsonGenerator0.writeNumber((short)116);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(45);
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeStringField("Current context not an object but ", "2q1{4UXx#U");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.io.Serialized;tring", true);
      BigInteger bigInteger1 = BigInteger.TEN;
      jsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1385), (ObjectCodec) null, stringWriter0);
      stringWriter0.flush();
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 37 bytes (out of 44)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2295, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      StringWriter stringWriter1 = stringWriter0.append('?');
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigInteger bigInteger0 = BigInteger.ONE;
      stringWriter1.flush();
      BigDecimal bigDecimal1 = new BigDecimal(66);
      bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      jsonGenerator0.writeString("M+e~Q=v4aAm^J;^#|z");
      jsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      byte byte0 = (byte)125;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._flushBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 115, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      stringWriter0.append('?');
      stringWriter0.write(charArray0);
      String string0 = ", expecting field name";
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2285), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName(", expecting field name", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeBoolean(true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-2285), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeStartObject();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext3, (-1706), (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator1._verifyValueWrite(", expecting field name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[0] = 'i';
      charArray0[3] = 'R';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S%YSUtfN=eO,(b!7W*");
      writerBasedJsonGenerator0.writeNull();
      int int0 = 2689;
      int int1 = (-1698);
      BigDecimal bigDecimal0 = new BigDecimal((-1698));
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(1);
      bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter0.write("");
      writerBasedJsonGenerator0.writeNumberField("", (float) 3);
      writerBasedJsonGenerator0.writeFieldName("cMm.fasterxml.jackson.core.util.DefaultPrettmPrinSer");
      writerBasedJsonGenerator0._writeFieldName("cMm.fasterxml.jackson.core.util.DefaultPrettmPrinSer", true);
      writerBasedJsonGenerator0.writeNumber("3c|&m3w~v~b\"");
      stringWriter1.append('\'');
      writerBasedJsonGenerator0.writeStringField("t86!v`rO{TDR\"dY", (String) null);
      writerBasedJsonGenerator0.writeStringField("Can not ", (String) null);
      writerBasedJsonGenerator0.getOutputBuffered();
      try { 
        writerBasedJsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(5);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 910, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'Q';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 708, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField("&2(_??f", "");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1104, 0);
      writerBasedJsonGenerator0.writeNumber((short) (-1958));
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter(46);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2029), (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      writerBasedJsonGenerator0.disable(jsonGenerator_Feature0);
      writerBasedJsonGenerator0.writeRaw('7');
      iOContext0.allocReadIOBuffer((-2029));
      Base64Variant base64Variant0 = null;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      writerBasedJsonGenerator0.writeNull();
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)86;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0, (-565));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1061), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(56320);
      writerBasedJsonGenerator0._releaseBuffers();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 45, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(45);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(2);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimal2.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator1.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.util.JsonParserSequence", true);
      writerBasedJsonGenerator1._writePPFieldName("com.fasterxml.jackson.core.util.JsonParserSequence", false);
      writerBasedJsonGenerator1.writeNumber((long) 45);
      writerBasedJsonGenerator1._flushBuffer();
      writerBasedJsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.util.JsonParserSequence");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = 'W';
      charArray0[4] = 'm';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField(".yC*Z+]T|?1>", " bytes (out of ");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 123, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, (InputStream) null);
      int int0 = GeneratorBase.SURR2_FIRST;
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeStartObject();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      try { 
        writerBasedJsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw('x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigDecimal bigDecimal1 = new BigDecimal(3);
      writerBasedJsonGenerator0.writeString(charArray0, (-2001), (-581));
      stringWriter0.close();
      writerBasedJsonGenerator0.writeBoolean(false);
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[5] = 'u';
      charArray0[3] = 'A';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber((short) (-2794));
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0._characterEscapes = null;
      SerializedString serializedString0 = new SerializedString("l:");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)116);
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeNumber("l:");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("o7Q-fto&E.");
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 4);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.getOutputBuffered();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(45);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      System.setCurrentTimeMillis((-251L));
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 95, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 64, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("<>S^fKc*", true);
      jsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 45, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumberField("com.fasterxml.jackson.core.type.TypeReference", 3);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(45);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(2);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimal2.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger1 = BigInteger.TEN;
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      String string0 = "8";
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 76, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " ", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 29, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (byte[]) null, (short)123, (-2524));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      bigDecimal0.plus();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", false);
      writerBasedJsonGenerator1.writeNumber((long) 227);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-41);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1._writeBinary((Base64Variant) null, byteArray0, 56319, 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[5] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 0);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 17, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
      int int0 = GeneratorBase.SURR1_FIRST;
      SerializedString serializedString0 = new SerializedString("Current context not an object but");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString("<>S^fKc*");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(45);
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.getOutputBuffered();
      jsonGenerator0.writeNumber(39);
      jsonGenerator0.getCharacterEscapes();
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeNumber((short)116);
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      int int0 = 227;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      bigDecimal0.plus();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeArray(doubleArray0, 44, 2587);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = new BigDecimal(3989);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartArray();
      jsonGenerator0.writeNumber((short)64);
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = stringWriter0.append('u');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._writeFieldName(", expecting field name", true);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append(']');
      charArray0[0] = 'x';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3080, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(300);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(1);
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.writeRaw("M+e~Q=v4aAm^J;^#|z");
      bigDecimal1.plus();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.util.JsonParserSequence", true);
      writerBasedJsonGenerator0._writePPFieldName("UTF32_BE", false);
      writerBasedJsonGenerator0.writeNumber((long) 3080);
      writerBasedJsonGenerator1._flushBuffer();
      writerBasedJsonGenerator1._verifyPrettyValueWrite("62");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = new BigDecimal(3989);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("<>S^fKc*", true);
      writerBasedJsonGenerator0.close();
      int int0 = GeneratorBase.SURR1_FIRST;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[24];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 543, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber(5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 78, 78);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 56319);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 45, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(45);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(2);
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      bigDecimal2.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("Current context not an object but ", true);
      writerBasedJsonGenerator0.writeRaw("Current context not an object but ");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite(", expecting field name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      stringWriter0.write(charArray0);
      int int0 = 255;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      boolean boolean0 = true;
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      String string0 = "7V";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("7V", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-369), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField("7X&Hmt) }}A\"fl", "h1h");
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      writerBasedJsonGenerator0._writeFieldName("Unexpected end-of-input within/between ", false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3354));
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 0);
      writerBasedJsonGenerator0.writeNumber(29);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3961, (ObjectCodec) null, stringWriter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName("/0p7~sM&Zp", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-667));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1899));
      writerBasedJsonGenerator0.writeBoolean(true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-35), (ObjectCodec) null, stringWriter0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      writerBasedJsonGenerator0._writeFieldName("fa]l.,Vqc1D/4{t)[", true);
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeRawValue("hk<ho)&Kp-I<Q84r");
      SerializedString serializedString0 = new SerializedString("fa]l.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeArrayFieldStart("fa]l.,Vqc1D/4{t)[");
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString("Can not write a field name, expecting a value");
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("c3'q%7{1n_Se<LN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not c3'q%7{1n_Se<LN, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1.writeStringField("2q1{4UXx#U", "2q1{4UXx#U");
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
      writerBasedJsonGenerator1.writeRaw("Current context not an object but ");
      writerBasedJsonGenerator1.writeStartObject();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("write a binary value");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      String string0 = "9(`YG)m";
      byte[] byteArray0 = new byte[2];
      writerBasedJsonGenerator0.writeBinaryField("9(`YG)m", byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1.writeStringField("2q1{4UXx#U", "2q1{4UXx#U");
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
      writerBasedJsonGenerator1.writeRaw("Current context not an object but ");
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      try { 
        writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "(CTRL-CHAR, code ", false);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator1._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.getOutputBuffered();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      writerBasedJsonGenerator0.writeBinaryField("Current context not an object but ", byteArray0);
      int int0 = GeneratorBase.SURR2_LAST;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 4384, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '/';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(charArray0, (-2130), (-2130));
      writerBasedJsonGenerator0.writeNumber((double) 0);
      String string0 = "/}Q";
      StringWriter stringWriter1 = stringWriter0.append('?');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      char[] charArray0 = new char[6];
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(charArray0, 9, (-2130));
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR2_FIRST;
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStringField("Sf,:?K:po", (String) null);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '\'';
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber("3c|&m3w~v~b\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " bytes (out of ");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 112, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator1.writeStringField("\"F;VMf<_oh=~u|k", ".yC*Z+]T|?1>");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator1.writeString(charArray0, 0, 2049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1275);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1964, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeString("yth0J\"#");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('>');
      try { 
        writerBasedJsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2216), (ObjectCodec) null, stringWriter0);
      int int0 = GeneratorBase.SURR1_FIRST;
      writerBasedJsonGenerator0.writeNumber((short)51);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0._maximumNonEscapedChar = 3;
      writerBasedJsonGenerator0.writeStringField("b_SPGo:\".{|", "(T8|5+;r2C");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeNumber((-1L));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) '/';
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) '/';
      doubleArray0[6] = (double) '/';
      doubleArray0[7] = (double) '/';
      doubleArray0[8] = (-1.0);
      writerBasedJsonGenerator0.writeArray(doubleArray0, 3, 0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)116);
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 543, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      stringWriter0.append('x');
      writerBasedJsonGenerator0.writeNumber(5);
      Base64Variant base64Variant0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 78, 78);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2075), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 708, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField("&2(_??f", "");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1104, 0);
      writerBasedJsonGenerator0.writeNumber((short) (-1958));
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.io.JsonStringEncoder");
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 708, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField("&2(_??f", "");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 50, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2696, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR1_FIRST;
      SerializedString serializedString0 = new SerializedString(".yC*Z+]T|?1>");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeString(".yC*Z+]T|?1>");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", false);
      writerBasedJsonGenerator1.writeRaw("Current context not an object but ");
      writerBasedJsonGenerator1.writeStartObject();
      try { 
        writerBasedJsonGenerator1._verifyValueWrite("9nv9dlk4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not 9nv9dlk4, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter1.flush();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      try { 
        writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[4] = 'x';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 4);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)103;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-405), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(4);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-670), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      BigDecimal bigDecimal0 = new BigDecimal(22);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeStringField("write a binary value", ":+%=|TzRH(,EEG;");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)116);
      writerBasedJsonGenerator0.writeEndArray();
      jsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      stringWriter0.write(charArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3682), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 64, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = new BigDecimal((long) 0);
      bigDecimal2.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator1.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("write a binary value", true);
      writerBasedJsonGenerator1.writeString("8t#MIPf$InQh");
      SerializedString serializedString0 = new SerializedString("8t#MIPf$InQh");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[0];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((SerializableString) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocBase64Buffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)103;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-405), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3748), (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber(806);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 543, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber(5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 78, 78);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 56319);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", "{");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, (-46), (-1166));
      writerBasedJsonGenerator0.writeNumber((short)19);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 97, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 543, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", " bytes (out of ");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, (-2271), 0);
      writerBasedJsonGenerator0.writeNumber((short) (-1958));
      writerBasedJsonGenerator0.writeString("R[t]");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("{%15`HkCI_L#^DKY(");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 65535, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray1 = new char[7];
      charArray1[0] = '9';
      charArray1[1] = '9';
      charArray1[4] = '9';
      charArray1[3] = 'x';
      charArray1[4] = 'x';
      charArray1[5] = '9';
      charArray1[6] = '9';
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray1, 1, 403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, ']', (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, ']', (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(45);
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStringField("Current context not an object but ", "2q1{4UXx#U");
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.io.Serialized;tring", true);
      BigInteger bigInteger1 = BigInteger.TEN;
      jsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocBase64Buffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)103;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-405), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3748), (ObjectCodec) null, stringWriter1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(806);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 917, (ObjectCodec) null, stringWriter0);
      int int0 = GeneratorBase.SURR2_FIRST;
      SerializedString serializedString0 = new SerializedString("Current context not an object but");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("Current context not an object but", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal2 = new BigDecimal(3989);
      BigDecimal bigDecimal3 = new BigDecimal(792);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("<>S^fKc*", true);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator1._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.write(charArray0);
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[5] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter1.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", " bytes (out of ");
      writerBasedJsonGenerator0.writeRaw(" .ytej (out ofB", 3, 1);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.flush();
      Base64Variant base64Variant0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0._outputTail = 0;
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(1809.5551793591262);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      stringWriter0.write(charArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(87);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      StringWriter stringWriter1 = new StringWriter(11);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2348, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)2812);
      writerBasedJsonGenerator0.writeNumber(67);
      SerializedString serializedString0 = new SerializedString("l:");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1275);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1964, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, (InputStream) null);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      iOContext0.allocTokenBuffer();
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.max(bigDecimal0);
      bigDecimal0.multiply(bigDecimal1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      jsonGenerator0.writeNumber((short)39);
      jsonGenerator0.writeNumber(0.0F);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-650), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -650
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      boolean boolean0 = true;
      BigInteger bigInteger0 = BigInteger.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 61, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      short short0 = (short)91;
      writerBasedJsonGenerator0.writeNumber((short)169);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      BigDecimal bigDecimal1 = new BigDecimal(3);
      writerBasedJsonGenerator0.writeBinaryField("|D%&z>B=q(SDsPY/Uw", byteArray0);
      writerBasedJsonGenerator0.writeString(charArray0, (-2001), (-581));
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = new BigDecimal(880);
      BigDecimal bigDecimal1 = new BigDecimal(2);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writePPFieldName("<>S^fKc*", false);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-378), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField("7X&Hmt) }}A\"fl", "7X&Hmt) }}A\"fl");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 1615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", false);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.write("");
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[5] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter1.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", " bytes (out of ");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 1);
      writerBasedJsonGenerator0.writeNumber((short)3873);
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      byte[] byteArray0 = new byte[10];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 256, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 4);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '9';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = '9';
      stringWriter0.write(charArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "";
      stringWriter0.write("");
      writerBasedJsonGenerator0.writeNumberField("", 1059.5F);
      SerializedString serializedString0 = new SerializedString("cMm.fasterxml.jackson.core.util.DefaultPrettmPrinSer");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeFieldName("+@dAI+jBIQ@n(1%]- ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)103;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-405), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(4);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-670), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      iOContext0.allocTokenBuffer();
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'f';
      charArray0[3] = 'l';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      stringWriter0.write((-3175));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 2, 3);
      jsonGenerator0.writeRaw("Xe8G6-j\"l`v/L");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringWriter0.flush();
      stringWriter0.write(charArray0);
      stringWriter0.write("Can not write a field name, expecting a value");
      stringWriter0.append('{');
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 117, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      int int0 = 32;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2210), (ObjectCodec) null, stringWriter0);
      int int0 = GeneratorBase.SURR1_LAST;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1275);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeFieldName("n?5<Tkogot");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0._writeFieldName("", false);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.flush();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 13, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '/';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      writerBasedJsonGenerator0.writeString(charArray0, (-2130), (-2130));
      writerBasedJsonGenerator1.writeStartArray();
      iOContext0.constructTextBuffer();
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator1._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      BigDecimal bigDecimal0 = new BigDecimal(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2689, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      stringWriter0.write(charArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(87);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      StringWriter stringWriter1 = new StringWriter(11);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) dataInputStream0, (-4101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1544, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte)112;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 3, (byte)108);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1275);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1964, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 3, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeObjectFieldStart("");
      writerBasedJsonGenerator0.writeStringField("", "");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", 56320, 56320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "r|<]+", false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'u';
      charArray0[4] = 'Q';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.overrideStdFeatures((-784), 1138);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(92);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("8", 1, 56320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[11];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1965, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 3, (-450));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 0, 2863);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'N';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'V';
      charArray0[5] = 'u';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(14);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.multiply(bigDecimal0);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 8, (-1587));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter1.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", " bytes (out of ");
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 74, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 74
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "was expecting comma to separate ");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1637), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField(")]@%EY/%N|W\"", "");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      writerBasedJsonGenerator0.writeNumber((short) (-786));
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "";
      stringWriter0.write("");
      stringWriter1.append((CharSequence) "");
      writerBasedJsonGenerator0.writeNumberField("", 1059.5F);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeRaw("8", 0, 1);
      writerBasedJsonGenerator0._writeFieldName("8", false);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "'X+1HQ&2X-XIO/^S8L";
      writerBasedJsonGenerator0.writeBinaryField("'X+1HQ&2X-XIO/^S8L", byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2921, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeRaw("8", 0, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-1);
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0._writeFieldName("8", false);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)116);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      stringWriter0.write(charArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)23;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)23, 0, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = '`';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber((short) (-2808));
      writerBasedJsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = new SerializedString("l:");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      StringWriter stringWriter1 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 116, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.JsonProcessingException", "(~;ZOcRa]NY^M$l");
      writerBasedJsonGenerator0.writeNumber(116);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeStringField("", "\"F;VMf<_oh=~u|k");
      writerBasedJsonGenerator0.writeNumber(55296);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("DzAkZ}cm{g'(vK");
      stringWriter0.append((CharSequence) "DzAkZ}cm{g'(vK");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1038), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(208L);
      writerBasedJsonGenerator0.writeRaw("DzAkZ}cm{g'(vK", 1, 3);
      try { 
        writerBasedJsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = 'x';
      charArray0[3] = '/';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-246), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 83, (-468));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 84, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 13, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 3, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 52, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 3886, 0);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      writerBasedJsonGenerator0.writeNumber(12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56320, 400);
      byteArrayInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 78);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      jsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 73);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter(73);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 19, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0._writeFieldName(", expecting field name", false);
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeBoolean(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      writerBasedJsonGenerator0._outputTail = 99;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw("8", 0, 0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 24, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 4, (-729));
      writerBasedJsonGenerator0.writeNumber((short)23);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      iOContext0.allocReadIOBuffer();
      stringWriter0.append(']');
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber((short) (-2808));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2055), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeNumber((short)58);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 3, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('X');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1146), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeFieldName("z&T");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR2_FIRST;
      SerializedString serializedString0 = new SerializedString("write raw value");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._writePPFieldName("W;^,1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 13, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = bigDecimal0.multiply(bigDecimal0);
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, (-1555), 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.multiply(bigDecimal1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-650), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -650
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter1 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 110, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw('C');
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0);
      SerializedString serializedString0 = new SerializedString("Longest collision chain in symbol table (of size ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
      try { 
        writerBasedJsonGenerator0.writeFieldName("Longest collision chain in symbol table (of size ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter0.write("");
      stringWriter1.append((CharSequence) "");
      writerBasedJsonGenerator0.writeNumberField("", 1059.5F);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      writerBasedJsonGenerator0.writeNumber("3c|&m3w~v~b\"");
      try { 
        writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2001), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeBinaryField("Current context not an object but ", byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0._outputEnd = (-2001);
      String string0 = null;
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeStringField((String) null, "Current context not an object but ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-17);
      writerBasedJsonGenerator0.writeBinaryField("9(`YG)m", byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((-985.684F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = ')';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      iOContext0.constructTextBuffer();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw(charArray0, 50, 6000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = '?';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2689);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((int) 'u');
      bigDecimal0.multiply(bigDecimal1);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator1._writePPFieldName("Current context not an object but ", true);
      writerBasedJsonGenerator1.writeRaw("Current context not an object but ");
      writerBasedJsonGenerator1.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[3] = 'W';
      charArray0[4] = 'm';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField(".yC*Z+]T|?1>", " bytes (out of ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      try { 
        writerBasedJsonGenerator0.writeBinaryField(".yC*Z+]T|?1>", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      iOContext0.allocReadIOBuffer();
      StringWriter stringWriter1 = stringWriter0.append('?');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      int int0 = WriterBasedJsonGenerator.SHORT_WRITE;
      writerBasedJsonGenerator0.writeNumber(256);
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeNumber((short)4257);
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeNumber("Current context not an object but");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(820.3688402237935);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0._verifyValueWrite("?mA/-siaZ2*H");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not ?mA/-siaZ2*H, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      int int0 = GeneratorBase.SURR1_LAST;
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeStartObject();
      stringWriter0.write("");
      stringWriter1.append((CharSequence) "");
      writerBasedJsonGenerator0.writeNumberField("", 1059.5F);
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      writerBasedJsonGenerator0._writeFieldName("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", false);
      writerBasedJsonGenerator0.writeNumber("3c|&m3w~v~b\"");
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 0);
      try { 
        writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR2_FIRST;
      writerBasedJsonGenerator0.writeNumber(56320);
      SerializedString serializedString0 = new SerializedString("Current context not an object but");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString1 = new SerializedString("Current context not an object but");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeStartObject();
      try { 
        writerBasedJsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStringField("", "\"F;VMf<_oh=~u|k");
      writerBasedJsonGenerator0.writeNumber(55296);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 4);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 227, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-650), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -650
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[10];
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 255, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 64);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[2] = 'u';
      charArray0[3] = 'Q';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      char[] charArray1 = new char[1];
      charArray1[0] = 'N';
      writerBasedJsonGenerator0.writeString(charArray1, 0, (int) '\u0000');
      writerBasedJsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = GeneratorBase.SURR1_LAST;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (short)51, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(3236.0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR1_FIRST;
      writerBasedJsonGenerator0.writeString("<>S^fKc*");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber(26.839755);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[1];
      intArray0[0] = 126;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[4] = 'x';
      charArray0[1] = 'V';
      charArray0[2] = 'u';
      charArray0[3] = 'G';
      charArray0[4] = 'N';
      charArray0[5] = '9';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 564, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, (ObjectCodec) null, stringWriter0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, writerBasedJsonGenerator0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(55296);
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1954), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("write a binary value", 3, 1);
      writerBasedJsonGenerator0.writeNumber(2);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, (String) null, false, 'N', 4000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[4] = 'x';
      charArray0[5] = 'u';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 554);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 21, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeString(charArray0, 1, 4);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(1);
      char[] charArray0 = new char[6];
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 2772);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1017), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeStartObject();
      int int0 = GeneratorBase.SURR1_LAST;
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2120);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      String string0 = "Operation not supported by generator of type ";
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("Operation not supported by generator of type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("write a binary value");
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("zOeV5}[}2z7T", 1, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 1171, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 23, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeBinaryField("Current context not an object but ", byteArray0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 1, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2072, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      assertEquals(104, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Invalid UTF-8 start byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw(':');
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 29, (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder("DzAkZ}cm{g'(vK");
      stringWriter0.append((CharSequence) "DzAkZ}cm{g'(vK");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1038), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(208L);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 1000000, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      try { 
        writerBasedJsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeNumber((-416L));
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(97);
      StringWriter stringWriter1 = stringWriter0.append('{');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3929, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      stringWriter1.write(charArray0);
      writerBasedJsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
      try { 
        writerBasedJsonGenerator0.writeRaw("8", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
