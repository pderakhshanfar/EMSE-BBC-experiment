/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:08:25 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followud by@a digit");
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((short) (-2606));
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0017';
      int int0 = 616;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 616);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      int int0 = 11;
      uTF8JsonGenerator0.writeNumber(11);
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("H y");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-70);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)91, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1978, (ObjectCodec) null, mockPrintStream0);
      try { 
        uTF8JsonGenerator0.writeNumber("H y");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ObjectCodec objectCodec0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, pipedOutputStream0, byteArray0, 10, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      char[] charArray0 = new char[20];
      charArray0[0] = '\u0017';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("/u2Cq_EJ=}ca7@PK", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-78);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 90, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-3985), (-1093));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "write a boolean value");
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      mockPrintStream1.println((long) 1);
      uTF8JsonGenerator0.writeNumber((short) (byte)22);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 2);
      BigDecimal bigDecimal0 = new BigDecimal((-2185L));
      uTF8JsonGenerator0.writeNumber((float) (-2185L));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value", "Xm31ycjnT");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      serializedString0.appendQuotedUTF8(byteArray0, 1027);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(1079L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(" at ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile(" at ", " at ", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)51;
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1156, false);
      uTF8JsonGenerator0.writeNumber((-991L));
      uTF8JsonGenerator0.writeStartObject();
      Random.setNextRandom((-2514));
      try { 
        uTF8JsonGenerator0.writeNumber(153.13756F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 0);
      uTF8JsonGenerator0._verifyValueWrite("/");
      uTF8JsonGenerator0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "$Y:[_", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-910);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "$Y:[_");
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-910), (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 536870910, true);
      byteArrayBuilder0.completeAndCoalesce(50);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[11];
      mockPrintStream0.print((-609L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      uTF8JsonGenerator0.writeString(charArray0, 0, 1);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('n');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      int int0 = 57;
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      iOContext0.allocReadIOBuffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      mockPrintStream0.write(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray1, 1, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-17), (ObjectCodec) null, mockPrintStream1, byteArray1, (-851), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, 40, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 138, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[3] = '\u0017';
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1093));
      mockPrintStream1.println((Object) bufferRecycler0);
      uTF8JsonGenerator0.writeFieldName("");
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockFile0.toPath();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)18, false);
      uTF8JsonGenerator0.writeBinary(byteArray0, 55296, (-578));
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeNumber(1971L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("`5?0Uc)y5");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("`5?0Uc)y5");
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 141, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      uTF8JsonGenerator0.writeStartArray();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeNumber((-1649));
      uTF8JsonGenerator0.writeFieldName("q<^Vp(");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[3] = '\u0017';
      uTF8JsonGenerator0.writeNumber((short) (-4750));
      BigInteger bigInteger0 = BigInteger.ONE;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, printStream0, byteArray0, (byte)116, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('V');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 26, true);
      String string0 = "UUx%~hxYs";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rvte a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)34;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      printStream0.print((Object) "Vns&J");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 96, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName(")R;+}e6L>/uh>=gM-gd");
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 138, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      uTF8JsonGenerator0.writeString(charArray0, 2, 1);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (float) 1);
      int int0 = 2059;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2059, 334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2059
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("%@UAf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("%@UAf");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte) (-95);
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(3970, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("%@UAf");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      String string0 = "&:l@Qt]}C;<#g";
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 89, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 89, true);
      iOContext1.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("): only regular white space (\r, \n, \t) is allowed between tokens");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName("C!\"Uo1>9,enb^");
      System.setCurrentTimeMillis((byte)18);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-660L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[3] = '\u0017';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1097));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
      System.setCurrentTimeMillis(1000L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      BigInteger bigInteger1 = BigInteger.ONE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('n');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 42, 42);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("%@UAf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("%@UAf");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte) (-95);
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(3970, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName(", expecting field name");
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('V');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000000, (ObjectCodec) null, printStream0, byteArray0, 55296, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      uTF8JsonGenerator0.writeRawValue(charArray0, 115, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      String string0 = "9";
      MockFile mockFile1 = new MockFile(mockFile0, "9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('n');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      int int0 = 49;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 49);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, (byte) (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "}:$l}2iuq#j8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeNumber("}:$l}2iuq#j8");
      uTF8JsonGenerator1.writeFieldName("}:$l}2iuq#j8");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("%@UAf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("%@UAf");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte) (-95);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 470, (-128));
      iOContext0.allocNameCopyBuffer((byte) (-95));
      uTF8JsonGenerator0.writeNumberField("%@UAf", (float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("rvte a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("rvte a boolean value");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "rvte a boolean value");
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)34;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 96, true);
      BigInteger bigInteger0 = BigInteger.valueOf(56320);
      bigInteger0.getLowestSetBit();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1._flushBuffer();
      uTF8JsonGenerator1.writeFieldName("Uf\"lo8nkcI0vG8*h");
      uTF8JsonGenerator1.writeStartObject();
      try { 
        uTF8JsonGenerator1.writeString("rvte a boolean value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      mockPrintStream0.print((long) 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, pipedOutputStream0, byteArray0, 127, false);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1094));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      int int0 = (-3753);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3753), (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "GP$FosF4!");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[11];
      mockPrintStream0.print((-627L));
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      uTF8JsonGenerator0.writeString(charArray0, 0, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2949), (ObjectCodec) null, mockPrintStream1, byteArray0, 1187, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName("7T-!");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      char char0 = 'Q';
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      mockFile1.toPath();
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-73);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("%@UAf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("0UoOl}:;f%>^bs*h~");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 365, (ObjectCodec) null, mockPrintStream1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-85);
      mockRandom1.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(56319, mockRandom0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-73);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-7), true);
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("@AjtyX,.fijwH3]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('c');
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", false);
      byte[] byteArray0 = new byte[1];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, printStream0, byteArray0, 16, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UUx%~hxYs");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 144, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber("YSw_BVST?=2p8a");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "%@UAf";
      MockFile mockFile0 = new MockFile("%@UAf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("%@UAf");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte) (-95);
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(3970, mockRandom0);
      bigInteger0.toString(1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("%@UAf", (float) 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-85), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, " ^)A)c$1Qbk#k-");
      mockFile0.renameTo(mockFile1);
      MockFile mockFile2 = new MockFile(mockFile0, "Xm1ycjnT");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2961, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 10, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 481);
      uTF8JsonGenerator0.writeBinary(byteArray0, 128, (-1561));
      uTF8JsonGenerator0.writeRaw("*z{J}iUaCgn8|UM");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('e');
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("expected a hex-digit for character escape sequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2733), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2733
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1017), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[5];
      iOContext0.allocNameCopyBuffer(41);
      charArray0[0] = 'D';
      charArray0[1] = 'P';
      charArray0[2] = 's';
      charArray0[3] = 'p';
      charArray0[4] = '2';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      String string0 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("ALLOW_UNQUOTED_CONTROL_CHARS", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockPrintStream0.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 5, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 37, (-348));
      uTF8JsonGenerator0.writeStartArray();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-73);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 32, 2640);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-590));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 496, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2339), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonEncoding");
      char[] charArray1 = new char[2];
      charArray1[0] = ';';
      charArray1[1] = '#';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray1, 1, 269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      char char0 = 'Q';
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      mockFile1.toPath();
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)18;
      byteArray0[4] = (byte) (-73);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 52, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockFile mockFile2 = new MockFile("write a boolean value", "},y'*1");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile2);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)69;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-56), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a boolean value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -56
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(727.544273293995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-56);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, mockPrintStream1, byteArray0, 5, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Operation not supported by parser of type ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1347), 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeRaw('P');
      uTF8JsonGenerator0.writeBoolean(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 1382, (byte) (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = ':';
      charArray0[2] = '2';
      charArray0[3] = '!';
      uTF8JsonGenerator0.writeRaw(charArray0, 9, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      PrintStream printStream0 = mockPrintStream0.append('2');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a boolean value", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)14, (ObjectCodec) null, printStream0, byteArray0, (-2432), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("_U=S?X&#R]5&H3cN@");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2432
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-41), (ObjectCodec) null, pipedOutputStream0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(56320, mockRandom0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      char char0 = 'Q';
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byte byte0 = (byte)75;
      mockPrintStream0.println((Object) printStream0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, printStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 761, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)75, false);
      String string1 = "|\\MBMoPK{8";
      uTF8JsonGenerator0.writeNumberField("|MBMoPK{8", (float) 0);
      uTF8JsonGenerator0.writeRaw('Q');
      uTF8JsonGenerator0.writeNumber((short) (-434));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = new SerializedString("|MBMoPK{8");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 496, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 496, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 255, false);
      String string0 = null;
      int int0 = (-1082);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "wBi*e o bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}:$l}2iuq#j8/wBi*e o bPolan value");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}:$l}2iuq#j8");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(124);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)18, (ObjectCodec) null, mockPrintStream1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}:$l}2iuq#j8", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-19);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      printStream0.print('Q');
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (-804));
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("<");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-804), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}:$l}2iuq#j8", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 49, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("datagJ9o|XYRS");
      uTF8JsonGenerator0.writeString("write a boolean value");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("&:l@Qt]}C;<#g");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("datagJ9o|XYRS");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1439), (ObjectCodec) null, mockPrintStream1, byteArray0, (-1439), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockFile0.mkdirs();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}:$l}2iuq#j8", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      charArray0[3] = 'd';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "9&!LI~UxOM+uc";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9&!LI~UxOM+uc");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "Xm1ycjnT");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      mockPrintStream0.checkError();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1028), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumberField("Infinity", 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}:$l}2iuq#j8", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-627L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = '/';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1097));
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-906), (-1097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1228), (ObjectCodec) null, printStream0, byteArray0, (byte)18, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(1540L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("write a boolean value");
      String string1 = "&:l@Qt]}C;<#g";
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&:l@Qt]}C;<#g", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 77, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(56320);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("^g-?m:K8");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sequenceInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      SerializedString serializedString0 = new SerializedString("write a number");
      SerializedString serializedString1 = new SerializedString("Can not ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('3');
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)14, false);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      printStream0.print((Object) "write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeNumber((short)8);
      uTF8JsonGenerator0.writeString("write a boolean value");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber((long) 1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-2766.3945F));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      mockPrintStream1.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      mockFile1.setReadable(false, false);
      uTF8JsonGenerator0.writeString(charArray0, 67, (-590));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeNumber(338);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("v=/M;^3a=[UCk%(1", 3, 5801);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      String string0 = "&:l@Qt]}C;<#g";
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      printStream0.println((-9223372036854775808L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (float) (byte)34);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1._verifyValueWrite("Current context not an ARRAY but ");
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('*');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 102, true);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      charArray0[4] = ']';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 56, 128);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      printStream0.print((Object) "Vns&J");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeNumber((short)8);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(56320);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1._flushBuffer();
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      printStream0.print((Object) "Vns&J");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeNumber((short)8);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(56320);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1._flushBuffer();
      uTF8JsonGenerator1.writeFieldName("Uf\"lo8nkcI0vG8*h");
      uTF8JsonGenerator0.writeNumber((float) 3);
      System.setCurrentTimeMillis((-281L));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "v=/M;^3a=[UCk%(1";
      MockFile mockFile0 = new MockFile("Failed rehash(): old count=");
      MockFile mockFile1 = new MockFile(mockFile0, " slots -- suspect a DoS attack based on hash collisions.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Failed rehash(): old count=");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream("v=/M;^3a=[UCk%(1");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream2);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("G!9^:2] uF0F-h", (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", false);
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockPrintStream1, byteArray0, 26, false);
      uTF8JsonGenerator0.writeNumber("}:$l}2iuq#j8");
      uTF8JsonGenerator0.writeFieldName("UUx%~hxYs");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-4737), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value/write a boolean value");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)14, false);
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (float) (byte)34);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeNumber("&:l@Qt]}C;<#g");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializedString serializedString0 = new SerializedString("&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&:l@Qt]}C;<#g";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "&:l@Qt]}C;<#g";
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3002), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      mockPrintStream1.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      mockFile1.setReadable(false, false);
      uTF8JsonGenerator0.writeString(charArray0, 67, (-590));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeNumber(338);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("v=/M;^3a=[UCk%(1", 3, 5801);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream2, byteArray0, 128, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("", 3);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger2);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&:lW@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      SerializedString serializedString0 = new SerializedString("&:lW@Qt]}C;<#g");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      String string0 = "Vns&J";
      printStream0.print((Object) mockFile0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1322, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      printStream0.print((Object) "Vns&J");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeNumber((short)8);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(56320);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString("6v/X OZwG");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1._flushBuffer();
      uTF8JsonGenerator1.writeFieldName("Uf\"lo8nkcI0vG8*h");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumberField("", 91);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = new SerializedString("&:l@Qt]}C;<#g");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('3');
      uTF8JsonGenerator1.writeNumber((long) (byte)57);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockPrintStream1, byteArray0, 26, false);
      uTF8JsonGenerator0.writeNumber("UUx%~hxYs");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("2}~n3th)MOYY/EA]k4");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-72));
      uTF8JsonGenerator0._verifyValueWrite("[o*yOmo>N\",k*]} t");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(10L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "v=/M;^3a=[UCk%(1";
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      mockPrintStream1.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      int int0 = 67;
      uTF8JsonGenerator0.writeString(charArray0, 67, (-590));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-627L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1193);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = '/';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1167, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)14, false);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeNumber((short) (byte)48);
      BigInteger bigInteger0 = BigInteger.ZERO;
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeNumberField("", 15);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      bigInteger0.doubleValue();
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber((long) 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.setScale((-1121));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw(".");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, printStream0, byteArray0, 12, true);
      uTF8JsonGenerator0.writeNumberField("B{3pMC1i^%sm'", (-846.6382F));
      uTF8JsonGenerator0.writeRaw('}');
      uTF8JsonGenerator0.writeNumber((short) (byte)50);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      BigInteger bigInteger2 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      mockPrintStream1.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, 67, (-590));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeNumber(338);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.println('o');
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber((long) 1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-12), (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("`;95(asI");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      printStream0.print((-3223L));
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 200, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeNumber((short)8);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(56320);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockFile mockFile2 = new MockFile("bd&");
      MockFile mockFile3 = new MockFile("Xm1ycjnT");
      MockFile mockFile4 = new MockFile(mockFile3, "bd&");
      MockPrintStream mockPrintStream2 = new MockPrintStream("Xm1ycjnT");
      char char0 = 'Q';
      mockPrintStream1.append('Q');
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockPrintStream1);
      mockPrintStream2.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream3);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("IQVHfSHJ6+)iK_Ba", "write a boolean value");
      MockFile mockFile1 = new MockFile("<1Bm[z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)14, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      uTF8JsonGenerator0._flushBuffer();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", 0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((double) (byte)34);
      uTF8JsonGenerator0.writeNumber((-128));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("+|uUXC9Yfm^Y");
      SerializedString serializedString0 = new SerializedString("v=/M;^3a=[UCk%(1");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("v=/M;^3a=[UCk%(1");
      MockFile mockFile1 = new MockFile(mockFile0, "v=/M;^3a=[UCk%(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((double) (byte)34);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("+|uUXC9Yfm^Y");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)89, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte byte0 = (byte)14;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)14, false);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      SerializedString serializedString0 = new SerializedString("&:lW@Qt]}C;<#g");
      SerializedString serializedString1 = new SerializedString(".VCw.)Z$p");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-6", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFile0.mkdir();
      mockPrintStream0.print(31L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-6");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-19);
      BigInteger bigInteger0 = BigInteger.ZERO;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'K';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 224, (ObjectCodec) null, (OutputStream) null, byteArray0, 200, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (byte)32, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)52, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)48, false);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("r");
      String string0 = "JNs]9P3N";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("JNs]9P3N", 311);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("datagJ9o|XYRS");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[6] = (byte) (-123);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("|~\"");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)32);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'i';
      charArray0[2] = 'b';
      charArray0[3] = ']';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-146), 706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -146
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-3), (ObjectCodec) null, mockPrintStream0, byteArray0, 140, true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("nly(W|y`?fK2wl.^2e", 2, (int) (byte) (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-6", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFile0.mkdir();
      mockPrintStream0.print(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      String string0 = "Too few bytes available: missing ";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Too few bytes available: missing ", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.mark(1000000000);
      byteArrayInputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sf5E=Ivh#.W/Rvy 7ck", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 7, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((-2869L));
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = new SerializedString(".VCw.)Z$p");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, mockPrintStream0, byteArray0, 262, false);
      uTF8JsonGenerator0.writeNumberField("write a boolean value", 44);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("write a null");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print((long) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-394.939F));
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeBoolean(false);
      char char0 = '1';
      BigInteger bigInteger0 = BigInteger.valueOf(0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-233), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream0.close();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 202, (ObjectCodec) null, mockPrintStream0, byteArray0, 3292, false);
      char[] charArray0 = new char[2];
      charArray0[1] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-73), (-590));
      SerializedString serializedString0 = new SerializedString("T?");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('\u0000');
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("-6", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber((float) 0L);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('o');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('I');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, (byte)75, false);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream0.close();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 202, (ObjectCodec) null, mockPrintStream0, byteArray0, 3292, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-73), (-590));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('Q');
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.close();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byte byte1 = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 262, false);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)92, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 39, 50);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      String string0 = "&:l@Qt]}C;<#g";
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-19), (ObjectCodec) null, printStream0, byteArray0, (byte) (-19), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("&:l@Qt]}C;<#g");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print((long) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-394.939F));
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(0.0F);
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 15, 2047);
      try { 
        uTF8JsonGenerator0.writeFieldName(", expecting field name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
      String string0 = "u^-Gd\"**BMA?";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 515, (ObjectCodec) null, printStream0, byteArray0, 115, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte) (-1));
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '}';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 515, 2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5753), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 240, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeNumberField(", expecting field name", 38);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}:$l}2iuq#j8", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(")>H(8')xk,0{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      byte byte0 = (byte) (-3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1137), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-3), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 2);
      SerializedString serializedString0 = new SerializedString(";%wrDZ|030");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 15, 2047);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumberField("&:l@Qt]}C;<#g", (-1774));
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1228), (ObjectCodec) null, printStream0, byteArray0, 386, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte) (-73));
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 21, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-19);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((-506L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 101, (int) (byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)18, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("T*nSdu");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 32, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2541, 338);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializedString serializedString0 = new SerializedString("-1");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(8);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte) (-33), (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, printStream0, byteArray0, 8000, false);
      uTF8JsonGenerator0.writeNumber("&:l@Qt]}C;<#g");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2980, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      char char0 = 'Q';
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-33), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString(", expecting field name");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, mockPrintStream0, byteArray0, 1318, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("MvNvKIMANFBiI%dMT|/Can not write a field name, expecting a value");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "En34w");
      MockFile mockFile0 = new MockFile("MvNvKIMANFBiI%dMT|", "Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print(52L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1891.8857F));
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('o');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, (-150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2039, (ObjectCodec) null, (OutputStream) null, byteArray0, 4856, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharBuffer charBuffer0 = CharBuffer.allocate(271);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 481, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2339), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonEncoding");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-2339));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 55;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      int int1 = 44;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 44, 2797);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-33), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)33;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-123), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream0.close();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byte byte1 = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, mockPrintStream0, byteArray0, 262, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.print((-627L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short)1165);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0017';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'K';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, (int) (byte)52, 1533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      File file0 = MockFile.createTempFile("&:l@Qt]}C;<#g", ";/iW");
      MockFile mockFile1 = new MockFile(file0, ";/iW");
      MockPrintStream mockPrintStream0 = new MockPrintStream("&:l@Qt]}C;<#g");
      PrintStream printStream0 = mockPrintStream0.append('$');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print(0L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1534, (ObjectCodec) null, printStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-614));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "write a boolean value";
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)0, 200);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0xc8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byte byte1 = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, mockPrintStream0, byteArray0, 262, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2325, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)18;
      byte byte0 = (byte)75;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[1];
      printStream0.flush();
      charArray0[0] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2498, 1798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2498
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 2);
      BigDecimal bigDecimal0 = new BigDecimal((-2185L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      System.setCurrentTimeMillis(1023);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonEncoding", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 76, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 76, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-19);
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)75, 0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArrayBuilder0.write(1971);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[1] = 'z';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-2251), 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2251
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 481);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('`');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      int int0 = 33;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((float) (byte)75);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('Q');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeRaw('P');
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 12, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream1.print((long) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 896, (ObjectCodec) null, mockPrintStream1, byteArray0, 1023, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-3));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(2);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber("'\"E4V}LH7GFx");
      uTF8JsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeRaw("start an array", 0, 1);
      uTF8JsonGenerator0.writeFieldName("Y<~${IjqoWeJYEb");
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-33), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("O-Xbu{", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockPrintStream1, byteArray0, 26, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("UUx%~hxYs");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&:l@Qt]}C;<#g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, false);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("Current token (%s) not of boolean type");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-435.885));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      mockFile0.toURI();
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (float) (byte)34);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte)117);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString(") does not override copy(); it has to");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a boolean value", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "{L?Djc/P\"(OJB9-";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2GZ$7aEhR");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "{L?Djc/P\"(OJB9-", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2GZ$7aEhR");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      StringWriter stringWriter0 = new StringWriter((byte)0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 338, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("^I@H)%| NCSXL}T");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, mockPrintStream0, byteArray0, 1318, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyPrettyValueWrite("&:l@Qt]}C;<#g", 0);
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(">\u0004xZ>r%@fNpaNk]Rx8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 775, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("v", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)18, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1198), false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("}:$l}2iuq#j8", "write a bPolan value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a bPolan value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('c');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a bPolan value", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockPrintStream1, byteArray0, 26, true);
      uTF8JsonGenerator0.writeNumber("UUx%~hxYs");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (-2));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-394.939F));
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('1');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (float) (byte)34);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte)117);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString(") does not override copy(); it has to");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, (-784), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 115, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)18, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      uTF8JsonGenerator0.writeNumber("&:l@Qt]}C;<#g");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)18;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-60), (ObjectCodec) null, printStream0, byteArray0, (byte)37, false);
      uTF8JsonGenerator0.writeNumber((short)686);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, (-784), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-303), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("&:l@Qt]}C;<#g");
      uTF8JsonGenerator0.writeNumber("BW2zWa@WJ&+M{[[Z:z1");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1228, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1228
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("write a boolean value", (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber("'\"E4V}LH7GFx");
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a number", 3, (-1662));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value", "write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)18, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)18, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString(") does not override copy(); it has to");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a boolean value");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((double) (byte)34);
      uTF8JsonGenerator0.writeNumber((-128));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      byte byte0 = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('`');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-472), (ObjectCodec) null, mockPrintStream1, byteArray0, 21, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, (-784), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-303), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("&:l@Qt]}C;<#g");
      uTF8JsonGenerator0.writeNumber("BW2zWa@WJ&+M{[[Z:z1");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte byte0 = (byte) (-3);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile((File) null, "");
      File file0 = MockFile.createTempFile(";wv\u0003Wi^+BTy>'u~h'", "{3YvS\"O[]_ZI-rl(Sl", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      mockFileOutputStream0.release();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";wv\u0003Wi^+BTy>'u~h'", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4468), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1960));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, (-784), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-303), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("&:l@Qt]}C;<#g");
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 200, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-118);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 481, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2339), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonEncodinh");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)62, true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      mockPrintStream0.print((long) 2);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-394.939F));
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('1');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, (-150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      uTF8JsonGenerator0.writeRawValue(charArray0, 1, (-527));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-116);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = new BigDecimal((double) 57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2GZ$7aEhR");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2298), (ObjectCodec) null, (OutputStream) null, byteArray0, 56319, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)52;
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2846L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-303), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, (-784), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("r#Kvr;{?o", "M>m9xWxY&95I2mp!N", false, '`', 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 17)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 2, (byte)75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockFile mockFile2 = new MockFile("write a boolean value", "&:l@Qt]}C;<#g");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.print((long) 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      uTF8JsonGenerator0.writeNumber((short)54);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber((short) (byte) (-17));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyValueWrite("_-:,)4b<>1hMNO");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-116);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((-613.6F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 63);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "v", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-2339), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2339
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      boolean boolean0 = false;
      sequenceInputStream0.mark(0);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Sf5E=Ivh#.W/Rvy 7ck";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sf5E=Ivh#.W/Rvy 7ck", false);
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      mockFileOutputStream0.getChannel();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 481);
      uTF8JsonGenerator0.writeRaw("*z{J}iUaCgn8|UM");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('e');
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 481, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2339), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonEncoding");
      assertEquals(41, uTF8JsonGenerator0.getOutputBuffered());
      
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append('c');
      mockPrintStream1.append('{');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw('g');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 'g', (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[3] = '`';
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte byte0 = (byte) (-12);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-12), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-303), false);
      char[] charArray1 = new char[3];
      charArray1[0] = 'l';
      charArray1[1] = '`';
      charArray1[2] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray1, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -303
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 2634;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-12);
      int int1 = 1318;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, mockPrintStream0, byteArray0, 1318, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 56319;
      intArray0[1] = 3;
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1318, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, mockPrintStream0, byteArray0, 1318, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 56319;
      intArray0[1] = 3;
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1318, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      mockPrintStream0.print((long) 2);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)45);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(3L, mockFile0.length());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      mockPrintStream0.print((long) 2);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)45);
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '#';
      charArray0[2] = 'K';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, (int) (byte) (-60), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -60
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, mockPrintStream0, byteArray0, 1318, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-352), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2442));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -352
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)36;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)81);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw('E');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeNumber((short)4);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 33);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 481, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 481, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 481, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 481);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('`');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)36;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)81);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('E');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      char char0 = ']';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("n>|%q", "", false, ']', 103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 481, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1023, 127, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2339), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonEncoding");
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeBoolean(true);
      assertEquals(46, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "v";
      StringReader stringReader0 = new StringReader("v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 127, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2591), 0, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-321), (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2537, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a boolean value");
      MockFile mockFile1 = new MockFile(mockFile0, "&:l@Qt]}C;<#g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('Q');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a boolean value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3), true);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 5513, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)36;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)81);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('E');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 286, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-65), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.mark(0);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sf5E=Ivh#.W/Rvy 7ck", false);
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      mockFileOutputStream0.getChannel();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
      int int0 = 4948;
      pipedInputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4948, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-14);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)45);
      assertArrayEquals(new byte[] {(byte)52, (byte)53, (byte)97, (byte) (-116), (byte)52, (byte) (-60), (byte) (-14)}, byteArray0);
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 445, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._verifyValueWrite("g]s");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(633L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      StringWriter stringWriter0 = new StringWriter(46);
      StringBuilder stringBuilder0 = new StringBuilder("1/N3c>NTyR[$`l N");
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ", expecting field name", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, ", expecting field name", true);
      iOContext1.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(", expecting field name", "JVlQGKf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte byte0 = (byte)97;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, (byte[]) null, (byte)52, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('I');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2634, (ObjectCodec) null, printStream0, byteArray0, 1318, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, (byte[]) null, 2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
