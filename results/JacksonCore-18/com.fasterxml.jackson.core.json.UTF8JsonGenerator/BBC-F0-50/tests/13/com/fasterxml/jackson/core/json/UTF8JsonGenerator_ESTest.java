/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:09:05 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      int int0 = GeneratorBase.SURR1_LAST;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1834), (ObjectCodec) null, mockPrintStream0, byteArray0, (-2159), false);
      String string1 = "k_`2pr6O";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("k_`2pr6O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2159
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "ELpY+Y+\"S3w@NCuFuI";
      String string1 = "u&vyvOA_83~";
      uTF8JsonGenerator0.writeFieldName("u&vyvOA_83~");
      uTF8JsonGenerator0.writeNumber("ELpY+Y+\"S3w@NCuFuI");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int int0 = 28;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 116, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "WqCdi";
      MockFile mockFile0 = new MockFile("WqCdi", "WqCdi");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6433), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("ELpY+Y+\"S3w@NCuFuI");
      uTF8JsonGenerator0.writeNumber("ELpY+Y+\"S3w@NCuFuI");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 111, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1541), (ObjectCodec) null, (OutputStream) null);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("a");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      jsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw("7NRxJMUJ>1");
      jsonGenerator0.writeFieldName("ELpY+Y+\"S3w@NCuFuI");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-3058), (ObjectCodec) null, dataOutputStream0, byteArray0, 56319, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)101, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("OdN,yKSs.*");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName("S.e~`lS>X.GPEjM");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      tokenFilter2.includeElement(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream("OdN,yKSs.*");
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream2, byteArray0, 128, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      iOContext0.allocNameCopyBuffer((byte)0);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[8] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(",although was supposed to have one");
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "OdN,yKSs.*");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 52, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("&LcP");
      MockPrintStream mockPrintStream0 = new MockPrintStream(",msbj~DB@+GAi@:=");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      short short0 = (short) (-4442);
      uTF8JsonGenerator0.writeNumber((short)411);
      StringWriter stringWriter0 = new StringWriter();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-4431), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)114, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("qaK|tKlR", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '[';
      mockPrintStream0.println(charArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1226);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("'");
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)61;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream0, byteArray0, 3062, false);
      uTF8JsonGenerator0.writeNumber((-2905));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeFieldName("write a binary value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("write a binary value", (int) (byte)123, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocTokenBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      dataOutputStream0.writeUTF("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw("7NRxJMUJ>1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-65);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte) (-23));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      mockFile0.setReadOnly();
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)23;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      int int0 = (-50);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 278, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 97, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("@wzv)NRwyT<,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("WqCdi", "WqCdi");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1435), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)86, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("WqCdi");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      String string0 = "q~a2U#LqVXe.'A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("q~a2U#LqVXe.'A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("q~a2U#LqVXe.'A");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("q~a2U#LqVXe.'A", 48, 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-663), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 19, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 65535, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter3, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream("OdN,yKSs.*");
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 1, (-1072));
      uTF8JsonGenerator0.flush();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("OdN,yKSs.*");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, mockFileInputStream0, byteArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-87), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      charsToNameCanonicalizer0.makeChild((-326));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-39), (ObjectCodec) null, mockPrintStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 65535, (-613));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 5, true);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      uTF8JsonGenerator0.writeFieldName("%Te0EZ'FA");
      try { 
        uTF8JsonGenerator0._writePPFieldName("~+z");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("qaK|tKlR", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      uTF8JsonGenerator0._verifyValueWrite("qaK|tKlR");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("qaK|tKlR");
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("qaK|tKlR");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)58;
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("m-?ALZB3u2;[X");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, dataOutputStream0, byteArray0, 2397, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      int int0 = (-4288);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter3, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1334, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockPrintStream1, byteArray0, 1334, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString("OdN,yKSs.*");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      uTF8JsonGenerator0.writeRaw('%');
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.json.UTF8JsonGenerator", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println((-174.23724));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, mockPrintStream0, byteArray1, 120, true);
      uTF8JsonGenerator0._verifyValueWrite("version");
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)58);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("L8QS|q,=X(S!,Oqhs^");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("=->");
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("=->");
      byte[] byteArray0 = new byte[17];
      byteArray0[16] = (byte)114;
      mockPrintStream0.println();
      byteArray0[3] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("Null String illegal for SerializedString");
      uTF8JsonGenerator0.writeFieldName("Null String illegal for SerializedString");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2814.8533F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[2] = (byte) (-102);
      mockPrintStream0.print(")");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 19, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jsonGenerator0.writeNumber(bigDecimal0);
      try { 
        uTF8JsonGenerator0._verifyValueWrite("OdN,yKSs.*");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not OdN,yKSs.*, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("qaK|tKlR", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      uTF8JsonGenerator0._verifyValueWrite("qaK|tKlR");
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3888, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3888
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      StringReader stringReader0 = new StringReader("ZG4FcI:+V");
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("O]TR");
      mockPrintStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2647, (ObjectCodec) null, mockPrintStream0, byteArray0, (-387), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(", expecting field name", 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -387
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("ELpY+Y+\"S3w@NCuFuI");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-32);
      BigDecimal bigDecimal0 = new BigDecimal((-2272));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byteArray0[2] = (byte)101;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 2395);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      DefaultPrettyPrinter.NopIndenter defaultPrettyPrinter_NopIndenter0 = DefaultPrettyPrinter.NopIndenter.instance;
      defaultPrettyPrinter0.indentObjectsWith(defaultPrettyPrinter_NopIndenter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("eH:]B:<$'yM");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator1._verifyPrettyValueWrite("Illegal character (", 3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[7] = (byte)47;
      mockFile0.setReadOnly();
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)63;
      uTF8JsonGenerator0.writeNumber((float) (byte)120);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      String string0 = ",7+50";
      MockFile mockFile0 = new MockFile("6", ")");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 10, true);
      String string1 = "Dbl*Z HJDHPdW-Z9,";
      try { 
        uTF8JsonGenerator0.writeString("Dbl*Z HJDHPdW-Z9,");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      String string0 = "write a raw (unencoded) value";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a raw (unencoded) value");
      mockPrintStream0.print((double) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 459, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("qaK|tKlR", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      uTF8JsonGenerator0._verifyValueWrite("qaK|tKlR");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("qaK|tKlR");
      uTF8JsonGenerator0.writeString("OdN,yKSs.*");
      SerializedString serializedString0 = new SerializedString("qaK|tKlR");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("ELpY+Y+\"S3w@NCuFuI");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)101;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 2395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter3, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.json.UTF8JsonGenerator", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/com.fasterxml.jackson.core.json.UTF8JsonGenerator0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Dm@OpQ@Dx'ao$");
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)58);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeString("OdN,yKSs.*");
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 371, false);
      String string0 = "#3=";
      uTF8JsonGenerator0._verifyValueWrite("#3=");
      BigDecimal bigDecimal0 = new BigDecimal(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[2] = (byte) (-102);
      mockPrintStream0.print(")");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 19, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("");
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '7';
      charArray0[2] = 'J';
      charArray0[3] = 'l';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw(charArray0, 19, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a raw (unencoded) value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockPrintStream0, byteArray0, 51, false);
      uTF8JsonGenerator0._verifyValueWrite("UzG=");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("m\"#,zk+.@^HkV~f[;:?");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)114;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-96), 8000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a raw (unencoded) value");
      mockPrintStream0.print((double) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 459, false);
      uTF8JsonGenerator0.writeNumber(") out of range of Java byte");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '[';
      charArray0[3] = '\\';
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a raw (unencoded) value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockPrintStream0, byteArray0, 51, false);
      uTF8JsonGenerator0._verifyValueWrite("UzG=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57, 2381);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "' (code ", false, 'Z', 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("0~iKMr9a>Q)rhQ_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((double) 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3598, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("(&2R,Hhy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      String string0 = "gk";
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((-258));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.json.UTF8JsonGenerator", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 21, false);
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeString("OdN,yKSs.*");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter3, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("3");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockFile mockFile0 = new MockFile(")23SX`ncNW7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-792), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1766, false);
      uTF8JsonGenerator0._verifyValueWrite("UzG=");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-97), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-39);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1559), (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._verifyValueWrite("UzG=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 0);
      uTF8JsonGenerator0._verifyValueWrite("FUB6Xq05U");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataOutputStream dataOutputStream1 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, dataOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) 1);
      String string0 = "";
      uTF8JsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("\"'.>-;d?b?bnJWT=}=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3266), (ObjectCodec) null, mockPrintStream0, byteArray0, (-528), true);
      uTF8JsonGenerator0._verifyValueWrite("?wc!!x8yq");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(",7+50", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1782), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3967, false);
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString(",7+50");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OdN,yKSs.*");
      iOContext0.allocNameCopyBuffer(0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)12;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-93.824));
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000000000, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[2] = (byte) (-102);
      mockPrintStream0.print(")");
      mockPrintStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 19, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.TreeCodec");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("=->");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("=->");
      MockFile mockFile0 = new MockFile(")5r0q^}");
      mockFile0.setReadOnly();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'u';
      charArray0[2] = 'N';
      charArray0[3] = 'n';
      charArray0[4] = '[';
      charArray0[5] = 'b';
      charArray0[6] = '~';
      mockPrintStream0.println(charArray0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)63, 1525);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("ywXDcrYo", 103, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      uTF8JsonGenerator1._writePPFieldName("OdN,yKSs.*");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      iOContext0.constructTextBuffer();
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " entries", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream1.printf("OdN,yKSs.*", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1180, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      iOContext0.allocNameCopyBuffer((byte)0);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-39);
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding1);
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding2);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "I", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      uTF8JsonGenerator0.writeString(",7+50");
      SerializedString serializedString0 = new SerializedString(",7+50");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString("|DAT;G\"~8");
      try { 
        jsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      OutputStream outputStream0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4614, (ObjectCodec) null, (OutputStream) null, byteArray0, 679, false);
      iOContext1.allocReadIOBuffer(224);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, (-259), 679);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      mockFile0.setReadOnly();
      byteArray0[4] = (byte)63;
      uTF8JsonGenerator0.writeBoolean(true);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)23;
      SerializedString serializedString0 = new SerializedString("OdN,yKSs.*");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1290), false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0._flushBuffer();
      iOContext0.allocTokenBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1290
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ObjectCodec objectCodec0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      String string0 = null;
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      String string1 = "4;?BYWY=Jl\\7(SX";
      uTF8JsonGenerator0._verifyValueWrite("4;?BYWY=Jl\u0007(SX");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1554), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)8, (-3493));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('1');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      mockPrintStream0.println(0.0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-74);
      byteArray0[4] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)4, (ObjectCodec) null, mockPrintStream0, byteArray0, 115, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      String string0 = "";
      String string1 = "";
      uTF8JsonGenerator0._verifyValueWrite("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-159));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-124), 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate1.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1616, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1616, true);
      int int0 = 8;
      int int1 = 2308;
      int int2 = 1557;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      MockFile mockFile0 = new MockFile(",7+50", ",7+50");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1782), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString("Dbl*Z HJDHPdW-Z9,");
      SerializedString serializedString0 = new SerializedString("Dbl*Z HJDHPdW-Z9,");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a raw (unencoded) value");
      mockPrintStream0.print((double) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 459, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = new char[4];
      char char0 = 'l';
      charArray0[0] = 'l';
      char char1 = '8';
      charArray0[1] = '8';
      char char2 = '[';
      charArray0[2] = '[';
      char char3 = '\\';
      charArray0[3] = '\\';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-977), 3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[2] = (byte) (-102);
      mockPrintStream0.print(")");
      mockPrintStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 19, false);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.TreeCodec");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      mockFile0.setReadOnly();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 128, (-1936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      mockFile0.setReadOnly();
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)23;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, (OutputStream) null, byteArray0, Integer.MAX_VALUE, true);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OdN,yKSs.*", true);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.setHighestNonEscapedChar(128);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-159));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-124), 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate1.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-159), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3501, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.scaleByPowerOfTen((byte)58);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite(")");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)58;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-4393), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4393
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      mockPrintStream0.write(65536);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-608), (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)23;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.allocBase64Buffer();
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("INTERN_FIELD_NAMES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)0;
      iOContext1.allocNameCopyBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 110, (ObjectCodec) null, dataOutputStream0, byteArray0, 31, true);
      String string0 = ", although was supposed to have one";
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      String string1 = "'JwOQt(dY";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("'JwOQt(dY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1558), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      uTF8JsonGenerator0.writeNumber("3-s-Q[}=<bg6Ibxz");
      uTF8JsonGenerator0.writeString("3-s-Q[}=<bg6Ibxz");
      uTF8JsonGenerator0.writeFieldName(" aFE>[G=T5%?d|");
      uTF8JsonGenerator0.writeRaw("Infinity", 0, 3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      String string0 = "";
      MockFile mockFile0 = new MockFile((String) null, "OdN,yKSs.*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.write(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 33, (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      TokenFilter tokenFilter4 = tokenFilter3.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter4, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeString("u$");
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      System.setCurrentTimeMillis(56320);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      String string0 = "LdCE_9*k\"xMZtFDR.";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("LdCE_9*k\"xMZtFDR.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Can not ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)45;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)8, true);
      uTF8JsonGenerator0.writeNullField("Can not ");
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-851), (int) (byte)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer.createRoot();
      char char0 = 'f';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1558), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      SerializedString serializedString0 = new SerializedString("OdN,yKSs.*");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("3-s-Q[}=<bg6Ibxz");
      uTF8JsonGenerator0.writeString("3-s-Q[}=<bg6Ibxz");
      String string0 = null;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("g?A?4VtT{_E<h7", (String) null, true, 'p', 3219);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      iOContext0.allocNameCopyBuffer((byte)0);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      String string0 = ", although was supposed to have one";
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 821, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("4;?BYWY=Jl\u0007(SX");
      uTF8JsonGenerator0.writeFieldName("lv2{J");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      String string0 = " entries";
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      int int0 = 1000;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-102), 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = new SerializedString("OdN,yKSs.*");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 536, true);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (-994));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataOutputStream dataOutputStream1 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, dataOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" entries");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis(56320);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2021), (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)83;
      serializedString0.appendQuotedUTF8(byteArray0, 1784);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      iOContext0.allocNameCopyBuffer((byte)0);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(", although was supposed to have one", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1125, (ObjectCodec) null, (OutputStream) null, byteArray0, 1481, false);
      uTF8JsonGenerator0._verifyValueWrite("GnAfbC;16");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("GnAfbC;16");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O\\dN,yKSs.*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      mockPrintStream0.print(")");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 19, false);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.TreeCodec");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)85;
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[7] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, (OutputStream) null, byteArray1, 2127, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1994, 2000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      byte byte0 = (byte)84;
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4288), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4288), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      tokenFilter2.filterStartArray();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-4), 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2021), (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber((long) 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("write a raw (unencoded) value");
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1158, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2434), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)17;
      byteArray0[2] = (byte)17;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)17, false);
      String string0 = "LdCE_9*k\"xMZtFDR.";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("LdCE_9*k\"xMZtFDR.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream1 = new DataOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream2 = new DataOutputStream(dataOutputStream1);
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '8';
      charArray0[2] = '|';
      charArray0[3] = 'Z';
      charArray0[4] = 'O';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)117, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p6Pj&b");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(18);
      tokenFilter1.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter0.includeProperty("ds?cc#beSI|Q`");
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      tokenFilter3.includeElement(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",l");
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2110, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2021), (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)83;
      serializedString0.appendQuotedUTF8(byteArray0, 1784);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)8, true);
      uTF8JsonGenerator0.writeNullField("Can not ");
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      uTF8JsonGenerator0.writeString(charArray0, 2179, (-2319));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber(1566L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O\\dN,yKSs.*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.TreeCodec");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream1 = new DataOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream2 = new DataOutputStream(dataOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, dataOutputStream1);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.TreeCodec");
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '!';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'x';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 4663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      String string0 = "LdCE_9*k\"xMZtFDR.";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("LdCE_9*k\"xMZtFDR.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      String string0 = null;
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      tokenFilter3.includeElement(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)85;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, (-4), true);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      byteArray0[0] = (byte)84;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4259), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4259), (byte)84, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      TokenFilter tokenFilter4 = tokenFilter3.includeElement(3);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter4, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)21);
      uTF8JsonGenerator0.writeNumber((short)1762);
      uTF8JsonGenerator0.writeNumber((short)101);
      uTF8JsonGenerator0.writeNumber(3299L);
      uTF8JsonGenerator0.writeRaw(", although was supposed to have one");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O\\dN,yKSs.*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OdN,yKSs.*");
      String string0 = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-270), (ObjectCodec) null, mockPrintStream0, byteArray0, (-270), false);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(4465L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -270
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 821, false);
      uTF8JsonGenerator1._verifyValueWrite("Can not write a field name, expecting a value");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyValueWrite("Can not write a field name, expecting a value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.TreeCodec");
      SerializedString serializedString0 = new SerializedString("DjQX+ yPFnV#!aQy");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.TreeCodec", 1780);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte)85;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)114;
      mockPrintStream0.println();
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("Null String illegal for SerializedString");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("`{x+[7G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1717, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      File file0 = MockFile.createTempFile("OdN,yKSs.*", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-608), (ObjectCodec) null, mockPrintStream0, byteArray0, 192, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)8, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 29, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1541), (ObjectCodec) null, (OutputStream) null);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty(") out of range of Java short");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName("");
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate1.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      mockPrintStream0.print((double) 33);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 9, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("Current context not an object but ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 54, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1558), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      SerializedString serializedString0 = new SerializedString("OdN,yKSs.*");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("3-s-Q[}=<bg6Ibxz");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 110, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("*OBP,?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 821, false);
      String string0 = "Can not write a field name, expecting a value";
      uTF8JsonGenerator1._verifyValueWrite("Can not write a field name, expecting a value");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1717, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O\\dN,yKSs.*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (byte)113, false);
      uTF8JsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)101;
      mockPrintStream0.println();
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      String string1 = "-e.Ykk|\\_{Ol; c1";
      uTF8JsonGenerator0._verifyValueWrite("-e.Ykk|_{Ol; c1");
      String string2 = "";
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-599), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3671, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3671, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("eH:]B:<$'yM");
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        dataOutputStream0.writeLong(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(115);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)100, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)54, 77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 89, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, (-1827));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, objectOutputStream0, byteArray0, (byte)19, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 14, (byte) (-73));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((float) 33);
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((float) 33);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.append('w');
      iOContext0.allocNameCopyBuffer(56319);
      SerializedString serializedString0 = new SerializedString("JH}$@v3");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.writeFieldName(", although was supposed to have one");
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, (OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("m^s8X~W}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("dN,KS).*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("dN,KS).*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-102);
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (byte) (-102), 651, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(78);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter2, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-799), (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((-9.223372036854776E18));
      uTF8JsonGenerator0.writeNumber((-335.88043F));
      uTF8JsonGenerator0.writeFieldName("dN,KS).*");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Can not ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      byte[] byteArray0 = new byte[3];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2531, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)45);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(",7+50");
      SerializedString serializedString0 = new SerializedString(",7+50");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("eH:]B:<$'yM");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(",7+50");
      SerializedString serializedString0 = new SerializedString(",7+50");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2922, 103, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0);
      char[] charArray0 = new char[2];
      iOContext1.allocReadIOBuffer(3);
      charArray0[0] = '%';
      charArray0[1] = '%';
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
      uTF8JsonGenerator0.writeNumber(3711.147F);
      uTF8JsonGenerator0.writeRaw('%');
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerator");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((-2155));
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 54, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte) (-112));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1.7 ^`O~%48z)p}Z");
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '\"';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '7';
      charArray0[5] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 20, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 18, 3, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(1060.0375F);
      uTF8JsonGenerator0.writeFieldName("Can not write a field name, expecting a value");
      SerializedString serializedString0 = new SerializedString("1.7 ^`O~%48z)p}Z");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)101;
      mockPrintStream0.println();
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyValueWrite("-e.Ykk|_{Ol; c1");
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0._writePPFieldName("-e.Ykk|_{Ol; c1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, dataOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 64, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(",7+50");
      SerializedString serializedString0 = new SerializedString(",7+50");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString("t}N)|a)hunS/mbcRk4");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerator");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)39;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (-380), 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("s#`z#R|8Ny#msIG&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerator");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-39);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)109, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-39));
      uTF8JsonGenerator0.writeNumber((short)520);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      stringReader0.markSupported();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, (-2439));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-575);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      System.setCurrentTimeMillis(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 18, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.writeNumber("OdN,yKSs.*");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 2009);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0);
      char[] charArray0 = new char[2];
      iOContext1.allocReadIOBuffer(3);
      charArray0[0] = '%';
      charArray0[1] = '%';
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
      uTF8JsonGenerator0.writeNumber(3711.147F);
      uTF8JsonGenerator0._verifyValueWrite(" )[");
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeFieldName(" )[");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 64, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 36, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((-2890.7F));
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName("No FormatFeatures defined for parser of type ");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-50), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Incomplete surrogate pair: first char 0x");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000000000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      MockFile mockFile0 = new MockFile("", "ZZC,>Y.NN?]@~:%?WM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("6");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '_';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = '!';
      charArray0[5] = '\"';
      uTF8JsonGenerator0.writeRaw(charArray0, 123, (-497));
      boolean boolean0 = false;
      char char0 = 'G';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "ZZC,>Y.NN?]@~:%?WM", false, 'G', 2047);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 19)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2922, 103, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1648), false);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('i');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1648), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('i');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1648
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-159));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-124), 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate1.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1616, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1616, true);
      int int0 = 8;
      int int1 = 2308;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 78, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      String string0 = "h,abU!]am7x<K8E";
      MockPrintStream mockPrintStream0 = new MockPrintStream("h,abU!]am7x<K8E");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)84, (ObjectCodec) null, mockPrintStream0, byteArray0, 108, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.allocTokenBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      iOContext0.allocReadIOBuffer((-144));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)62, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Too few bytes available: missing ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "O\\dN,yKSs.*";
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1648), false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('i');
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((-1839.329715145));
      uTF8JsonGenerator0.writeNumber(30);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (byte)113, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1627.15328915988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 459, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'w';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = '^';
      charArray0[7] = 'f';
      // Undeclared exception!
      try { 
        iOContext0.releaseTokenBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      char char0 = 'f';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)62, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      uTF8JsonGenerator0.writeNumber(3);
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      // Undeclared exception!
      try { 
        iOContext0.releaseTokenBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      StringReader stringReader0 = new StringReader("p)Lc:{Ac");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, (-2226), false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1091), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(0.8);
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeFieldName("p)Lc:{Ac");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0:+=Kkl4aC%%j14F[");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 922, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 0, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getValueAsInt(92);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, objectOutputStream0, byteArray0, (byte)102, true);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('s');
      SerializedString serializedString0 = new SerializedString("OdN,yKSs.*");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)62;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)62, (ObjectCodec) null, (OutputStream) null, byteArray0, (-452), false);
      iOContext2.allocReadIOBuffer((-1));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-31), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeNumber(1.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte) (-31));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -452
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerator");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis((-2147483648L));
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '*';
      uTF8JsonGenerator0.writeString(charArray0, 3, (-3));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2451.7617F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(512);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      uTF8JsonGenerator0.close();
      int int0 = 2009;
      Base64Variant base64Variant0 = null;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("write a null");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 33, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0:+=Kkl4aC%%j14F[");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 922, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 0, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getValueAsInt(92);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1047, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((-1839.329715145));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-91);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("OdN,yKSs.*", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1463), (ObjectCodec) null, mockFileOutputStream0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      boolean boolean0 = true;
      String string0 = ", although was supposed to have one";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-39), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2627), true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)102;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)62, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      SerializedString serializedString0 = new SerializedString("QUOTE_NON_NUMERIC_NUMBERS");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) (byte) (-31));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-1817), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("write a number", "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('a');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)109;
      mockFile0.renameTo(mockFile0);
      byteArray0[3] = (byte) (-91);
      uTF8JsonGenerator0.writeBoolean(false);
      iOContext0.setEncoding(jsonEncoding0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber((float) 33);
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("W,)),Q[]=?I#", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-4);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1544), (ObjectCodec) null, dataOutputStream0, byteArray0, 110, false);
      SerializedString serializedString0 = new SerializedString("}[[E");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis(374L);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-575), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      uTF8JsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '3';
      charArray0[2] = '.';
      charArray0[3] = 'j';
      charArray0[4] = 'H';
      charArray0[5] = 'J';
      charArray0[6] = 'm';
      charArray0[7] = '8';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 13, 1494);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((float) 33);
      uTF8JsonGenerator0.writeFieldName("OdN,yKSs.*");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((float) 33);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4849, (ObjectCodec) null, byteArrayOutputStream0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0x35
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)84, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 2009);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)102;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)62, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('f');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-1817), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1817
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = new SerializedString("8Ww*=T'?I");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OdN,yKSs.*");
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.print((double) 1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("OdN,yKSs.*");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      char char0 = '+';
      byteArrayOutputStream0.flush();
      uTF8JsonGenerator0.writeRaw('+');
      String string0 = "\\,8";
      uTF8JsonGenerator0.writeFieldName(",8");
      mockPrintStream0.println('+');
      SerializedString serializedString0 = new SerializedString(",8");
      mockPrintStream0.println((double) 57343);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        iOContext1.releaseBase64Buffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerator");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      char[] charArray0 = new char[2];
      iOContext1.allocReadIOBuffer(3);
      charArray0[0] = '%';
      charArray0[1] = '%';
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3711.147F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      String string1 = "ZZC,>Y.NN?]@~:%?WM";
      MockFile mockFile0 = new MockFile("", "ZZC,>Y.NN?]@~:%?WM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyValueWrite("write a string");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("ZZC,>Y.NN?]@~:%?WM");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("write a number", "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('a');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      MockFile mockFile1 = new MockFile("write a number", "write a number");
      mockFile0.renameTo(mockFile1);
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1749), (byte) (-56));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("OdN,yKSs.*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '\"';
      charArray0[2] = ',';
      charArray0[3] = '-';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("OdN,yKSs.*");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not OdN,yKSs.*, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)8, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) mockPrintStream1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)49, true);
      uTF8JsonGenerator0.getCurrentValue();
      objectArray0[3] = null;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) mockPrintStream1;
      uTF8JsonGenerator0.getCurrentValue();
      objectArray0[6] = null;
      uTF8JsonGenerator0.getCurrentValue();
      objectArray0[7] = null;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[8] = object0;
      PrintStream printStream0 = mockPrintStream1.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byte byte0 = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)84, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("write a number", "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('a');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)109;
      MockFile mockFile1 = new MockFile("write a number", "write a number");
      mockFile0.renameTo(mockFile1);
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1749), (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1749
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(512);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, byteArrayOutputStream0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 55);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0x37
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1319), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-159), (byte) (-124), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2325);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1319), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 55296, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an object but ", (int) (byte)62, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-834), (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 58, 115, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1269), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite(", although was supposed to have one");
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = new SerializedString("8Ww*=T'?I");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "write a string";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "write a string", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 638;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1024, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
