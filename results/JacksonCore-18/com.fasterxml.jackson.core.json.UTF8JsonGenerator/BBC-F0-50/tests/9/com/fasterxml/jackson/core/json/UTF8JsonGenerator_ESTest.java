/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:52 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      String string0 = ", although was supposed to have one";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", although was supposed to have one", true);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2479, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(", although was supposed to have one", 21, 4511);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 382, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-928), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "~'eSP(O;]3h";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(557);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bk:VFcms}yX4=");
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)44, true);
      uTF8JsonGenerator0.writeRaw(charArray0, 24, (-173));
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 19, (int) (byte)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(1);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      uTF8JsonGenerator0.writeNumber((double) 0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0xe
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray1 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, true);
      uTF8JsonGenerator0._outputBuffer = byteArray0;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((double) 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "T##LX!QXySaVjA;";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T##LX!QXySaVjA;");
      SerializedString serializedString0 = new SerializedString("T##LX!QXySaVjA;");
      byte[] byteArray0 = new byte[15];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("YoJjQ5");
      SerializedString serializedString1 = new SerializedString("T##LX!QXySaVjA;");
      byte byte0 = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('');
      int int0 = 1000000000;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1000000000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      byte[] byteArray1 = new byte[12];
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, filterOutputStream0, byteArray1, 6000, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 365, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      String string0 = "";
      int int0 = 1467;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T##LX!QXySaVjA;");
      SerializedString serializedString0 = new SerializedString("^AV");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 56320, false);
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      String string0 = "*q.;xz|YeK6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      boolean boolean1 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 55296, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      File file0 = MockFile.createTempFile("Current context not an object but ", "(DV/BEWV'\"SV?^@4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = new SerializedString("Failed to decode VALUE_STRING as base64 (");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("4");
      uTF8JsonGenerator0.writeRaw('}');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 101);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext1.allocNameCopyBuffer(1);
      Object object0 = new Object();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 57343;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._outputSurrogates(448, 57343);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int[] intArray0 = new int[7];
      intArray0[0] = 55296;
      intArray0[1] = 3;
      intArray0[2] = 57343;
      intArray0[3] = 0;
      intArray0[4] = 448;
      intArray0[5] = (-3892);
      intArray0[6] = 453;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 448, 453);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 448
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      char[] charArray0 = iOContext1.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-575), (ObjectCodec) null, mockPrintStream1, byteArray0, 1387, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString(charArray0, 1, 110);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(3);
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2314), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, false);
      uTF8JsonGenerator0.writeRawValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 210, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[6] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an object but ", 55296, 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      bufferedOutputStream0.write(1);
      uTF8JsonGenerator0.writeRaw("write a number");
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeNumber(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("write a number");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-111), (ObjectCodec) null, mockPrintStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString(charArray0, 762, 1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "nL]a1");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte) (-9);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2893), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 97, 3165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2893
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m}M1cPo]`J\tFRBs{Q,", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[3] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ");
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T##LX!QXySaVjA;");
      SerializedString serializedString0 = new SerializedString("T##LX!QXySaVjA;");
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "T##LX!QXySaVjA;", true);
      int int0 = (-3291);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3291), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 172, false);
      uTF8JsonGenerator0.setCurrentValue(iOContext0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("T##LX!QXySaVjA;");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, false);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2369));
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      uTF8JsonGenerator0.writeNumber((-6L));
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-331), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "*q.;xz|YeK6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 781;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 781, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("*q.;xz|YeK6[(>@ZJL");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 17, true);
      char char0 = ')';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(')');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1710, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1921, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 781, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString("*q.;xz|YeK6[(>@ZJL");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.writeNumber(56320);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|y'/M", false);
      mockFileOutputStream0.write(781);
      int[] intArray0 = new int[8];
      intArray0[0] = 781;
      jsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(781);
      mockFileOutputStream0.write(3899);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 3, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString("~DWL.");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") out of range of Java short");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(") out of range of Java short");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-220), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeString("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" / 0x", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      byte[] byteArray1 = new byte[12];
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, true);
      uTF8JsonGenerator0.writeNullField("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 781, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString("*q.;xz|YeK6[(>@ZJL");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2013);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      jsonGenerator0.writeNumber((short)777);
      uTF8JsonGenerator0.writeNumber((-596.6904F));
      SerializedString serializedString1 = new SerializedString("6ZM5Ffq>\"");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 781, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString("*q.;xz|YeK6[(>@ZJL");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.writeNumber(56320);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|y'/M", false);
      mockFileOutputStream0.write(781);
      int[] intArray0 = new int[8];
      intArray0[0] = 781;
      intArray0[1] = 56320;
      intArray0[2] = 240;
      intArray0[3] = 55296;
      intArray0[4] = 3;
      intArray0[5] = 57343;
      intArray0[6] = 0;
      intArray0[7] = 64;
      jsonGenerator0.writeArray(intArray0, (-265), 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("Xe|j<7G!dc[^43(6");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("ds0HQ", "*q.;xz|YeK6[(>@ZJL", false, '\\', 56320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 18)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a number", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1700), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("t@2\"ym@/wyE%C");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 2313, (-1574));
      StringReader stringReader0 = new StringReader("write a number");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1591, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1100), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1700), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)65;
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)4, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2138, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte) (-99), (int) (byte) (-99));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Current contxt not an objec bt ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current contxt not an objec bt ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current contxt not an objec bt ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte byte0 = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byte byte1 = (byte) (-128);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      iOContext1.allocNameCopyBuffer(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = (-598);
      intArray0[3] = 3;
      intArray0[4] = (-1778);
      intArray0[5] = (-3263);
      uTF8JsonGenerator0.writeArray(intArray0, (-3263), (-655));
      uTF8JsonGenerator0.writeFieldName(">lq~gH9\"DUx.>|2q");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(55296);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1024, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 756, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)49;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.write(byteArray0, 1, 1492);
      mockFileOutputStream0.write(byteArray0);
      MockFile mockFile0 = new MockFile("/)2w7h=8]XIC~,]0?U");
      MockPrintStream mockPrintStream0 = new MockPrintStream("/)2w7h=8]XIC~,]0?U");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1519), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "~'eSP(O;]3h";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, false);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2369));
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (byte)74);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T##LX!QXySaVjA;");
      SerializedString serializedString0 = new SerializedString("T##LX!QXySaVjA;");
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-845), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1578, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2924, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2336), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current contex not an bjct but ", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, false);
      iOContext0.allocTokenBuffer((-1232));
      Object object0 = new Object();
      int int0 = 44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1264, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocBase64Buffer();
      byte byte0 = (byte)26;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      iOContext1.allocWriteEncodingBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)26, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("3tcq;@?Z2;AF", 1, 536868248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T##LX!QXySaVjA;");
      SerializedString serializedString0 = new SerializedString("T##LX!QXySaVjA;");
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)44;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 277);
      bufferedOutputStream0.write(28);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, true);
      int[] intArray0 = new int[7];
      intArray0[0] = 277;
      intArray0[1] = 56319;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 28;
      intArray0[5] = 35;
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 1, (int) (byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2348), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)65;
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)27, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1575), false);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer((-1914));
      iOContext1.allocTokenBuffer((-3));
      Object object0 = new Object();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-4786));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      iOContext0.allocNameCopyBuffer(128);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(0, 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2362), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 7989, false);
      uTF8JsonGenerator0.writeArrayFieldStart("Q9X,");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 78, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte byte0 = (byte)44;
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte byte0 = (byte)74;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2355), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 't';
      charArray0[2] = '3';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2334), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 7989, false);
      uTF8JsonGenerator0.writeObjectField("qwMzsA", "qwMzsA");
      uTF8JsonGenerator0.writeNumber((long) 1);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-121), (ObjectCodec) null, pipedOutputStream0, byteArray0, 114, false);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-10", true);
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 634, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65535, true);
      uTF8JsonGenerator0.writeNumber(2985);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 553;
      intArray0[5] = 3;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.JsonParserDelegate");
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString0 = new SerializedString("W-[)O-)<{IuNK");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-647), (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("END_ARRAY");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.");
      MockFile mockFile0 = new MockFile("Z*6[Q}B y1R`");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-71));
      uTF8JsonGenerator0.writeStartObject((Object) byteArrayInputStream0);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      uTF8JsonGenerator0.writeString(charArray0, 557, 1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)41;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      iOContext1.constructTextBuffer();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 63, true);
      char char0 = '3';
      char char1 = 'O';
      char char2 = '+';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an object but ", 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((-328.286301338));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)74, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(1);
      bufferedOutputStream0.write(56320);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator0.writeArray(intArray0, 6126, (-3263));
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Xe|j<7G!dc[^43(6");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      uTF8JsonGenerator0.writeString(charArray0, 557, 1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeFieldName("lEgD2}!w;");
      uTF8JsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      String string0 = "write a number";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      MockFile mockFile0 = new MockFile("Z*6[Q}B y1R`");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)19;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 2, (byte)52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(3);
      int[] intArray0 = new int[1];
      intArray0[0] = (-258);
      uTF8JsonGenerator0.writeArray(intArray0, (-258), (-258));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("Xe|j<7G!dc[^43(6");
      Random.setNextRandom(3);
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = ';';
      charArray0[2] = '0';
      charArray0[3] = 'b';
      charArray0[4] = 'H';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 3585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      char char0 = '}';
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2479, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 3, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, mockPrintStream0, byteArray1, 57, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte byte0 = (byte)41;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)4;
      mockFileOutputStream0.write(byteArray0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockPrintStream0, byteArray1, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Current context not an object but ", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2334), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 7989, false);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 2, 223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeString("\"TeXhJuc7\"`sF");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte byte0 = (byte)74;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, false);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2961));
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeFieldName("t@2\"ym@/wyE%C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)41;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a number", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      uTF8JsonGenerator0.writeRaw('P');
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 924, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 924
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, false);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2961));
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeString("");
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 67, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2479, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1388, (ObjectCodec) null, (OutputStream) null, byteArray0, 50, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)0);
      uTF8JsonGenerator0.writeString(charArray0, 255, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1.0F);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 56319;
      intArray0[3] = 2;
      uTF8JsonGenerator0.writeArray(intArray0, 1790, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer.allocateDirect(1);
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("t@2\"ym@/wyE%C");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[3];
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyValueWrite("#+~^#bste5n-+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 93, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer.allocateDirect(1024);
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("aY!uT");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'b';
      charArray0[2] = '_';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-2799));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer((-891));
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw(charArray0, 260, (int) (byte)44);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1567, 3);
      Random.setNextRandom(55296);
      uTF8JsonGenerator0._verifyValueWrite("3~:bn.S");
      try { 
        uTF8JsonGenerator0._outputSurrogates(12000, 598);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2ee0, second 0x256
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      int int0 = 4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-89), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -89
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)41;
      mockFileOutputStream0.write(byteArray0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      int int0 = 567;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Current context not an object but ", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte)64;
      byteArray1[5] = (byte)71;
      byteArray1[6] = (byte)101;
      byteArray1[7] = (byte) (-16);
      byteArray1[8] = (byte)106;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, mockFileInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2479, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '5';
      charArray0[2] = '$';
      charArray0[3] = '(';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, jsonEncoding0, true);
      iOContext0.constructTextBuffer();
      byte byte0 = (byte)74;
      mockPrintStream0.println((-2327));
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      uTF8JsonGenerator0.writeRawValue("~DWL.");
      uTF8JsonGenerator0.writeNumber(900.21441697);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-10", true);
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 634, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65519, true);
      uTF8JsonGenerator0.writeNumber(2985);
      int[] intArray0 = new int[6];
      uTF8JsonGenerator0.overrideStdFeatures(65519, (-3316));
      intArray0[0] = 3;
      intArray0[1] = 553;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.JsonParserDelegate");
      uTF8JsonGenerator0.writeNumber((float) 56320);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeNumber((short)64);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      iOContext1.allocWriteEncodingBuffer();
      byteArray0[2] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, true);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((short)1861);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("~'eSP(O;]3h", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      mockFileOutputStream0.write(byteArray0, 0, (int) (byte)44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 96, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)44, true);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      byte byte0 = (byte)44;
      MockFile.createTempFile("write a number", "Z*6[Q}B y1R`");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      iOContext1.allocReadIOBuffer((-1015));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      intArray0[1] = (int) (byte)0;
      intArray0[0] = 56320;
      uTF8JsonGenerator0.writeArray(intArray0, 3, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      int int0 = 746;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 42, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-804), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'O';
      charArray0[2] = '3';
      charArray0[4] = '3';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 680);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      iOContext1.allocWriteEncodingBuffer();
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)44, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("Current context not an object but ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)26;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1.0F);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer.allocateDirect(1);
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("t@2\"ym@/wyE%C");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'b';
      charArray0[1] = '\\';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~DWL.", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2479, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      mockFileOutputStream0.release();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      iOContext1.allocWriteEncodingBuffer();
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)44, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("b2");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("ARRAY", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1297, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1284, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4wcLHn70", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("TA&;5WfiYNQ.@b$s");
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 640, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, true);
      uTF8JsonGenerator0._verifyValueWrite("YR?}8X]K&cXt+78");
      uTF8JsonGenerator0.writeNumber((short)102);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "~'eSP(O;]3h";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, true);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2961));
      bufferedOutputStream0.close();
      try { 
        uTF8JsonGenerator0.writeRaw("Z:AmtYr+S8-.]");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("~'eSP(O;]3h", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~'eSP(O;]3h");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)44, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeRawValue("gJl6]AXtJ%}");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)44;
      mockFileOutputStream0.write(byteArray0);
      MockFile mockFile0 = new MockFile("/)2w7h=8]XIC~,]0?U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1519), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("~'eSP(O;]3h", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      mockFileOutputStream0.write(byteArray0, 0, 425);
      mockFileOutputStream0.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3);
      mockPrintStream0.println((float) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      MockFile.createTempFile("write a number", "Y oMaw;``");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      System.setCurrentTimeMillis((-563L));
      uTF8JsonGenerator0.writeNumber((double) 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("+eU4", 56319, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1198, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)26, false);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("Current context not an object but ", byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Current context not an object but ");
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (float) (byte)74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeString("QS04z<`0XK?");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, true);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2961));
      uTF8JsonGenerator0.writeRaw("Z:AmtYr+S8-.]");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-65), 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((-585.5450273334715));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, false);
      char[] charArray0 = iOContext1.allocTokenBuffer(35);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 1);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 4488);
      Random.setNextRandom(2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeRaw('2');
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeNumberField("", (float) 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(32, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x20, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "*q.;xz|YeB6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeB6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2454, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 71, true);
      BigDecimal bigDecimal0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1192, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 123, true);
      uTF8JsonGenerator0._verifyValueWrite("[1H(2");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-99));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      mockFileOutputStream1.close();
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      iOContext1.allocWriteEncodingBuffer();
      byteArray0[2] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, false);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      try { 
        uTF8JsonGenerator0.writeNumber((short)1861);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler2, dataInputStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-265L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "~'eSP(O;]3h";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte byte0 = (byte) (-81);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-81), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 46, false);
      uTF8JsonGenerator0.writeNumber(46);
      int[] intArray0 = new int[4];
      intArray0[0] = 57343;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)27, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'I';
      charArray0[2] = 'e';
      charArray0[3] = 'M';
      charArray0[4] = 'U';
      charArray0[5] = '(';
      charArray0[6] = 'B';
      charArray0[7] = '+';
      charArray0[8] = '!';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1395.7217F));
      String string0 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      MockFile.createTempFile("write a number", "Z*6[Q}B y1R`");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      uTF8JsonGenerator0.writeRaw('P');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      System.setCurrentTimeMillis((-563L));
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("HhvM\"&Ot)#*:]", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      Random.setNextRandom(2);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)44, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString(charArray0, (-1310), (-1310));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = 'a';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 97, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3031);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1714, true);
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0);
      mockPrintStream0.println(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.getOutputBuffered();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/)2w7h=8]XIC~,]0?U");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-1.6694504F));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8366, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("s.qEJUYDJ(JB+R");
      uTF8JsonGenerator0.writeNullField("*q.;xz|YeK6[(>@ZJL");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?u2rCntcontext noFan object but", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("?u2rCntcontext noFan object but", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[0] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(0);
      mockPrintStream0.format(locale0, "<B!", (Object[]) null);
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Current context not an object but ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 0, 2959);
      uTF8JsonGenerator0.writeNumber((float) (byte)53);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)44, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(charArray0, (-1310), (-1310));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      byte byte0 = (byte)44;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)44;
      Object object0 = new Object();
      int int0 = (-1064);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1064), (ObjectCodec) null, (OutputStream) null, byteArray0, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)25;
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((-2346.7312108852766));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)0);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 530);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = 'a';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.constructTextBuffer();
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2164), (ObjectCodec) null, bufferedOutputStream1, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField(" in ", (-1655.233F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-10", true);
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 634, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65535, true);
      uTF8JsonGenerator0.writeNumber(2985);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.createInstance();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      int[] intArray0 = new int[6];
      mockFileOutputStream0.release();
      intArray0[0] = 3;
      intArray0[1] = 553;
      intArray0[5] = 3;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(intArray0, (-1149), 553);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonParserSequence0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('l');
      int int0 = (-1130);
      uTF8JsonGenerator0._outputTail = 33;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)44, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeStartObject((Object) iOContext1);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q9;xz|Ye6(>@ZJL");
      stringReader0.skip(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-17), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)200);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("b2");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1985);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((short)777);
      uTF8JsonGenerator0.writeNumber((float) 1);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 20, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-5), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("'Lq\"&");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0._cfgUnqNames = true;
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("'Lq\"&");
      uTF8JsonGenerator0.writeNumber(111);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)25;
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)5);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte byte0 = (byte)44;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-859), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 63, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'O';
      charArray0[3] = '3';
      charArray0[4] = 'a';
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)26;
      byteArray0[3] = (byte)45;
      mockFileOutputStream0.write(39);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 1736);
      uTF8JsonGenerator0.writeNumber(3931L);
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte) (-88), (byte)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xffffffa8, second 0x2c
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer(2);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(charArray0, 0, 1723);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1395.7217F));
      SerializedString serializedString0 = new SerializedString("com.fastewxml.jacksgn.core.json.TF8JsonGenerator");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("x");
      int int0 = (-1950);
      boolean boolean0 = false;
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      String string0 = "Z*6[Q}B y1R`";
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      file0.getAbsoluteFile();
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      intArray0[1] = (int) (byte)44;
      intArray0[2] = 56320;
      intArray0[3] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 3, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("+eU4", (int) (byte)44, 746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.constructTextBuffer();
      mockPrintStream0.println('H');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)74, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (-204.8F));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-859), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 63, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'O';
      charArray0[3] = '3';
      charArray0[4] = 'a';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)44, 2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "*q.;xz|YeK6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*q.;xz|YeK6[(>@ZJL");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeRaw('/');
      uTF8JsonGenerator0.writeString((char[]) null, 1000, (-859));
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1395.7217F));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("x");
      int int0 = (-1950);
      boolean boolean0 = false;
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)25;
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8 *MaR;`M", true);
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream1);
      bufferedOutputStream0.write(746);
      uTF8JsonGenerator0.writeRaw("): only regular white space (\r, \n, \t) is allowed between tokens");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0._verifyValueWrite("): only regular white space (\r, \n, \t) is allowed between tokens");
      uTF8JsonGenerator0._verifyPrettyValueWrite("8 *MaR;`M", 0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 45, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeBinaryField("Split surrogate on writeRaw() input (last character): first character 0x%4x", byteArray0);
      uTF8JsonGenerator0.writeNumber((long) 45);
      uTF8JsonGenerator0.writeString("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-1707), (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)9, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "QS04z<`0XK?");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumberField("", (float) 0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-81);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      uTF8JsonGenerator0.writeString("~'eSP(O;]3h");
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Random.setNextRandom(19);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("TqBk,Y|}@v47", "TqBk,Y|}@v47");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " bytes (out of ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1051, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      uTF8JsonGenerator0.writeStartObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, (-1131), (ObjectCodec) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      String string0 = "write a number";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8 *MaR;`M");
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      String string0 = "T?2>\\u=MNc8%LDJ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-375), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinaryField(string0, byteArray0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[10];
      mockFileOutputStream0.write(byteArray0);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(3);
      int[] intArray0 = new int[1];
      intArray0[0] = (-258);
      uTF8JsonGenerator0.writeArray(intArray0, (-258), (-258));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("Xe|j<7G!dc[^43(6");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(3);
      int[] intArray0 = new int[1];
      intArray0[0] = (-258);
      uTF8JsonGenerator0.writeArray(intArray0, (-258), (-258));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("Xe|j<7G!dc[^43(6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Xe|j<7G!dc[^43(6", 0, 3353);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 20, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-5), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("'Lq\"&");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0._cfgUnqNames = true;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("'Lq\"&");
      uTF8JsonGenerator0.writeNumber(111);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)44, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw('{');
      int int0 = 2499;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      mockFileOutputStream0.getChannel();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 364, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y oMaw;``", true);
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2985, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)44);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      intArray0[1] = (int) (byte)52;
      intArray0[2] = 56320;
      intArray0[3] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 3, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("+eU4", (int) (byte)44, 746);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)74, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[6] = (byte)44;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)74, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeString("Current context not an object but ");
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, (byte) (-68), (-3709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[6] = (byte)44;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)74, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeString("Current context not an object but ");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      iOContext0.constructTextBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF-16LE", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = 'a';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString(charArray0, (-4264), 0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(0);
      mockPrintStream0.format(locale0, "<B!", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)49, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte)44;
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Current context not an object but ");
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (float) (byte)74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeString("QS04z<`0XK?");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF-16LE", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = 'a';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString(charArray0, (-4264), 0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      iOContext1.allocWriteEncodingBuffer();
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("b2");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":r%p~o(^^^=fP8", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      int int0 = 1736;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger2);
      uTF8JsonGenerator0.writeRawValue("6nbez'tMo(WL8@");
      uTF8JsonGenerator0.writeNullField("");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      byte[] byteArray0 = serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler1, dataInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-1), (ObjectCodec) null, pipedOutputStream0, byteArray0, 125, true);
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, byteArray0, 7, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h", 4, 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, " / 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4096, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte) (-93);
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte)93;
      uTF8JsonGenerator0.writeBinaryField(" / 0x", byteArray1);
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeString(" / 0x");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-3070), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)19;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)19, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1302, false);
      SerializedString serializedString1 = new SerializedString("\"_&%qw|b`/");
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 162, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3602);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(16);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 57343);
      bufferedOutputStream0.write(65535);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (byte) (-67), (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = 'a';
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 500);
      System.setCurrentTimeMillis(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream(496);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, " / 0x", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      IOContext iOContext3 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2146, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 22, false);
      uTF8JsonGenerator0.writeNumber((-704.5050154197596));
      uTF8JsonGenerator0.writeNumber((-1.0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 19, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8 *MaR;`M", true);
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)19;
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(870.4007326);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Z*6[Q}B y1R`", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)74, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (-204.8F));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("F5S", 234);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1192, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("/)2w7h=8]XIC~,]0?U");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 32, false);
      uTF8JsonGenerator0.writeNumber(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.write(2);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
      System.setCurrentTimeMillis((-1L));
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 20, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 11, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("'Lq\"&");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0._cfgUnqNames = true;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("'Lq\"&");
      uTF8JsonGenerator0.writeNumber(111);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      String string0 = " / 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, " / 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4096, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeString(" / 0x");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-3070), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)23;
      byte byte0 = (byte)19;
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)23, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)23, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "INT";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "INT", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeNumber((-1671L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      SerializedString serializedString0 = new SerializedString("start an object");
      StringReader stringReader0 = new StringReader("A*64tDX3,~}kydEna");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '\"';
      charArray0[2] = 'g';
      charArray0[3] = '+';
      charArray0[4] = 'y';
      charArray0[5] = '=';
      charArray0[6] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1901, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 808, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      try { 
        uTF8JsonGenerator0.writeNumber(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[0];
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)19;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      int int0 = (-3604);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)19, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1302, false);
      try { 
        uTF8JsonGenerator0.writeNumber(390.66918);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, tokenFilter0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2583, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte) (-17));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte byte0 = (byte)44;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(0);
      mockPrintStream0.format(locale0, "<B!", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)26, 24);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x1a, second 0x18
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)74;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-2031), (ObjectCodec) null, mockPrintStream0, byteArray0, 8417, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.allocTokenBuffer(557);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)44, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumberField("Current context not an object but ", (float) 2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, pipedOutputStream0, byteArray1, (byte)44, false);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 210, (byte) (-88));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("x");
      uTF8JsonGenerator0.writeString("x");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, true);
      uTF8JsonGenerator0.writeNumber(3);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      bufferedOutputStream0.write(0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)32, (ObjectCodec) null, bufferedOutputStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, true);
      uTF8JsonGenerator0.writeNumber(3);
      bufferedOutputStream0.write((-2961));
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      MathContext mathContext0 = null;
      try {
        mathContext0 = new MathContext((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null String
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      mockFileOutputStream0.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal((-328.286301338));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)74, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(1);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Z:AmtYr+S8-.]", 0, (int) (byte)34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 20, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 11, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("'Lq\"&");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("'Lq\"&");
      uTF8JsonGenerator0.writeNumber(111);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      mockFileOutputStream0.write(byteArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1667), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)74, true);
      uTF8JsonGenerator0.writeNumber(3);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      bufferedOutputStream0.write((-2961));
      uTF8JsonGenerator0.writeRaw("Z:AmtYr+S8-.]");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
      System.setCurrentTimeMillis((-294L));
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      byte[] byteArray0 = serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler1, dataInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 125, true);
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, byteArray0, 7, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3604), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3604
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumberField("}", 0.0F);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)74, (ObjectCodec) null, mockPrintStream0, byteArray0, 192, false);
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (-204.8F));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(" slots is now full (all ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1258, (ObjectCodec) null, mockPrintStream0, byteArray0, 1258, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/ZZyjb_Dya", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/ZZyjb_Dya");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " / 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1472, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)44;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-8), false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawValue("");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("x");
      uTF8JsonGenerator0.writeString("x");
      uTF8JsonGenerator0.writeNumber((short)1861);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1395.7217F));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("x");
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(0);
      mockPrintStream0.format(locale0, "<B!", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1635, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 118, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8366, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeStartObject((Object) byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeNumber((short)108);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[6] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2486, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-68), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("No digit following minus sign");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte)44;
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray0[390] = (byte)45;
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (float) (byte)74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("*q.;xz|YeK6[(>@ZJL");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)108;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*q.;xz|YeK6[(>@ZJL", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-448), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 100, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q9;xz|Ye6(>@ZJL");
      stringReader0.skip(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1486), false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 33, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1210, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)26, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1861);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byteArray0[7] = (byte) (-55);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)8);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-81), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("~'eSP(O;]3h", (int) (byte) (-81), 2606);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2923, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1854);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 78, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)127, 2305, true);
      JsonParserSequence.createFlattened(uTF8StreamJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      StringReader stringReader0 = new StringReader("*q9;xz|Ye6(>@ZJL");
      stringReader0.skip(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1486), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1486
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byteArray0[7] = (byte) (-55);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)8);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char char0 = '}';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", (String) null, false, '}', 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("No digit following minus sign");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "*q.;xz|YeK6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4534);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'e';
      charArray0[2] = '/';
      charArray0[3] = 'q';
      charArray0[4] = 'Y';
      charArray0[5] = 'B';
      serializedString0.appendQuoted(charArray0, 0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4534, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("x");
      uTF8JsonGenerator0.writeString("x");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F&HT>@ei?DV#%+", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 111, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'Y';
      charArray0[2] = '*';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (-410));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oyTaiFR),oVL~H", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ");
      iOContext0.allocTokenBuffer(557);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      Object object0 = new Object();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, false);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      uTF8JsonGenerator0.writeArray(intArray0, (-1681), (-1871));
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("}t|ny:l ");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte)44;
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0.writeNumberField("QS04z<`0XK?", (float) (byte)74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Can not ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1.0F);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      int int0 = 224;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(224);
      serializedString0.putQuotedUTF8(byteBuffer0);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      serializedString1.asQuotedUTF8();
      SerializedString serializedString2 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("t@2\"ym@/wyE%C");
      SerializedString serializedString3 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" / 0x");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 20, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 11, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("'Lq\"&");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("'Lq\"&");
      uTF8JsonGenerator0.writeNumber(111);
      bufferedOutputStream0.write(56320);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      uTF8JsonGenerator0.writeNumber("pM;<EV/`bT%,");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1395.7217F));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      byte[] byteArray0 = serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("x");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1950), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-937), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("No digit following minus sign");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 1736);
      String string0 = "";
      int int0 = 92;
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '4';
      charArray0[2] = '[';
      charArray0[3] = 'k';
      charArray0[4] = 'B';
      charArray0[5] = '\\';
      charArray0[6] = '@';
      charArray0[7] = ';';
      charArray0[8] = '3';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1860, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1860
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 123, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[2] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-852), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("m'{ng$C:DYbJ_xi)F%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -852
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1486), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('m');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1486
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Current context not an object but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, mockPrintStream0, byteArray0, 165, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.getFloat(0);
      SerializedString serializedString0 = new SerializedString("start an object");
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      iOContext2.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-317), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      stringReader0.markSupported();
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 1014, false);
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 117, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 609.3F);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeString("n$?Xl");
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw("n$?Xl");
      uTF8JsonGenerator0.writeNumber("xM");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("NM}XtjnVNfE\"/!N$-T");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 71, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte) (-94);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 421, (ObjectCodec) null, (OutputStream) null, byteArray1, 2047, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("T5%-s;[Fh?~Gw;M%I", 421);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte byte0 = (byte)44;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      mockFileOutputStream1.write(byteArray0, 1, 1492);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.format(locale0, "<B!", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.flush();
      char char0 = 'V';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte)44;
      iOContext0.constructTextBuffer();
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1737, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byte[] byteArray1 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte)47;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("*q.;xz|YeK6[(>@ZJL");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1339), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer.allocate(57343);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("x");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8 *MaR;`M", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      File file0 = MockFile.createTempFile("=|Qt~jFrb", "Z*6[Q}B y1R`");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)26, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('l');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)26, (byte)26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("NM}XtjnVNfE\"/!N$-T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("", "Z6\"$`WP;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeRaw('g');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1019, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 1736);
      uTF8JsonGenerator0.writeRaw('J');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[0];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 733, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 8, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 107, false);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 45, (byte)45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" ?slg4^PDy%o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 102, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2751, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      assertEquals(107, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeFieldName("x");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not a objectbut ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      BigInteger bigInteger0 = BigInteger.ONE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1398), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "*q.;xz|YeK6[(>@ZJL";
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)74, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/)2w7h=8]XIC~,]0?U", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)26;
      mockFileOutputStream1.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, mockPrintStream0, byteArray0, 1687, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('V');
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)44);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      uTF8JsonGenerator0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-125);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)8);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("NM}XtjnVNfE\"/!N$-T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[0];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2802, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1395), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)25, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[0];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1180, (ObjectCodec) null, mockPrintStream0, byteArray0, 80, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-1042));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 107, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('l');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 45, (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 1736);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 92, 57343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1737, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)74, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-68), (-1278));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 107, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 45, (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)4;
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1398), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1398
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-125);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "~'eSP(O;]3h", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~'eSP(O;]3h");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertArrayEquals(new byte[] {(byte)32, (byte)26, (byte) (-68), (byte)45, (byte)74, (byte) (-88), (byte)44, (byte)0}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "|]m]AN{Q86:&c", true, 'W', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("NM}XtjnVNfE\"/!N$-T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("", "Z6\"$`WP;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('g');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("*q.;xz|YeK6[(>@ZJL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an object but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1007, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)44, 1736);
      assertArrayEquals(new byte[] {(byte)34, (byte)26, (byte) (-68), (byte)45, (byte)74, (byte) (-88), (byte)44, (byte)0}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1730, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 56320, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byte byte0 = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2327), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)91, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(47);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      String string0 = "YjQYvN9G2oS";
      MockFile mockFile0 = new MockFile("YjQYvN9G2oS");
      MockFile mockFile1 = new MockFile(mockFile0, "I/r`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) iOContext0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1457), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
