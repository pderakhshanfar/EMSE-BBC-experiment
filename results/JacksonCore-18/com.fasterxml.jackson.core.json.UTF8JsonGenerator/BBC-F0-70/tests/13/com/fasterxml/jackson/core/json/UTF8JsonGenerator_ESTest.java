/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:53:56 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1747), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2331, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-560));
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter3 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter3, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator1.writeNumber(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte) (-8), 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)122;
      byteArray0[5] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      jsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString("e6^fekoT\"B");
      filteringGeneratorDelegate0.writeNullField("URd2yYyuFs");
      jsonGenerator0.writeNumber("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1747), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2331, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-560));
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      tokenFilter1.filterStartArray();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(56319, 117);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNullField("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeObjectFieldStart("");
      SerializedString serializedString1 = new SerializedString("ROOT");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeNumber("write a null");
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      int int0 = 2331;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1747), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2331, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-560));
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      tokenFilter1.filterStartArray();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(56319, 117);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
      filteringGeneratorDelegate0.writeNullField("ROOT");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 27, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      tokenFilter1.includeRootValue(9);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter3 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      filteringGeneratorDelegate0.getCodec();
      filteringGeneratorDelegate0.writeNullField("1mhOdT%:A}Ta}MV<|o");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeFieldName("z<:\"/rn>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      jsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray(49);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator1.setPrettyPrinter((PrettyPrinter) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate1.writeString("Dl>>Y-a31 \"1");
      filteringGeneratorDelegate1.getCodec();
      uTF8JsonGenerator1.writeNumber("Dl>>Y-a31 \"1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1255), false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("ROOT", 0);
      char char0 = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1255
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 27, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1000, false);
      uTF8JsonGenerator0.writeNumber((long) 34);
      uTF8JsonGenerator1._verifyValueWrite((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "z:f+Xk,yqrC(f*0c4";
      try { 
        uTF8JsonGenerator1.writeFieldName("z:f+Xk,yqrC(f*0c4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, (-295));
      uTF8JsonGenerator0.writeString("3yu+(b}");
      byte[] byteArray1 = new byte[21];
      byteArray1[19] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber("3yu+(b}");
      uTF8JsonGenerator0.writeNumber(1732);
      uTF8JsonGenerator0.writeFieldName("V9 hJaG\"'k");
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-961), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      SerializedString serializedString0 = new SerializedString("ROOT");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      mockFileOutputStream0.write(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+I]feY!5'Nw7-<4rl", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1340), true);
      SerializedString serializedString0 = new SerializedString("+I]feY!5'Nw7-<4rl");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(") in base64 content");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-961), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = new SerializedString("ROOT");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 99, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator1.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(2534);
      uTF8JsonGenerator1.getOutputTarget();
      uTF8JsonGenerator0._writePPFieldName("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-961), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      String string0 = "Can not write a field name, expecting a value";
      uTF8JsonGenerator0.writeObjectFieldStart("Can not write a field name, expecting a value");
      SerializedString serializedString0 = new SerializedString("ROOT");
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(55296, mathContext0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      uTF8JsonGenerator0.writeNumber("write a null");
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      String string0 = "Can not write a field name, expecting a value";
      uTF8JsonGenerator0.writeObjectFieldStart("Can not write a field name, expecting a value");
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1354);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonGenerator_Feature0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 631, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 102, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocNameCopyBuffer(0);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1349), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((-1349));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      TokenFilter tokenFilter4 = tokenFilter3.includeRootValue(56320);
      uTF8JsonGenerator0.writeNullField("fRcGo");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter4, true, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-450), (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)34;
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 126, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      uTF8JsonGenerator1.writeArray(doubleArray0, 57343, 0);
      uTF8JsonGenerator1.writeNumber("I@v#");
      uTF8JsonGenerator0.writeNumber(126);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "\" 5<UjwRP(Z g+iaN", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVW7E@TeID^iG9", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)0;
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray1 = new byte[9];
      byteArray0[5] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[4] = (byte)34;
      byteArray1[8] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2075, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)48, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 574, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("ROOT", 0);
      char char0 = '';
      uTF8JsonGenerator0.writeRaw('');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      mockFileOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("nac?Z\"Y\"n");
      iOContext0.allocReadIOBuffer();
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 783, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)73, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 574, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("ROOT", 0);
      uTF8JsonGenerator0.writeRaw('');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString1 = new SerializedString("@+f");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString2 = new SerializedString("e6^fekoT\"B");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 79, (ObjectCodec) null, mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeNullField("");
      uTF8JsonGenerator0.writeNumber("e6^fekoT\"B");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator2.writeFieldName("@+f");
      try { 
        uTF8JsonGenerator1._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, (-295));
      uTF8JsonGenerator0.writeString("write a string");
      byte[] byteArray1 = new byte[21];
      byteArray1[19] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[0] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(1732);
      uTF8JsonGenerator0.writeFieldName("V9 hJaG\"'k");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1747), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2331, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = new SerializedString("gV,tO/T6)=k&GA");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      serializedString1.asQuotedUTF8();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1747), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2331, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = new SerializedString("gV,tO/T6)=k&GA");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      serializedString1.asQuotedUTF8();
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      jsonGenerator0.writeString((SerializableString) serializedString1);
      jsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0._writePPFieldName("e6^fekoT\"B");
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)0);
      jsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(1922);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('o');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[19];
      charArray0[0] = 'V';
      charArray0[1] = 'J';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charArray0[2] = 'V';
      charArray0[3] = 'J';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'J';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 13, (-3123));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte byte0 = (byte)0;
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((long) 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("8{JOf");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.write(0);
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = new SerializedString("write a string");
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-52);
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-19), (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRawValue(":s_~xUQ$(");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Dl>>Y-a31 \"1");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeFieldName("Dl>>Y-a31 \"1");
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString("Dl>>Y-a31 \"1");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "ROOT";
      boolean boolean0 = false;
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 28, true);
      uTF8JsonGenerator1.writeBinary(byteArray1, 1, 2);
      int int0 = 413;
      String string1 = "uN%`t1ZW{2f|";
      // Undeclared exception!
      uTF8JsonGenerator1.writeUTF8String(byteArray0, 327, 12);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Dl>>Y-a31 \"1");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)57;
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("): only regular white space (\r, \n, \t) is allowed between tokens");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3574, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, (-1884));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 72, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1490, false);
      SerializedString serializedString1 = new SerializedString("ROOT");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("ROOT");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile("o&jw3AIAw", "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o&jw3AIAw", false);
      mockFileOutputStream0.flush();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 34, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}&K}I[h22hs", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeFieldName("}&K}I[h22hs");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ROOT");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4806), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1138, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-52);
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-19), (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "|Brv@~z2YfSg^L";
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1279, (ObjectCodec) null, mockPrintStream0, byteArray0, (-3467), false);
      SerializedString serializedString0 = new SerializedString("|Brv@~z2YfSg^L");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("|Brv@~z2YfSg^L");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3467
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "|Brv@~z2YfSg^L", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2089;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2089, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1757), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter1, false, false);
      filteringGeneratorDelegate1.getCodec();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[3];
      charArray0[1] = 'e';
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)44, 983);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      mockFileOutputStream0.flush();
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      mockFileOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)40;
      // Undeclared exception!
      try { 
        iOContext0.releaseWriteEncodingBuffer(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 485, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString2);
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator1.writeNumber(54);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-708), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      mockFileOutputStream0.close();
      try { 
        uTF8JsonGenerator0.writeString("ROOT");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "\" 5<UjwRP(Z g+iaN";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 952, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.setCurrentValue("\" 5<UjwRP(Z g+iaN");
      SerializedString serializedString0 = new SerializedString("write a binary value");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2572, true);
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 28, true);
      uTF8JsonGenerator1.writeBinary(byteArray0, 1, 2);
      int int0 = 413;
      String string0 = "uN%`t1ZW{2f|";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ROOT", "uN%`t1ZW{2f|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // uN%`t1ZW{2f|
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 160, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("Unexpecte end[of-infu4 Urthin/betwee* ");
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0.writeNumber("Unexpecte end[of-infu4 Urthin/betwee* ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = new SerializedString("write a string");
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 99, false);
      uTF8JsonGenerator0.writeNumber((long) 99);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Too few bytes available: missing ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeFieldName("write a string");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, 9, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("ROOT");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("ROOT");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      int int0 = 96;
      uTF8JsonGenerator0.writeNumber(96);
      uTF8JsonGenerator0.getOutputTarget();
      mockFileOutputStream0.write(2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._writePPFieldName("aZ5<Y?nm[}B[O");
      int int1 = 221;
      Base64Variant base64Variant0 = null;
      MockFile mockFile0 = new MockFile("aZ5<Y?nm[}B[O", "ROOT");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "sMC}+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"sMC}+\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 57343;
      doubleArray0[2] = (double) 56319;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 57343;
      uTF8JsonGenerator0.writeArray(doubleArray0, 109, (-1));
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator1._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeNullField("ROOT");
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeNumber((long) 0);
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      charArray0[3] = 'V';
      charArray0[4] = '\u0000';
      charArray0[5] = 'u';
      charArray0[6] = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IRT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 245, false);
      uTF8JsonGenerator0.writeStartArray((-933));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2282, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1784, false);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator1.writeNumber("IRT");
      uTF8JsonGenerator1.writeNumber(2);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ARRAY
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 107, true);
      char[] charArray0 = new char[6];
      charArray0[1] = 'm';
      charArray0[2] = 'q';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 38, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 1014, 2145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)44;
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRaw("ROOT");
      try { 
        uTF8JsonGenerator0.writeNumber((-2053));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2082, (ObjectCodec) null, mockPrintStream0, byteArray0, 4, false);
      int int0 = 93;
      uTF8JsonGenerator0.writeNumber(93);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("|Brv@~z2YfSg^L");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, filterOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3950, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary(byteArray0, 2, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      uTF8JsonGenerator0._writePPFieldName(serializedString1);
      jsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0._writePPFieldName("e6^fekoT\"B");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      boolean boolean0 = false;
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      char char0 = 'e';
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1022), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2572, true);
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      mockFileOutputStream0.close();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = new char[3];
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(23);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '<';
      charArray0[2] = 'g';
      charArray0[3] = 'z';
      charArray0[4] = 'l';
      charArray0[5] = '_';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-63);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      byteArray0[3] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      jsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0._writePPFieldName("e6^fekoT\"B");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      try { 
        jsonGenerator0.writeFieldName("Too few bytes available: missing ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ROOT");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a binary value");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(56320);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      filteringGeneratorDelegate0.writeNumberField("", (int) (byte) (-40));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      SerializedString serializedString2 = new SerializedString("B`");
      serializedString2.appendUnquotedUTF8(byteArray0, 2);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0.writeString("Sy");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte byte0 = (byte)122;
      byte[] byteArray0 = new byte[7];
      MockFile mockFile0 = new MockFile((String) null, "#&0s#zqKF");
      File file0 = MockFile.createTempFile("=e`eFa8x", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-505), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, 2, (int) (byte)122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVW7E@TeID^iG9", true);
      byte byte0 = (byte)3;
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1524), false);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1524
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeNullField("ROOT");
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeNumber((long) 0);
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      charArray0[2] = 'F';
      charArray0[3] = 'V';
      charArray0[4] = 'y';
      charArray0[5] = 'u';
      charArray0[6] = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      mockFileOutputStream0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      char char0 = 'e';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ROOT");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1119L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Im_A9XSYAx?Pi", false);
      mockFileOutputStream0.flush();
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)111;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Im_A9XSYAx?Pi");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 154, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 574, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("ROOT", 0);
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, (-295));
      uTF8JsonGenerator0.writeString("3yu+(b}");
      byte[] byteArray1 = new byte[24];
      byteArray1[19] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber("3yu+(b}");
      uTF8JsonGenerator0.writeNumber((-262));
      uTF8JsonGenerator0.writeFieldName("V9 hJaG\"'k");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      SerializedString serializedString0 = new SerializedString("pp@]%HFVrKb");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("start an object");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) serializedString1;
      PrintStream printStream0 = mockPrintStream0.printf("As", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, (-818), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -818
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!-@d`T<+j~mB#bk]");
      mockFileOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 51, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\" 5<UjwRP(Z g+iaN", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2572, true);
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 57343, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57343
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      iOContext0.allocReadIOBuffer();
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jsonGenerator0.writeNumber(bigDecimal0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      jsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'z';
      charArray0[2] = 'R';
      charArray0[3] = 'g';
      charArray0[4] = 'l';
      charArray0[5] = '<';
      charArray0[6] = '_';
      charArray0[7] = '<';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, (int) (byte)122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("ROOT");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(" starting at ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jdqn/fCp[%t*SEtkjk", false);
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1515, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate1.getCodec();
      filteringGeneratorDelegate1.writeNullField("#i$&P=D7/|_v+42H:");
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 124, (ObjectCodec) null, byteArrayBuilder1);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate2 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate2.getCodec();
      FilteringGeneratorDelegate filteringGeneratorDelegate3 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      try { 
        filteringGeneratorDelegate3.writeNullField("1mhOdT%:A}Ta}MV<|o");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2203), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.writeNumberField("", 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("B`");
      serializedString1.appendUnquotedUTF8(byteArray0, 56320);
      try { 
        filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "write a string";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0, (-458), (-1483));
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-790L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jdqn/fCp[%t*SEtkjk", false);
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1515, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate1.getCodec();
      filteringGeneratorDelegate1.writeNullField("#i$&P=D7/|_v+42H:");
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      charArray0[2] = 'C';
      charArray0[3] = 'G';
      charArray0[4] = 'D';
      charArray0[5] = 'v';
      charArray0[6] = 'e';
      charArray0[7] = '.';
      charArray0[8] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 4, 1217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartArray(1001);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1884), true);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1884
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((-2688L));
      uTF8JsonGenerator0.writeRaw('y');
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      boolean boolean0 = false;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1495);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 100, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 13, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-123);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("expected digit (0-9) to follow minus sign, for valid numeric value", 1, 1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      int int0 = (-820);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      int int1 = 108;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (-912), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -912
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[1];
      char char0 = '(';
      charArray0[0] = '(';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1639, (int) (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1639
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2203), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      mockFileOutputStream0.getChannel();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)116);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      jsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("expected digit (0-9) to follow minus sign, for valid numeric value", 1, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 212, (ObjectCodec) null, pipedOutputStream0, byteArray0, 125, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 512, 53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = new SerializedString("e6^fekoT\"B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("-1");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      uTF8JsonGenerator0.writeString(charArray0, (-2816), (-1950));
      IOContext iOContext2 = new IOContext(bufferRecycler0, bigInteger0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((float) (-1950));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\"QPp$'}Apsa5ZSq;kc6", false);
      mockFileOutputStream1.flush();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3896, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 4789, false);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ROOT");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a binary value");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(56320);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, false, false);
      filteringGeneratorDelegate0.writeNumberField("", (int) (byte) (-40));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = new SerializedString("B`");
      serializedString2.appendUnquotedUTF8(byteArray0, 2);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0.writeString("Sy");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVW7E@TeID^iG9", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2572, true);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString1 = new SerializedString("");
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeString("");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 200, (ObjectCodec) null, (OutputStream) null, byteArray0, 128, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte) (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator1.overrideStdFeatures(56320, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      uTF8JsonGenerator1.writeArray(doubleArray0, 57343, 0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, 55296, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\"QPp$'}Apsa5ZSq;kc6", false);
      mockFileOutputStream1.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 87, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-5157), 119);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVW7E@TeID^iG9", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)3;
      byteArray1[6] = (byte)3;
      byteArray1[7] = (byte)3;
      byteArray1[8] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2075, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)48, 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0.writeStartArray(1001);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(473);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("ROOT", (-2130), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator1.writeObjectFieldStart("iev'ohE");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("write a boolean value", (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, (-1), (-295));
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("3yu+(b}");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(3879L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "\" 5<UjwRP(Z g+iaN", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eVW7E@TeID^iG9", true);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2572, true);
      SerializedString serializedString0 = new SerializedString("\" 5<UjwRP(Z g+iaN");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeString("");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[7] = (double) 55296;
      doubleArray0[2] = (double) 0;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-1));
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 3);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0._writePPFieldName(",Jk<<t@_");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-398), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile("+Infinity", "+Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1372), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getSchema();
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, (String) null, (-1372));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-309), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1905, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3499), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)103;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (byte)103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT");
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      uTF8JsonGenerator0.writeString("ROOT");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)122, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonParser$Feature");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      char[] charArray0 = new char[8];
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)3, 2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      double[] doubleArray0 = new double[3];
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-468), 1);
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      iOContext0.allocTokenBuffer();
      doubleArray0[2] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)0, 1);
      uTF8JsonGenerator0.flush();
      jsonGenerator0.writeNumber((long) (-468));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 300, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((short)54);
      uTF8JsonGenerator0.writeRaw((char[]) null, (int) (byte)34, (int) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 102, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 512, false);
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      mockFile0.setWritable(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1438), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("o&jw3AIAw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1884), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator1.writeNumber(4330L);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      uTF8JsonGenerator0.writeString((char[]) null, (-430), (-6447));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)7;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2082, (ObjectCodec) null, mockPrintStream0, byteArray0, 4, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 82, true);
      uTF8JsonGenerator0.writeStartArray((-2111));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)3, 2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext3.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 57343;
      doubleArray0[6] = (double) 57343;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeArray(doubleArray0, (-2918), (-2918));
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray((-843));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte byte0 = (byte)0;
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ROOT");
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 91, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonParseException");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ROOT");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("* Of[ >[$", false);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-5375), (-2792));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ROOT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartObject();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 57343;
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      uTF8JsonGenerator0.writeString((char[]) null, (-430), (-6447));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)7;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2082, (ObjectCodec) null, mockPrintStream0, byteArray0, (-889), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -889
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (-2945));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("* Of[ >[$", false);
      mockFileOutputStream0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 82, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 63, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 97, 2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      mockFileOutputStream0.release();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1386, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0.writeNumber(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1296), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      filteringGeneratorDelegate0.writeNullField("1mhOdT%:A}Ta}MV<|o");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 908, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\"QPp$'}Apsa5ZSq;kc6", false);
      mockFileOutputStream1.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2619, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1023, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"QPp$'}Apsa5ZSq;kc6");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) 56320;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-200), 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -200
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, " bytes (out of ");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      int int0 = 12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1788.5996592283));
      uTF8JsonGenerator0.writeNumberField("fV_;IQ-", bigDecimal0);
      int int1 = 7;
      int int2 = (-998);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-998), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 3);
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (-1362), false);
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'C';
      charArray0[2] = 'a';
      charArray0[3] = 'C';
      charArray0[4] = ';';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1296), (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'H';
      charArray0[2] = '~';
      charArray0[3] = '[';
      charArray0[4] = '?';
      charArray0[5] = 'D';
      uTF8JsonGenerator0.writeRaw(charArray0, (-1296), 0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("2adp&Rc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      mockFileOutputStream0.release();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1386, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3339, false);
      SerializedString serializedString0 = new SerializedString("ROOT");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeString((String) null);
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber((double) 56320);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\"QPp$'}Apsa5ZSq;kc6", false);
      mockFileOutputStream1.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2619, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1023, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3896, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 4789, false);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("\"QPp$'}Apsa5ZSq;kc6");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1744, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)116);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((String) null);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 300, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (byte)122);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.overrideStdFeatures(8, 46);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 56320;
      doubleArray0[1] = (double) 57;
      doubleArray0[2] = (double) 354;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 56320;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 27, true);
      Object object0 = new Object();
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectField("/-", object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1296), (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      filteringGeneratorDelegate0.writeNullField("1mhOdT%:A}Ta}MV<|o");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 908, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[1] = (byte)122;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("d.&%[Cq$]6#o&JH");
      MockFile mockFile0 = new MockFile("gLv@|%+s", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      mockFileOutputStream0.write(byteArray0);
      Base64Variant base64Variant0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(104);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 97, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("* Of[ >[$", false);
      mockFileOutputStream0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((long) 872);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6095, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2742, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2203), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)116);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      jsonGenerator0.writeString((SerializableString) serializedString0);
      jsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      jsonGenerator0.writeString("ROOT");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-961), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)116, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 12, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 925.47513715;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 57343;
      doubleArray0[6] = (double) 57343;
      doubleArray0[7] = (double) 56319;
      doubleArray0[8] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 7, 1);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      int int0 = 6;
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      mockFileOutputStream0.write(byteArray0);
      Base64Variant base64Variant0 = null;
      int int1 = (-391);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".G");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("%tP?o4=ZVehc]");
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("8H=eC,[y");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      MockFile mockFile0 = new MockFile((String) null, "o&jw3AIAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getSchema();
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      mockFileOutputStream0.release();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1386, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0.writeNumber(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-2898), 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".G");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 262144);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      String string0 = ".G";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".G");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      String string0 = "write a boolean value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 29, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1630), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1630
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1088, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2509, false);
      String string0 = "UTF16_LE";
      uTF8JsonGenerator0._verifyValueWrite("UTF16_LE");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-3467), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      try { 
        jsonGenerator0.writeRawUTF8String(byteArray0, 55296, 12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ROOT");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 27, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRaw('}');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1921, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".G");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("8H=eC,[y");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("rI:1kp");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 372, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = ';';
      charArray0[2] = 'l';
      charArray0[3] = 'a';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 51, 1547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(4741);
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("");
      TokenFilter tokenFilter3 = tokenFilter2.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "s";
      filteringGeneratorDelegate0.writeNumberField("s", 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[0];
      serializedString0.appendUnquotedUTF8(byteArray0, 1633);
      try { 
        filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 55296;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 2, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-23), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a raw (unencoded) value");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("ROOT", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2870), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 12, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 56319;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 56320;
      doubleArray0[7] = (double) 55296;
      doubleArray0[8] = (double) 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 12, 3055);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("wk-Uz2_");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 18, 79, false);
      readerBasedJsonParser0._getByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(",x\"9M>tKQ3A%(hy}z\"8");
      uTF8JsonGenerator0._verifyValueWrite("wQ8nO/[n");
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (-660), (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1`y`>W[/", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1UjJEwlSJ", false);
      byte byte0 = (byte)116;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1053, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
      uTF8JsonGenerator0.writeNull();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "+Infinity";
      StringReader stringReader0 = new StringReader("+Infinity");
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2499), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("+Infinity");
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1386, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0._releaseBuffers();
      assertArrayEquals(new byte[] {(byte)108, (byte)34, (byte)34, (byte)116, (byte)0, (byte)116, (byte)0, (byte)116}, byteArray0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      filteringGeneratorDelegate0.writeNumberField("EB", 50);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "ROOT";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6095, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2742, false);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 91, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-23), 1820);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      String string0 = "(%&GQ_Ln\\Zi`wvI";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("wQ8nO/[n");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 3;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string1 = "8H=eC,[y";
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("8H=eC,[y");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      double[] doubleArray0 = new double[3];
      uTF8JsonGenerator0.overrideStdFeatures((-468), 1);
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)0, 1);
      uTF8JsonGenerator0.writeNumber(") out of range of int");
      uTF8JsonGenerator0._verifyValueWrite(") out of range of int");
      uTF8JsonGenerator0.flush();
      assertEquals("[\"1.0\"] \") out of range of int\" ", byteArrayOutputStream0.toString());
      assertEquals(32, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[3] = (byte)116;
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)116, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 4078, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4078
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-50);
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, pipedOutputStream0, byteArray1, 55296, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 27, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'R';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)122, (-70));
      uTF8JsonGenerator0.writeNull();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-961), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)116, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0._verifyValueWrite("");
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)32, (byte)34, (byte)48, (byte)34, (byte)32}, byteArray0);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "|Brv@~z2YfSg^L";
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Brv@~z2YfSg^L");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      uTF8JsonGenerator0.writeString((char[]) null, (-430), (-6447));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)7;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("|Brv@~z2YfSg^L");
      mockFileInputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "QmMrE]|/_#ZK>YZDZ";
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 2, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QmMrE]|/_#ZK>YZDZ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1321), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, (-1321), (-406));
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 403, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 403
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte byte0 = (byte)0;
      byte byte1 = (byte)116;
      mockFileOutputStream0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)116, true);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "8D]=Z>HKTc<4x";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("x", "8D]=Z>HKTc<4x", false, '%', 1048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 370, (ObjectCodec) null, byteArrayOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 55296, (ObjectCodec) null, (OutputStream) null, byteArray0, 57343, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = null;
      uTF8JsonGenerator0.writeRawValue((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      try { 
        uTF8JsonGenerator0.writeNumber((short)234);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2369, (-1150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      byte byte0 = (byte)116;
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1021), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 101, false);
      SerializedString serializedString0 = new SerializedString("ROOT");
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 2, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QmMrE]|/_#ZK>YZDZ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1321), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, (-1321), (-406));
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 27, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber("");
      uTF8JsonGenerator0.writeNumber((long) 55296);
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2454), (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1, 354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((short) (byte)50);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Dl>>Y-a31 \"1");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(604);
      tokenFilter1.filterStartArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw("Dl>>Y-a31 \"1", 1, 0);
      uTF8JsonGenerator0.getSchema();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.write(2);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 37, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-106), false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -106
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      uTF8JsonGenerator0.writeString((char[]) null, (-430), (-6447));
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)7;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("o&jw3AIAw");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2082, (ObjectCodec) null, mockPrintStream0, byteArray0, (-889), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -889
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = null;
      int int1 = (-501);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 370, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      StringWriter stringWriter0 = new StringWriter(102);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2000, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)0, 1);
      uTF8JsonGenerator0.writeNumber(") out of range of int");
      uTF8JsonGenerator0._verifyValueWrite(") out of range of int");
      assertEquals(32, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ROOT", false);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 27, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      assertArrayEquals(new byte[] {(byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-689), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-6877));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2660, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.write(3);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      uTF8JsonGenerator0.writeString((char[]) null, (-430), (-6447));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)7, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (byte)0, 2, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 18, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("NBc!MGZe");
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, (-891));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0xfffffc85
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("jW&_q/.}e[]>");
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("jW&_q/.}e[]>", 33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1015, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 4157, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4157
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("*zQX\"K*)92:'l[_");
      File file0 = MockFile.createTempFile("*zQX\"K*)92:'l[_", "*zQX\"K*)92:'l[_", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("*zQX\"K*)92:'l[_", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 4157, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4157
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      uTF8JsonGenerator0._maximumNonEscapedChar = 1915;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 106);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 2334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-430), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(939);
      uTF8JsonGenerator0.writeNumber((short) (-2658));
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeFieldName((SerializableString) serializedString0);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = null;
      int int1 = (-501);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("jW&_q/.}e[]>");
      try { 
        uTF8JsonGenerator0._outputSurrogates(3817, 1920);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xee9, second 0x780
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("o&jw3AIAw");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-963), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(3);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("Dl>>Y-a31 \"1");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 604, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParserSequence0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(604);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter2, true, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter2, true, true);
      filteringParserDelegate0.getSchema();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw("Dl>>Y-a31 \"1", 1, 0);
      uTF8JsonGenerator0.getSchema();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("rI:1kp");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1381, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 217, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      boolean boolean0 = false;
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(2334);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getSchema();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("/`haX>F~0gzV4", 2334, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 354, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber(") out of range of int");
      assertEquals(23, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 56319, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QmMrE]|/_#ZK>YZDZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      int int0 = 0;
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 415, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2334, 0, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1577, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 874;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 874, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[2] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      char char0 = 'i';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("%Ghd}tQ5>.", "write a boolean value", false, 'i', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 21)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
