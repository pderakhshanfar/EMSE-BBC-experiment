* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Starting Client-0
* Connecting to master process on port 15565
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-18/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.UTF8JsonGenerator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2989
* Using seed 719056410
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 795 / 2989
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 603s and 180 generations, 162918 statements, best individual has fitness: 1011.0
* Minimizing test suite
[MASTER] 15:53:35.307 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 1011
* Number of covered goals: 771
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 558
* Number of covered goals: 405
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 138
* Number of covered goals: 138
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 758
* Number of covered goals: 434
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 14
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 45
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 72%
* Total number of goals: 558
* Number of covered goals: 403
* Generated 339 tests with total length 6870
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:54:56.597 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6670166666666667% of time used, but only 34/339 tests minimized), falling back to using all assertions
[MASTER] 15:55:16.985 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 3%
* Compiling and checking tests
[MASTER] 15:55:23.902 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 15:55:23.902 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_42_1633708523895
[MASTER] 15:55:24.606 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:55:25.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 15:55:26.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_47_tmp__ESTest.test0(UTF8JsonGenerator_47_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:26.825 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte) (-65);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
uTF8JsonGenerator0.writeStartArray();
assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());


[MASTER] 15:55:34.867 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_55_tmp__ESTest.test0(UTF8JsonGenerator_55_tmp__ESTest.java:30)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:34.868 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte) (-65);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
uTF8JsonGenerator0.writeStartArray();
uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)0);
BigInteger bigInteger0 = BigInteger.ZERO;
uTF8JsonGenerator0.writeNumber(bigInteger0);
assertArrayEquals(new byte[] {(byte)91, (byte)34, (byte)34, (byte)44, (byte)48, (byte)0, (byte)0, (byte) (-65)}, byteArray0);
assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());


[MASTER] 15:55:42.076 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_58_tmp__ESTest.test0(UTF8JsonGenerator_58_tmp__ESTest.java:32)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:42.077 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte) (-65);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
uTF8JsonGenerator0.writeStartArray();
uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)0);
BigInteger bigInteger0 = BigInteger.ZERO;
uTF8JsonGenerator0.writeNumber(bigInteger0);
uTF8JsonGenerator0.writeNumber("w");

[MASTER] 15:55:45.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_60_tmp__ESTest.test0(UTF8JsonGenerator_60_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:45.779 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte)0;
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
byte[] byteArray1 = new byte[3];
byteArray1[0] = (byte)0;
byteArray1[1] = (byte)48;
byteArray1[2] = (byte)0;
uTF8JsonGenerator0.writeUTF8String(byteArray1, 1, (byte)0);
assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());


[MASTER] 15:55:53.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_64_tmp__ESTest.test0(UTF8JsonGenerator_64_tmp__ESTest.java:30)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:53.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
mockFileOutputStream0.close();
byteArray0[7] = (byte) (-65);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)48, 64);

[MASTER] 15:55:57.214 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_66_tmp__ESTest.test0(UTF8JsonGenerator_66_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:55:57.215 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-65), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
assertArrayEquals(new byte[] {(byte)34, (byte)32, (byte)34, (byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());


[MASTER] 15:56:01.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_70_tmp__ESTest.test0(UTF8JsonGenerator_70_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:56:01.335 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)48;
byteArray0[3] = (byte) (-58);
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte) (-65);
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
uTF8JsonGenerator0.writeStartArray();
uTF8JsonGenerator0.writeString("start an object");

[MASTER] 15:56:05.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_74_tmp__ESTest.test0(UTF8JsonGenerator_74_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:56:05.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
Object object0 = new Object();
IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)11;
byteArray0[2] = (byte) (-58);
byteArray0[3] = (byte)0;
byteArray0[6] = (byte)0;
UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-61), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
uTF8JsonGenerator0.writeNumber((double) 0);
char[] charArray0 = new char[0];
uTF8JsonGenerator0.writeString(charArray0, (-31), (int) (byte)32);

[MASTER] 15:56:10.230 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.fasterxml.jackson.core.json.UTF8JsonGenerator_78_tmp__ESTest.test0(UTF8JsonGenerator_78_tmp__ESTest.java:71)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 15:56:10.249 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
assertFalse(boolean0);

BufferRecycler bufferRecycler0 = new BufferRecycler();
assertNotNull(bufferRecycler0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

Object object0 = new Object();
assertNotNull(object0);

IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
assertFalse(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertNotNull(iOContext0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

byte[] byteArray0 = new byte[8];
byteArray0[1] = (byte)0;
JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertFalse(iOContext1.isResourceManaged());
assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
assertSame(iOContext0, iOContext1);
assertSame(iOContext1, iOContext0);
assertNotNull(iOContext1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
assertEquals(16, charArray0.length);
assertNotNull(charArray0);

MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("start an object");
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertNotNull(mockFileOutputStream1);

IOContext iOContext2 = new IOContext(bufferRecycler0, "' (for ", true);
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotNull(iOContext2);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertNotSame(byteArray1, byteArray0);
assertEquals(8000, byteArray1.length);
assertNotNull(byteArray1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);

StringReader stringReader0 = new StringReader("start an object");
assertNotNull(stringReader0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNotNull(charsToNameCanonicalizer0);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
assertFalse(iOContext0.equals((Object)iOContext2));
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNotNull(readerBasedJsonParser0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
assertFalse(iOContext0.equals((Object)iOContext2));
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertNull(readerBasedJsonParser1.getCurrentName());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertEquals(1, readerBasedJsonParser1.getFeatureMask());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNotNull(readerBasedJsonParser1);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, (TokenFilter) null, false, false);
assertFalse(iOContext0.equals((Object)iOContext2));
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertNull(readerBasedJsonParser1.getCurrentName());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertEquals(1, readerBasedJsonParser1.getFeatureMask());
assertEquals(0, filteringParserDelegate0.getMatchCount());
assertFalse(filteringParserDelegate0.canReadObjectId());
assertFalse(filteringParserDelegate0.canReadTypeId());
assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
assertNull(filteringParserDelegate0.getLastClearedToken());
assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
assertEquals(0, filteringParserDelegate0.getFormatFeatures());
assertNull(filteringParserDelegate0.getCurrentToken());
assertFalse(filteringParserDelegate0.requiresCustomCodec());
assertEquals(1, filteringParserDelegate0.getFeatureMask());
assertFalse(filteringParserDelegate0.hasCurrentToken());
assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertNotNull(filteringParserDelegate0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

ObjectCodec objectCodec0 = filteringParserDelegate0.getCodec();
assertFalse(iOContext0.equals((Object)iOContext2));
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertEquals(1, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
assertNull(readerBasedJsonParser1.getCurrentName());
assertNull(readerBasedJsonParser1.getLastClearedToken());
assertFalse(readerBasedJsonParser1.isClosed());
assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
assertFalse(readerBasedJsonParser1.requiresCustomCodec());
assertFalse(readerBasedJsonParser1.canReadObjectId());
assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
assertFalse(readerBasedJsonParser1.hasTextCharacters());
assertFalse(readerBasedJsonParser1.hasCurrentToken());
assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
assertFalse(readerBasedJsonParser1.canReadTypeId());
assertNull(readerBasedJsonParser1.getCurrentToken());
assertEquals(1, readerBasedJsonParser1.getFeatureMask());
assertEquals(0, filteringParserDelegate0.getMatchCount());
assertFalse(filteringParserDelegate0.canReadObjectId());
assertFalse(filteringParserDelegate0.canReadTypeId());
assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
assertNull(filteringParserDelegate0.getLastClearedToken());
assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
assertEquals(0, filteringParserDelegate0.getFormatFeatures());
assertNull(filteringParserDelegate0.getCurrentToken());
assertFalse(filteringParserDelegate0.requiresCustomCodec());
assertEquals(1, filteringParserDelegate0.getFeatureMask());
assertFalse(filteringParserDelegate0.hasCurrentToken());
assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
assertFalse(iOContext0.isResourceManaged());
assertEquals(64, charsToNameCanonicalizer0.bucketCount());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertEquals(0, charsToNameCanonicalizer0.collisionCount());
assertFalse(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
assertSame(iOContext0, iOContext1);
assertNotSame(iOContext0, iOContext2);
assertNull(objectCodec0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 687, false);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(687, uTF8JsonGenerator0.getOutputBuffered());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertEquals(8, byteArray0.length);
assertNotNull(uTF8JsonGenerator0);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

Object object1 = new Object();
assertFalse(object1.equals((Object)object0));
assertNotNull(object1);

uTF8JsonGenerator0.writeNumber((int) (byte)0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotSame(byteArray0, byteArray1);
assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertEquals(8, byteArray0.length);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

uTF8JsonGenerator0.writeFieldName("' (for ");
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertArrayEquals(new byte[] {(byte)32, (byte)44, (byte)39, (byte)32, (byte)40, (byte)102, (byte)111, (byte)114}, byteArray0);
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotSame(byteArray0, byteArray1);
assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertEquals(8, byteArray0.length);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);

SerializedString serializedString0 = new SerializedString("");
assertEquals(0, serializedString0.charLength());
assertEquals("", serializedString0.toString());
assertEquals("", serializedString0.getValue());
assertNotNull(serializedString0);

uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertFalse(iOContext2.equals((Object)iOContext1));
assertFalse(iOContext2.equals((Object)iOContext0));
assertArrayEquals(new byte[] {(byte)32, (byte)44, (byte)39, (byte)32, (byte)40, (byte)102, (byte)111, (byte)114}, byteArray0);
assertTrue(uTF8JsonGenerator0.canOmitFields());
assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
assertFalse(uTF8JsonGenerator0.canWriteTypeId());
assertFalse(uTF8JsonGenerator0.isClosed());
assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
assertFalse(uTF8JsonGenerator0.canWriteObjectId());
assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
assertEquals(0, serializedString0.charLength());
assertEquals("", serializedString0.toString());
assertEquals("", serializedString0.getValue());
assertNull(iOContext2.getEncoding());
assertTrue(iOContext2.isResourceManaged());
assertNotSame(byteArray0, byteArray1);
assertNotSame(mockFileOutputStream1, mockFileOutputStream0);
assertNotSame(iOContext2, iOContext1);
assertNotSame(iOContext2, iOContext0);
assertEquals(8, byteArray0.length);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(56319, GeneratorBase.SURR1_LAST);
assertEquals(56320, GeneratorBase.SURR2_FIRST);
assertEquals(57343, GeneratorBase.SURR2_LAST);
assertEquals(55296, GeneratorBase.SURR1_FIRST);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 12
* Writing tests to file
* Writing JUnit test case 'UTF8JsonGenerator_ESTest' to results/JacksonCore-18/com.fasterxml.jackson.core.json.UTF8JsonGenerator/BBC-F0-opt-40/tests/4
* Done!

* Computation finished
